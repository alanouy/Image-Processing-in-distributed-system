
newsdcardproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008868  08008868  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008870  08008870  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00026804  20000088  08008900  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002688c  08008900  0002688c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ce4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab5  00000000  00000000  00031d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002564a  00000000  00000000  00035d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f981  00000000  00000000  0005b3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4683  00000000  00000000  0006ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  0013f424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008274 	.word	0x08008274

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08008274 	.word	0x08008274

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <SELECT+0x1c>)
 8000bb0:	f001 fe72 	bl	8002898 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f001 fbb9 	bl	800232c <HAL_Delay>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <DESELECT+0x1c>)
 8000bd0:	f001 fe62 	bl	8002898 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f001 fba9 	bl	800232c <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020000 	.word	0x40020000

08000be4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bee:	bf00      	nop
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SPI_TxByte+0x30>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d1f8      	bne.n	8000bf0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bfe:	1df9      	adds	r1, r7, #7
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2201      	movs	r2, #1
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <SPI_TxByte+0x30>)
 8000c06:	f002 fb4e 	bl	80032a6 <HAL_SPI_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2002377c 	.word	0x2002377c

08000c18 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c24:	bf00      	nop
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SPI_TxBuffer+0x30>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d1f8      	bne.n	8000c26 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c34:	887a      	ldrh	r2, [r7, #2]
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <SPI_TxBuffer+0x30>)
 8000c3c:	f002 fb33 	bl	80032a6 <HAL_SPI_Transmit>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2002377c 	.word	0x2002377c

08000c4c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c56:	bf00      	nop
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <SPI_RxByte+0x34>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d1f8      	bne.n	8000c58 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c66:	1dba      	adds	r2, r7, #6
 8000c68:	1df9      	adds	r1, r7, #7
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <SPI_RxByte+0x34>)
 8000c72:	f002 fc54 	bl	800351e <HAL_SPI_TransmitReceive>

	return data;
 8000c76:	79bb      	ldrb	r3, [r7, #6]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2002377c 	.word	0x2002377c

08000c84 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c8c:	f7ff ffde 	bl	8000c4c <SPI_RxByte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	701a      	strb	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <SD_ReadyWait+0x30>)
 8000ca8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cac:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cae:	f7ff ffcd 	bl	8000c4c <SPI_RxByte>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2bff      	cmp	r3, #255	; 0xff
 8000cba:	d003      	beq.n	8000cc4 <SD_ReadyWait+0x24>
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SD_ReadyWait+0x30>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f4      	bne.n	8000cae <SD_ReadyWait+0xe>

	return res;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200004e8 	.word	0x200004e8

08000cd4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cda:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cde:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ce0:	f7ff ff70 	bl	8000bc4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e005      	b.n	8000cf6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cea:	20ff      	movs	r0, #255	; 0xff
 8000cec:	f7ff ff7a 	bl	8000be4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b09      	cmp	r3, #9
 8000cfa:	ddf6      	ble.n	8000cea <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cfc:	f7ff ff52 	bl	8000ba4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d00:	2340      	movs	r3, #64	; 0x40
 8000d02:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d14:	2395      	movs	r3, #149	; 0x95
 8000d16:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2106      	movs	r1, #6
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff7b 	bl	8000c18 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d22:	e002      	b.n	8000d2a <SD_PowerOn+0x56>
	{
		cnt--;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d2a:	f7ff ff8f 	bl	8000c4c <SPI_RxByte>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d002      	beq.n	8000d3a <SD_PowerOn+0x66>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f4      	bne.n	8000d24 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d3a:	f7ff ff43 	bl	8000bc4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d3e:	20ff      	movs	r0, #255	; 0xff
 8000d40:	f7ff ff50 	bl	8000be4 <SPI_TxByte>

	PowerFlag = 1;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <SD_PowerOn+0x80>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000a5 	.word	0x200000a5

08000d58 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <SD_PowerOff+0x14>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	200000a5 	.word	0x200000a5

08000d70 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <SD_CheckPower+0x14>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000a5 	.word	0x200000a5

08000d88 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SD_RxDataBlock+0x58>)
 8000d94:	22c8      	movs	r2, #200	; 0xc8
 8000d96:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d98:	f7ff ff58 	bl	8000c4c <SPI_RxByte>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d103      	bne.n	8000dae <SD_RxDataBlock+0x26>
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <SD_RxDataBlock+0x58>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f4      	bne.n	8000d98 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2bfe      	cmp	r3, #254	; 0xfe
 8000db2:	d001      	beq.n	8000db8 <SD_RxDataBlock+0x30>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e00f      	b.n	8000dd8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff60 	bl	8000c84 <SPI_RxBytePtr>
	} while(len--);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	1e5a      	subs	r2, r3, #1
 8000dc8:	603a      	str	r2, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f4      	bne.n	8000db8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000dce:	f7ff ff3d 	bl	8000c4c <SPI_RxByte>
	SPI_RxByte();
 8000dd2:	f7ff ff3b 	bl	8000c4c <SPI_RxByte>

	return TRUE;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200004ea 	.word	0x200004ea

08000de4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000df4:	f7ff ff54 	bl	8000ca0 <SD_ReadyWait>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d001      	beq.n	8000e02 <SD_TxDataBlock+0x1e>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e02f      	b.n	8000e62 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff feed 	bl	8000be4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2bfd      	cmp	r3, #253	; 0xfd
 8000e0e:	d020      	beq.n	8000e52 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff feff 	bl	8000c18 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e1a:	f7ff ff17 	bl	8000c4c <SPI_RxByte>
		SPI_RxByte();
 8000e1e:	f7ff ff15 	bl	8000c4c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e22:	e00b      	b.n	8000e3c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e24:	f7ff ff12 	bl	8000c4c <SPI_RxByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d006      	beq.n	8000e44 <SD_TxDataBlock+0x60>
			i++;
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	2b40      	cmp	r3, #64	; 0x40
 8000e40:	d9f0      	bls.n	8000e24 <SD_TxDataBlock+0x40>
 8000e42:	e000      	b.n	8000e46 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e44:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e46:	bf00      	nop
 8000e48:	f7ff ff00 	bl	8000c4c <SPI_RxByte>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0fa      	beq.n	8000e48 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d101      	bne.n	8000e60 <SD_TxDataBlock+0x7c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e76:	f7ff ff13 	bl	8000ca0 <SD_ReadyWait>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2bff      	cmp	r3, #255	; 0xff
 8000e7e:	d001      	beq.n	8000e84 <SD_SendCmd+0x1a>
 8000e80:	23ff      	movs	r3, #255	; 0xff
 8000e82:	e042      	b.n	8000f0a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff feac 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	0e1b      	lsrs	r3, r3, #24
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fea6 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	0c1b      	lsrs	r3, r3, #16
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fea0 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe9a 	bl	8000be4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe95 	bl	8000be4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b40      	cmp	r3, #64	; 0x40
 8000ebe:	d102      	bne.n	8000ec6 <SD_SendCmd+0x5c>
 8000ec0:	2395      	movs	r3, #149	; 0x95
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e007      	b.n	8000ed6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b48      	cmp	r3, #72	; 0x48
 8000eca:	d102      	bne.n	8000ed2 <SD_SendCmd+0x68>
 8000ecc:	2387      	movs	r3, #135	; 0x87
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe83 	bl	8000be4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ee2:	d101      	bne.n	8000ee8 <SD_SendCmd+0x7e>
 8000ee4:	f7ff feb2 	bl	8000c4c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000eec:	f7ff feae 	bl	8000c4c <SPI_RxByte>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ef4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da05      	bge.n	8000f08 <SD_SendCmd+0x9e>
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73bb      	strb	r3, [r7, #14]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f1      	bne.n	8000eec <SD_SendCmd+0x82>

	return res;
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SD_disk_initialize+0x14>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d1      	b.n	80010cc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <SD_disk_initialize+0x1c0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <SD_disk_initialize+0x2a>
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <SD_disk_initialize+0x1c0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	e0c6      	b.n	80010cc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f3e:	f7ff fec9 	bl	8000cd4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f42:	f7ff fe2f 	bl	8000ba4 <SELECT>

	/* check disk type */
	type = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2040      	movs	r0, #64	; 0x40
 8000f4e:	f7ff ff8c 	bl	8000e6a <SD_SendCmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 80a1 	bne.w	800109c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f62:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f66:	2048      	movs	r0, #72	; 0x48
 8000f68:	f7ff ff7f 	bl	8000e6a <SD_SendCmd>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d155      	bne.n	800101e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00c      	b.n	8000f92 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f78:	7bfc      	ldrb	r4, [r7, #15]
 8000f7a:	f7ff fe67 	bl	8000c4c <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4423      	add	r3, r4
 8000f88:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9ef      	bls.n	8000f78 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f98:	7abb      	ldrb	r3, [r7, #10]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d17e      	bne.n	800109c <SD_disk_initialize+0x188>
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	2baa      	cmp	r3, #170	; 0xaa
 8000fa2:	d17b      	bne.n	800109c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2077      	movs	r0, #119	; 0x77
 8000fa8:	f7ff ff5f 	bl	8000e6a <SD_SendCmd>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d807      	bhi.n	8000fc2 <SD_disk_initialize+0xae>
 8000fb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fb6:	2069      	movs	r0, #105	; 0x69
 8000fb8:	f7ff ff57 	bl	8000e6a <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ec      	bne.n	8000fa4 <SD_disk_initialize+0x90>
 8000fca:	e000      	b.n	8000fce <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fcc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d062      	beq.n	800109c <SD_disk_initialize+0x188>
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	207a      	movs	r0, #122	; 0x7a
 8000fda:	f7ff ff46 	bl	8000e6a <SD_SendCmd>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d15b      	bne.n	800109c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e00c      	b.n	8001004 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000fea:	7bfc      	ldrb	r4, [r7, #15]
 8000fec:	f7ff fe2e 	bl	8000c4c <SPI_RxByte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4423      	add	r3, r4
 8000ffa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d9ef      	bls.n	8000fea <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800100a:	7a3b      	ldrb	r3, [r7, #8]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SD_disk_initialize+0x104>
 8001014:	230c      	movs	r3, #12
 8001016:	e000      	b.n	800101a <SD_disk_initialize+0x106>
 8001018:	2304      	movs	r3, #4
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	e03e      	b.n	800109c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800101e:	2100      	movs	r1, #0
 8001020:	2077      	movs	r0, #119	; 0x77
 8001022:	f7ff ff22 	bl	8000e6a <SD_SendCmd>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d808      	bhi.n	800103e <SD_disk_initialize+0x12a>
 800102c:	2100      	movs	r1, #0
 800102e:	2069      	movs	r0, #105	; 0x69
 8001030:	f7ff ff1b 	bl	8000e6a <SD_SendCmd>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d801      	bhi.n	800103e <SD_disk_initialize+0x12a>
 800103a:	2302      	movs	r3, #2
 800103c:	e000      	b.n	8001040 <SD_disk_initialize+0x12c>
 800103e:	2301      	movs	r3, #1
 8001040:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d10e      	bne.n	8001066 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001048:	2100      	movs	r1, #0
 800104a:	2077      	movs	r0, #119	; 0x77
 800104c:	f7ff ff0d 	bl	8000e6a <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d80e      	bhi.n	8001074 <SD_disk_initialize+0x160>
 8001056:	2100      	movs	r1, #0
 8001058:	2069      	movs	r0, #105	; 0x69
 800105a:	f7ff ff06 	bl	8000e6a <SD_SendCmd>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <SD_disk_initialize+0x160>
 8001064:	e00c      	b.n	8001080 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001066:	2100      	movs	r1, #0
 8001068:	2041      	movs	r0, #65	; 0x41
 800106a:	f7ff fefe 	bl	8000e6a <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e2      	bne.n	8001042 <SD_disk_initialize+0x12e>
 800107c:	e000      	b.n	8001080 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800107e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <SD_disk_initialize+0x1c4>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <SD_disk_initialize+0x184>
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	2050      	movs	r0, #80	; 0x50
 800108e:	f7ff feec 	bl	8000e6a <SD_SendCmd>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SD_disk_initialize+0x188>
 8001098:	2300      	movs	r3, #0
 800109a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <SD_disk_initialize+0x1c8>)
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010a2:	f7ff fd8f 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80010a6:	f7ff fdd1 	bl	8000c4c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e001      	b.n	80010c6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010c2:	f7ff fe49 	bl	8000d58 <SD_PowerOff>
	}

	return Stat;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <SD_disk_initialize+0x1c0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	200004ea 	.word	0x200004ea
 80010dc:	200000a4 	.word	0x200000a4

080010e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SD_disk_status+0x14>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e002      	b.n	80010fa <SD_disk_status+0x1a>
	return Stat;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SD_disk_status+0x28>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <SD_disk_read+0x1c>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <SD_disk_read+0x20>
 8001128:	2304      	movs	r3, #4
 800112a:	e051      	b.n	80011d0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <SD_disk_read+0xcc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SD_disk_read+0x32>
 800113a:	2303      	movs	r3, #3
 800113c:	e048      	b.n	80011d0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <SD_disk_read+0xd0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <SD_disk_read+0x44>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001150:	f7ff fd28 	bl	8000ba4 <SELECT>

	if (count == 1)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d111      	bne.n	800117e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	2051      	movs	r0, #81	; 0x51
 800115e:	f7ff fe84 	bl	8000e6a <SD_SendCmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d129      	bne.n	80011bc <SD_disk_read+0xb0>
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f7ff fe0b 	bl	8000d88 <SD_RxDataBlock>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d021      	beq.n	80011bc <SD_disk_read+0xb0>
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	e01e      	b.n	80011bc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2052      	movs	r0, #82	; 0x52
 8001182:	f7ff fe72 	bl	8000e6a <SD_SendCmd>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d117      	bne.n	80011bc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff fdf9 	bl	8000d88 <SD_RxDataBlock>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <SD_disk_read+0xa6>
				buff += 512;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ed      	bne.n	800118c <SD_disk_read+0x80>
 80011b0:	e000      	b.n	80011b4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011b2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	204c      	movs	r0, #76	; 0x4c
 80011b8:	f7ff fe57 	bl	8000e6a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011bc:	f7ff fd02 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80011c0:	f7ff fd44 	bl	8000c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	200000a4 	.word	0x200000a4

080011e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <SD_disk_write+0x1c>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <SD_disk_write+0x20>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e06b      	b.n	80012d8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <SD_disk_write+0x100>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SD_disk_write+0x32>
 800120e:	2303      	movs	r3, #3
 8001210:	e062      	b.n	80012d8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <SD_disk_write+0x100>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_write+0x44>
 8001220:	2302      	movs	r3, #2
 8001222:	e059      	b.n	80012d8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <SD_disk_write+0x104>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <SD_disk_write+0x56>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	607b      	str	r3, [r7, #4]

	SELECT();
 8001236:	f7ff fcb5 	bl	8000ba4 <SELECT>

	if (count == 1)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d110      	bne.n	8001262 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	2058      	movs	r0, #88	; 0x58
 8001244:	f7ff fe11 	bl	8000e6a <SD_SendCmd>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13a      	bne.n	80012c4 <SD_disk_write+0xe4>
 800124e:	21fe      	movs	r1, #254	; 0xfe
 8001250:	68b8      	ldr	r0, [r7, #8]
 8001252:	f7ff fdc7 	bl	8000de4 <SD_TxDataBlock>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d033      	beq.n	80012c4 <SD_disk_write+0xe4>
			count = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	e030      	b.n	80012c4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <SD_disk_write+0x104>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800126e:	2100      	movs	r1, #0
 8001270:	2077      	movs	r0, #119	; 0x77
 8001272:	f7ff fdfa 	bl	8000e6a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	2057      	movs	r0, #87	; 0x57
 800127a:	f7ff fdf6 	bl	8000e6a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	2059      	movs	r0, #89	; 0x59
 8001282:	f7ff fdf2 	bl	8000e6a <SD_SendCmd>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11b      	bne.n	80012c4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800128c:	21fc      	movs	r1, #252	; 0xfc
 800128e:	68b8      	ldr	r0, [r7, #8]
 8001290:	f7ff fda8 	bl	8000de4 <SD_TxDataBlock>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <SD_disk_write+0xd0>
				buff += 512;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ee      	bne.n	800128c <SD_disk_write+0xac>
 80012ae:	e000      	b.n	80012b2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012b0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012b2:	21fd      	movs	r1, #253	; 0xfd
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fd95 	bl	8000de4 <SD_TxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <SD_disk_write+0xe4>
			{
				count = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012c4:	f7ff fc7e 	bl	8000bc4 <DESELECT>
	SPI_RxByte();
 80012c8:	f7ff fcc0 	bl	8000c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf14      	ite	ne
 80012d2:	2301      	movne	r3, #1
 80012d4:	2300      	moveq	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200000a4 	.word	0x200000a4

080012e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b08b      	sub	sp, #44	; 0x2c
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	603a      	str	r2, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	460b      	mov	r3, r1
 80012f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SD_disk_ioctl+0x1e>
 8001302:	2304      	movs	r3, #4
 8001304:	e115      	b.n	8001532 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d124      	bne.n	800135c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d012      	beq.n	8001340 <SD_disk_ioctl+0x58>
 800131a:	2b02      	cmp	r3, #2
 800131c:	dc1a      	bgt.n	8001354 <SD_disk_ioctl+0x6c>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <SD_disk_ioctl+0x40>
 8001322:	2b01      	cmp	r3, #1
 8001324:	d006      	beq.n	8001334 <SD_disk_ioctl+0x4c>
 8001326:	e015      	b.n	8001354 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001328:	f7ff fd16 	bl	8000d58 <SD_PowerOff>
			res = RES_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001332:	e0fc      	b.n	800152e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001334:	f7ff fcce 	bl	8000cd4 <SD_PowerOn>
			res = RES_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133e:	e0f6      	b.n	800152e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	1c5c      	adds	r4, r3, #1
 8001344:	f7ff fd14 	bl	8000d70 <SD_CheckPower>
 8001348:	4603      	mov	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800134c:	2300      	movs	r3, #0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001352:	e0ec      	b.n	800152e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001354:	2304      	movs	r3, #4
 8001356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800135a:	e0e8      	b.n	800152e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800135c:	4b77      	ldr	r3, [pc, #476]	; (800153c <SD_disk_ioctl+0x254>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SD_disk_ioctl+0x86>
 800136a:	2303      	movs	r3, #3
 800136c:	e0e1      	b.n	8001532 <SD_disk_ioctl+0x24a>

		SELECT();
 800136e:	f7ff fc19 	bl	8000ba4 <SELECT>

		switch (ctrl)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b0d      	cmp	r3, #13
 8001376:	f200 80cb 	bhi.w	8001510 <SD_disk_ioctl+0x228>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <SD_disk_ioctl+0x98>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	0800147b 	.word	0x0800147b
 8001384:	080013b9 	.word	0x080013b9
 8001388:	0800146b 	.word	0x0800146b
 800138c:	08001511 	.word	0x08001511
 8001390:	08001511 	.word	0x08001511
 8001394:	08001511 	.word	0x08001511
 8001398:	08001511 	.word	0x08001511
 800139c:	08001511 	.word	0x08001511
 80013a0:	08001511 	.word	0x08001511
 80013a4:	08001511 	.word	0x08001511
 80013a8:	08001511 	.word	0x08001511
 80013ac:	0800148d 	.word	0x0800148d
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014d5 	.word	0x080014d5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013b8:	2100      	movs	r1, #0
 80013ba:	2049      	movs	r0, #73	; 0x49
 80013bc:	f7ff fd55 	bl	8000e6a <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 80a8 	bne.w	8001518 <SD_disk_ioctl+0x230>
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2110      	movs	r1, #16
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcda 	bl	8000d88 <SD_RxDataBlock>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 809e 	beq.w	8001518 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10e      	bne.n	8001404 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013e6:	7d7b      	ldrb	r3, [r7, #21]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	7d3b      	ldrb	r3, [r7, #20]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013fa:	8bfb      	ldrh	r3, [r7, #30]
 80013fc:	029a      	lsls	r2, r3, #10
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e02e      	b.n	8001462 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001404:	7c7b      	ldrb	r3, [r7, #17]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	b2da      	uxtb	r2, r3
 800140c:	7dbb      	ldrb	r3, [r7, #22]
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0306 	and.w	r3, r3, #6
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3302      	adds	r3, #2
 8001428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	099b      	lsrs	r3, r3, #6
 8001430:	b2db      	uxtb	r3, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	b29b      	uxth	r3, r3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	b29b      	uxth	r3, r3
 800143c:	4413      	add	r3, r2
 800143e:	b29a      	uxth	r2, r3
 8001440:	7cbb      	ldrb	r3, [r7, #18]
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	b29b      	uxth	r3, r3
 8001446:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800144a:	b29b      	uxth	r3, r3
 800144c:	4413      	add	r3, r2
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001454:	8bfa      	ldrh	r2, [r7, #30]
 8001456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145a:	3b09      	subs	r3, #9
 800145c:	409a      	lsls	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001468:	e056      	b.n	8001518 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001478:	e055      	b.n	8001526 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800147a:	f7ff fc11 	bl	8000ca0 <SD_ReadyWait>
 800147e:	4603      	mov	r3, r0
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d14b      	bne.n	800151c <SD_disk_ioctl+0x234>
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800148a:	e047      	b.n	800151c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800148c:	2100      	movs	r1, #0
 800148e:	2049      	movs	r0, #73	; 0x49
 8001490:	f7ff fceb 	bl	8000e6a <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d142      	bne.n	8001520 <SD_disk_ioctl+0x238>
 800149a:	2110      	movs	r1, #16
 800149c:	6a38      	ldr	r0, [r7, #32]
 800149e:	f7ff fc73 	bl	8000d88 <SD_RxDataBlock>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d03b      	beq.n	8001520 <SD_disk_ioctl+0x238>
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ae:	e037      	b.n	8001520 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014b0:	2100      	movs	r1, #0
 80014b2:	204a      	movs	r0, #74	; 0x4a
 80014b4:	f7ff fcd9 	bl	8000e6a <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d132      	bne.n	8001524 <SD_disk_ioctl+0x23c>
 80014be:	2110      	movs	r1, #16
 80014c0:	6a38      	ldr	r0, [r7, #32]
 80014c2:	f7ff fc61 	bl	8000d88 <SD_RxDataBlock>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02b      	beq.n	8001524 <SD_disk_ioctl+0x23c>
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014d2:	e027      	b.n	8001524 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014d4:	2100      	movs	r1, #0
 80014d6:	207a      	movs	r0, #122	; 0x7a
 80014d8:	f7ff fcc7 	bl	8000e6a <SD_SendCmd>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014e8:	e00b      	b.n	8001502 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014ea:	6a3c      	ldr	r4, [r7, #32]
 80014ec:	1c63      	adds	r3, r4, #1
 80014ee:	623b      	str	r3, [r7, #32]
 80014f0:	f7ff fbac 	bl	8000c4c <SPI_RxByte>
 80014f4:	4603      	mov	r3, r0
 80014f6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9ef      	bls.n	80014ea <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001510:	2304      	movs	r3, #4
 8001512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001516:	e006      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001518:	bf00      	nop
 800151a:	e004      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 800151c:	bf00      	nop
 800151e:	e002      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <SD_disk_ioctl+0x23e>
			break;
 8001524:	bf00      	nop
		}

		DESELECT();
 8001526:	f7ff fb4d 	bl	8000bc4 <DESELECT>
		SPI_RxByte();
 800152a:	f7ff fb8f 	bl	8000c4c <SPI_RxByte>
	}

	return res;
 800152e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000

08001540 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001548:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800154c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800155c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001560:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001568:	e000      	b.n	800156c <ITM_SendChar+0x2c>
    {
      __NOP();
 800156a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800156c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f9      	beq.n	800156a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001576:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  for(int i=0 ; i<len ; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e009      	b.n	80015b4 <_write+0x26>
    ITM_SendChar((*ptr++));
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ffc9 	bl	8001540 <ITM_SendChar>
  for(int i=0 ; i<len ; i++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf1      	blt.n	80015a0 <_write+0x12>
  return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <bufclear>:
	}
	return i;
}

//	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	MAYBE COULD BE ADJUSTED BC I PUT BUFFER IN HEAP INSTEAD OF BSS? - "free"***
void bufclear(char * buf, int size){
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	memset(buf, 0, size);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f005 fca4 	bl	8006f24 <memset>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <unpackbits>:

void *unpackbits(char *testbuf, char *testdestbuf, int destcount) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]

  	int runlength;

  	while (destcount > 0) {
 80015f0:	e042      	b.n	8001678 <unpackbits+0x94>
  		runlength = *testbuf++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	617b      	str	r3, [r7, #20]
  		if (runlength == -128)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001602:	d100      	bne.n	8001606 <unpackbits+0x22>
  			continue;
 8001604:	e038      	b.n	8001678 <unpackbits+0x94>
  		else if (runlength >= 128)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b7f      	cmp	r3, #127	; 0x7f
 800160a:	dd1a      	ble.n	8001642 <unpackbits+0x5e>
  		{
  			runlength = 256 - runlength + 1;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  			if (runlength > destcount)
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	dd01      	ble.n	8001622 <unpackbits+0x3e>
  				return NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	e02d      	b.n	800167e <unpackbits+0x9a>
  			memset(testdestbuf, *testbuf, runlength);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	461a      	mov	r2, r3
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f005 fc79 	bl	8006f24 <memset>
  			testbuf += 1;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
  			testdestbuf += runlength;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	e016      	b.n	8001670 <unpackbits+0x8c>
  		}
  		else
  		{
  			++runlength;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  			if (runlength > destcount)
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dd01      	ble.n	8001654 <unpackbits+0x70>
  				return NULL;
 8001650:	2300      	movs	r3, #0
 8001652:	e014      	b.n	800167e <unpackbits+0x9a>
  			memcpy(testdestbuf, testbuf, runlength);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	461a      	mov	r2, r3
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f005 fc54 	bl	8006f08 <memcpy>
  			testbuf += runlength;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
  			testdestbuf += runlength;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  		}
  		destcount -= runlength;
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	607b      	str	r3, [r7, #4]
  	while (destcount > 0) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dcb9      	bgt.n	80015f2 <unpackbits+0xe>
  	}

}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <histogramEqualization>:

void histogramEqualization(char *inputbuffer, int bufferSize) {
 8001688:	b580      	push	{r7, lr}
 800168a:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 800168e:	af00      	add	r7, sp, #0
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	6018      	str	r0, [r3, #0]
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	6019      	str	r1, [r3, #0]
	int i;

	for(i = 0; i < bufferSize; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80016a2:	e013      	b.n	80016cc <histogramEqualization+0x44>
		hist[(int)*inputbuffer++]++;
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f107 020c 	add.w	r2, r7, #12
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	6011      	str	r1, [r2, #0]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4a49      	ldr	r2, [pc, #292]	; (80017dc <histogramEqualization+0x154>)
 80016b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ba:	3201      	adds	r2, #1
 80016bc:	4947      	ldr	r1, [pc, #284]	; (80017dc <histogramEqualization+0x154>)
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 0; i < bufferSize; i++){
 80016c2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80016c6:	3301      	adds	r3, #1
 80016c8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbe4      	blt.n	80016a4 <histogramEqualization+0x1c>
	}

	int newGrayHist[256] = {0};
 80016da:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80016de:	4618      	mov	r0, r3
 80016e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e4:	461a      	mov	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f005 fc1c 	bl	8006f24 <memset>
	float idealPixelCount[256];
	for(i = 1; i < 256; i++){ //cumulative probability pixel counts
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80016f2:	e017      	b.n	8001724 <histogramEqualization+0x9c>
		newGrayHist[i] = newGrayHist[i-1] + hist[i];
 80016f4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80016fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001702:	4936      	ldr	r1, [pc, #216]	; (80017dc <histogramEqualization+0x154>)
 8001704:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800170c:	18d1      	adds	r1, r2, r3
 800170e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001712:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8001716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 1; i < 256; i++){ //cumulative probability pixel counts
 800171a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800171e:	3301      	adds	r3, #1
 8001720:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8001724:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	dde3      	ble.n	80016f4 <histogramEqualization+0x6c>
	}

	for(i = 0; i < 256; i++){ //
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8001732:	e023      	b.n	800177c <histogramEqualization+0xf4>
		idealPixelCount[i] = (float)(newGrayHist[i]*255)/(float)(bufferSize-1);
 8001734:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001738:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800173c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001740:	4613      	mov	r3, r2
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001762:	f107 0214 	add.w	r2, r7, #20
 8001766:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 256; i++){ //
 8001772:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001776:	3301      	adds	r3, #1
 8001778:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800177c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	ddd7      	ble.n	8001734 <histogramEqualization+0xac>
	}

	for(i = 0; i < bufferSize; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800178a:	e01a      	b.n	80017c2 <histogramEqualization+0x13a>
		buffer[i] = (int)idealPixelCount[destbuffer[i]];
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <histogramEqualization+0x158>)
 800178e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f107 0214 	add.w	r2, r7, #20
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80017aa:	7939      	ldrb	r1, [r7, #4]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <histogramEqualization+0x15c>)
 80017ae:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80017b2:	4413      	add	r3, r2
 80017b4:	460a      	mov	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < bufferSize; i++){
 80017b8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80017bc:	3301      	adds	r3, #1
 80017be:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbdd      	blt.n	800178c <histogramEqualization+0x104>
	}
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	f607 0718 	addw	r7, r7, #2072	; 0x818
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200000a8 	.word	0x200000a8
 80017e0:	200126a0 	.word	0x200126a0
 80017e4:	20001530 	.word	0x20001530

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	f5ad 5d11 	sub.w	sp, sp, #9280	; 0x2440
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 HAL_Init();
 80017f2:	f000 fd29 	bl	8002248 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f6:	f000 fd27 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fa:	f000 fabb 	bl	8001d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fe:	f000 fb5f 	bl	8001ec0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001802:	f000 fb27 	bl	8001e54 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001806:	f002 f8f7 	bl	80039f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);	//	delay for SD card to process mounting
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f000 fd8d 	bl	800232c <HAL_Delay>

  //	Mount SD Card
  fresult = f_mount(&fs, "/", 1);
 8001812:	2201      	movs	r2, #1
 8001814:	49c4      	ldr	r1, [pc, #784]	; (8001b28 <main+0x340>)
 8001816:	48c5      	ldr	r0, [pc, #788]	; (8001b2c <main+0x344>)
 8001818:	f004 fb38 	bl	8005e8c <f_mount>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4bc3      	ldr	r3, [pc, #780]	; (8001b30 <main+0x348>)
 8001822:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) //printf ("ERROR!!! in mounting SD CARD...\n\n");
 8001824:	4bc2      	ldr	r3, [pc, #776]	; (8001b30 <main+0x348>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <main+0x4c>
	  printf("Error in mounting SD CARD...\n\n");
 800182c:	48c1      	ldr	r0, [pc, #772]	; (8001b34 <main+0x34c>)
 800182e:	f005 fc07 	bl	8007040 <puts>
 8001832:	e002      	b.n	800183a <main+0x52>
  else printf("SD CARD mounted successfully...\n\n");
 8001834:	48c0      	ldr	r0, [pc, #768]	; (8001b38 <main+0x350>)
 8001836:	f005 fc03 	bl	8007040 <puts>

  /*********************	Card Capacity Details	***********************/
  f_getfree("", &fre_clust, &pfs);
 800183a:	4ac0      	ldr	r2, [pc, #768]	; (8001b3c <main+0x354>)
 800183c:	49c0      	ldr	r1, [pc, #768]	; (8001b40 <main+0x358>)
 800183e:	48c1      	ldr	r0, [pc, #772]	; (8001b44 <main+0x35c>)
 8001840:	f005 f960 	bl	8006b04 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001844:	4bbd      	ldr	r3, [pc, #756]	; (8001b3c <main+0x354>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b02      	subs	r3, #2
 800184c:	4abb      	ldr	r2, [pc, #748]	; (8001b3c <main+0x354>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	8952      	ldrh	r2, [r2, #10]
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff8e 	bl	8000778 <__aeabi_ui2d>
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4bb9      	ldr	r3, [pc, #740]	; (8001b48 <main+0x360>)
 8001862:	f7fe fd1d 	bl	80002a0 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7fe fffd 	bl	800086c <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	4ab5      	ldr	r2, [pc, #724]	; (8001b4c <main+0x364>)
 8001876:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 8001878:	4bb4      	ldr	r3, [pc, #720]	; (8001b4c <main+0x364>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	49b4      	ldr	r1, [pc, #720]	; (8001b50 <main+0x368>)
 8001880:	48b4      	ldr	r0, [pc, #720]	; (8001b54 <main+0x36c>)
 8001882:	f005 fbe5 	bl	8007050 <siprintf>
  printf(buffer);
 8001886:	48b3      	ldr	r0, [pc, #716]	; (8001b54 <main+0x36c>)
 8001888:	f005 fb54 	bl	8006f34 <iprintf>
  bufclear(buffer, strlen(buffer));
 800188c:	48b1      	ldr	r0, [pc, #708]	; (8001b54 <main+0x36c>)
 800188e:	f7fe fcaf 	bl	80001f0 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	48af      	ldr	r0, [pc, #700]	; (8001b54 <main+0x36c>)
 8001898:	f7ff fe95 	bl	80015c6 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800189c:	4ba7      	ldr	r3, [pc, #668]	; (8001b3c <main+0x354>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	895b      	ldrh	r3, [r3, #10]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4ba6      	ldr	r3, [pc, #664]	; (8001b40 <main+0x358>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fb03 f302 	mul.w	r3, r3, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff63 	bl	8000778 <__aeabi_ui2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4ba4      	ldr	r3, [pc, #656]	; (8001b48 <main+0x360>)
 80018b8:	f7fe fcf2 	bl	80002a0 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7fe ffd2 	bl	800086c <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4aa3      	ldr	r2, [pc, #652]	; (8001b58 <main+0x370>)
 80018cc:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 80018ce:	4ba2      	ldr	r3, [pc, #648]	; (8001b58 <main+0x370>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	49a1      	ldr	r1, [pc, #644]	; (8001b5c <main+0x374>)
 80018d6:	489f      	ldr	r0, [pc, #636]	; (8001b54 <main+0x36c>)
 80018d8:	f005 fbba 	bl	8007050 <siprintf>
  printf(buffer);
 80018dc:	489d      	ldr	r0, [pc, #628]	; (8001b54 <main+0x36c>)
 80018de:	f005 fb29 	bl	8006f34 <iprintf>
  bufclear(buffer, strlen(buffer));
 80018e2:	489c      	ldr	r0, [pc, #624]	; (8001b54 <main+0x36c>)
 80018e4:	f7fe fc84 	bl	80001f0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4619      	mov	r1, r3
 80018ec:	4899      	ldr	r0, [pc, #612]	; (8001b54 <main+0x36c>)
 80018ee:	f7ff fe6a 	bl	80015c6 <bufclear>
	/* Close file */
//	fresult = f_close(&fil);

//	if (fresult == FR_OK)printf ("File1.txt created and the data is written \n");

  bufclear(buffer, strlen(buffer));
 80018f2:	4898      	ldr	r0, [pc, #608]	; (8001b54 <main+0x36c>)
 80018f4:	f7fe fc7c 	bl	80001f0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4895      	ldr	r0, [pc, #596]	; (8001b54 <main+0x36c>)
 80018fe:	f7ff fe62 	bl	80015c6 <bufclear>
  bufclear(destbuffer, strlen(destbuffer));
 8001902:	4897      	ldr	r0, [pc, #604]	; (8001b60 <main+0x378>)
 8001904:	f7fe fc74 	bl	80001f0 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	4619      	mov	r1, r3
 800190c:	4894      	ldr	r0, [pc, #592]	; (8001b60 <main+0x378>)
 800190e:	f7ff fe5a 	bl	80015c6 <bufclear>

	/* Open file to read */
  fresult = f_open(&fil, "pout.tif", FA_READ);
 8001912:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001916:	3b0c      	subs	r3, #12
 8001918:	2201      	movs	r2, #1
 800191a:	4992      	ldr	r1, [pc, #584]	; (8001b64 <main+0x37c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f004 fafb 	bl	8005f18 <f_open>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <main+0x348>)
 8001928:	701a      	strb	r2, [r3, #0]
  f_read (&fil, buffer, f_size(&fil), &br);
 800192a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800192e:	3b0c      	subs	r3, #12
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
 8001936:	380c      	subs	r0, #12
 8001938:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <main+0x380>)
 800193a:	4986      	ldr	r1, [pc, #536]	; (8001b54 <main+0x36c>)
 800193c:	f004 fd47 	bl	80063ce <f_read>
  if(fres == FR_OK) {
 8001940:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001944:	f103 0313 	add.w	r3, r3, #19
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <main+0x168>
	  while(1){
 800194e:	e7fe      	b.n	800194e <main+0x166>
	  }
  }

  // FIND OUT HOW TO GET PIXEL COUNT OR NUMBER OF PIXELS
  int imgSize = 69841;
 8001950:	4b86      	ldr	r3, [pc, #536]	; (8001b6c <main+0x384>)
 8001952:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001956:	f102 020c 	add.w	r2, r2, #12
 800195a:	6013      	str	r3, [r2, #0]
  int slaveSize = 26190;
 800195c:	f246 634e 	movw	r3, #26190	; 0x664e
 8001960:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001964:	f102 0208 	add.w	r2, r2, #8
 8001968:	6013      	str	r3, [r2, #0]
  int masterSize = 17460;
 800196a:	f244 4334 	movw	r3, #17460	; 0x4434
 800196e:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001972:	f102 0204 	add.w	r2, r2, #4
 8001976:	6013      	str	r3, [r2, #0]
  // SLAVES GET 26190
  // MASTER GETS 17460

  unpackbits(buffer + 8, destbuffer, 69840+1);
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <main+0x388>)
 800197a:	4a7c      	ldr	r2, [pc, #496]	; (8001b6c <main+0x384>)
 800197c:	4978      	ldr	r1, [pc, #480]	; (8001b60 <main+0x378>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe30 	bl	80015e4 <unpackbits>
  bufclear(buffer, strlen(buffer));
 8001984:	4873      	ldr	r0, [pc, #460]	; (8001b54 <main+0x36c>)
 8001986:	f7fe fc33 	bl	80001f0 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	4871      	ldr	r0, [pc, #452]	; (8001b54 <main+0x36c>)
 8001990:	f7ff fe19 	bl	80015c6 <bufclear>

  //	#ifndef entire image
  histogramEqualization(destbuffer, imgSize);
 8001994:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001998:	f103 030c 	add.w	r3, r3, #12
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	4870      	ldr	r0, [pc, #448]	; (8001b60 <main+0x378>)
 80019a0:	f7ff fe72 	bl	8001688 <histogramEqualization>
//
//  //	#ifndef other slave
//  histogramEqualization(destbuffer + masterSize + slaveSize, slaveSize);


  fres = f_open(&fil, "pout.txt", FA_WRITE | FA_OPEN_APPEND | FA_CREATE_ALWAYS);
 80019a4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80019a8:	3b0c      	subs	r3, #12
 80019aa:	223a      	movs	r2, #58	; 0x3a
 80019ac:	4971      	ldr	r1, [pc, #452]	; (8001b74 <main+0x38c>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fab2 	bl	8005f18 <f_open>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80019ba:	f102 0213 	add.w	r2, r2, #19
 80019be:	7013      	strb	r3, [r2, #0]

  char s3[961];
  char s4[10];
  int byteSizeWrote = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80019c6:	f102 021c 	add.w	r2, r2, #28
 80019ca:	6013      	str	r3, [r2, #0]


  int i = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80019d2:	f102 0218 	add.w	r2, r2, #24
 80019d6:	6013      	str	r3, [r2, #0]
  int lineInc = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80019de:	f102 0214 	add.w	r2, r2, #20
 80019e2:	6013      	str	r3, [r2, #0]
  int newLineCount = 291;
 80019e4:	f240 1323 	movw	r3, #291	; 0x123
 80019e8:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80019ec:	6013      	str	r3, [r2, #0]
  int totalPixelSize = 69840;
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <main+0x390>)
 80019f0:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 80019f4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80019f8:	6013      	str	r3, [r2, #0]

// CONVERT DATA TO STRING AND COPIES TO TXT FILE ONE LINE AT A TIME
  for(i = 0; i < totalPixelSize; i++){
 80019fa:	2300      	movs	r3, #0
 80019fc:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001a00:	f102 0218 	add.w	r2, r2, #24
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e18d      	b.n	8001d24 <main+0x53c>
	  if((int)buffer[i] > 99){
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <main+0x36c>)
 8001a0a:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a0e:	f103 0318 	add.w	r3, r3, #24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b63      	cmp	r3, #99	; 0x63
 8001a1a:	d90b      	bls.n	8001a34 <main+0x24c>
		  byteSizeWrote = byteSizeWrote+4;
 8001a1c:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a20:	f103 031c 	add.w	r3, r3, #28
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001a2c:	f102 021c 	add.w	r2, r2, #28
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e020      	b.n	8001a76 <main+0x28e>
	  } else if ((int)buffer[i] > 9){
 8001a34:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <main+0x36c>)
 8001a36:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a3a:	f103 0318 	add.w	r3, r3, #24
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b09      	cmp	r3, #9
 8001a46:	d90b      	bls.n	8001a60 <main+0x278>
		  byteSizeWrote = byteSizeWrote+3;
 8001a48:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a4c:	f103 031c 	add.w	r3, r3, #28
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3303      	adds	r3, #3
 8001a54:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001a58:	f102 021c 	add.w	r2, r2, #28
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00a      	b.n	8001a76 <main+0x28e>
	  } else {
		  byteSizeWrote = byteSizeWrote+2;
 8001a60:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a64:	f103 031c 	add.w	r3, r3, #28
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001a70:	f102 021c 	add.w	r2, r2, #28
 8001a74:	6013      	str	r3, [r2, #0]
	  }
	  if(i == 0 || byteSizeWrote == 0){ // if start
 8001a76:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a7a:	f103 0318 	add.w	r3, r3, #24
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <main+0x2aa>
 8001a84:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a88:	f103 031c 	add.w	r3, r3, #28
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d122      	bne.n	8001ad8 <main+0x2f0>
		  sprintf(s3, "%d", (int)buffer[i]);
 8001a92:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <main+0x36c>)
 8001a94:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001a98:	f103 0318 	add.w	r3, r3, #24
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	3b10      	subs	r3, #16
 8001aaa:	4934      	ldr	r1, [pc, #208]	; (8001b7c <main+0x394>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 facf 	bl	8007050 <siprintf>
		  sprintf(s4, "%s", ",");
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	3b1c      	subs	r3, #28
 8001ab8:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <main+0x398>)
 8001aba:	4932      	ldr	r1, [pc, #200]	; (8001b84 <main+0x39c>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 fac7 	bl	8007050 <siprintf>
		  strcat(s3,s4);
 8001ac2:	f107 0220 	add.w	r2, r7, #32
 8001ac6:	3a1c      	subs	r2, #28
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	3b10      	subs	r3, #16
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 fadd 	bl	8007090 <strcat>
 8001ad6:	e11a      	b.n	8001d0e <main+0x526>
//		  newLineFlag = 1;
	  } else if(i == totalPixelSize){ //last line
 8001ad8:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001adc:	f103 0318 	add.w	r3, r3, #24
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8001ae6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d14b      	bne.n	8001b88 <main+0x3a0>
		  sprintf(s4, "%d", (int)buffer[i]);
 8001af0:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <main+0x36c>)
 8001af2:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001af6:	f103 0318 	add.w	r3, r3, #24
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	3b1c      	subs	r3, #28
 8001b08:	491c      	ldr	r1, [pc, #112]	; (8001b7c <main+0x394>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 faa0 	bl	8007050 <siprintf>
		  strcat(s3, s4);
 8001b10:	f107 0220 	add.w	r2, r7, #32
 8001b14:	3a1c      	subs	r2, #28
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	3b10      	subs	r3, #16
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fab6 	bl	8007090 <strcat>
 8001b24:	e0f3      	b.n	8001d0e <main+0x526>
 8001b26:	bf00      	nop
 8001b28:	0800828c 	.word	0x0800828c
 8001b2c:	200004f0 	.word	0x200004f0
 8001b30:	20023778 	.word	0x20023778
 8001b34:	08008290 	.word	0x08008290
 8001b38:	080082b0 	.word	0x080082b0
 8001b3c:	20023774 	.word	0x20023774
 8001b40:	200004ec 	.word	0x200004ec
 8001b44:	080082d4 	.word	0x080082d4
 8001b48:	3fe00000 	.word	0x3fe00000
 8001b4c:	200237d4 	.word	0x200237d4
 8001b50:	080082d8 	.word	0x080082d8
 8001b54:	20001530 	.word	0x20001530
 8001b58:	2000152c 	.word	0x2000152c
 8001b5c:	080082f4 	.word	0x080082f4
 8001b60:	200126a0 	.word	0x200126a0
 8001b64:	08008310 	.word	0x08008310
 8001b68:	20001528 	.word	0x20001528
 8001b6c:	000110d1 	.word	0x000110d1
 8001b70:	20001538 	.word	0x20001538
 8001b74:	0800831c 	.word	0x0800831c
 8001b78:	000110d0 	.word	0x000110d0
 8001b7c:	08008328 	.word	0x08008328
 8001b80:	0800832c 	.word	0x0800832c
 8001b84:	08008330 	.word	0x08008330
		  	  } else if (i == ((totalPixelSize/newLineCount)*lineInc)-1) { // if last line
 8001b88:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8001b8c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b9c:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001ba0:	f102 0214 	add.w	r2, r2, #20
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001bb0:	f102 0218 	add.w	r2, r2, #24
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d17d      	bne.n	8001cb6 <main+0x4ce>
		  		  lineInc++;
 8001bba:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001bbe:	f103 0314 	add.w	r3, r3, #20
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001bca:	f102 0214 	add.w	r2, r2, #20
 8001bce:	6013      	str	r3, [r2, #0]
		  		  sprintf(s4, "%d", (int)buffer[i]);
 8001bd0:	4a61      	ldr	r2, [pc, #388]	; (8001d58 <main+0x570>)
 8001bd2:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001bd6:	f103 0318 	add.w	r3, r3, #24
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	3b1c      	subs	r3, #28
 8001be8:	495c      	ldr	r1, [pc, #368]	; (8001d5c <main+0x574>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 fa30 	bl	8007050 <siprintf>
		  		  strcat(s3, s4);
 8001bf0:	f107 0220 	add.w	r2, r7, #32
 8001bf4:	3a1c      	subs	r2, #28
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	3b10      	subs	r3, #16
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 fa46 	bl	8007090 <strcat>
		  		  sprintf(s4, "%c", 13);
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	3b1c      	subs	r3, #28
 8001c0a:	220d      	movs	r2, #13
 8001c0c:	4954      	ldr	r1, [pc, #336]	; (8001d60 <main+0x578>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 fa1e 	bl	8007050 <siprintf>
		  		  strcat(s3, s4);
 8001c14:	f107 0220 	add.w	r2, r7, #32
 8001c18:	3a1c      	subs	r2, #28
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	3b10      	subs	r3, #16
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 fa34 	bl	8007090 <strcat>
		  		  sprintf(s4, "%c", 10);
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	3b1c      	subs	r3, #28
 8001c2e:	220a      	movs	r2, #10
 8001c30:	494b      	ldr	r1, [pc, #300]	; (8001d60 <main+0x578>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fa0c 	bl	8007050 <siprintf>
		  		  strcat(s3, s4);
 8001c38:	f107 0220 	add.w	r2, r7, #32
 8001c3c:	3a1c      	subs	r2, #28
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	3b10      	subs	r3, #16
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f005 fa22 	bl	8007090 <strcat>
		  		  byteSizeWrote = byteSizeWrote + 1;
 8001c4c:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001c50:	f103 031c 	add.w	r3, r3, #28
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001c5c:	f102 021c 	add.w	r2, r2, #28
 8001c60:	6013      	str	r3, [r2, #0]
		  		  fres = f_write(&fil, (char*)s3, byteSizeWrote, &bw);
 8001c62:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001c66:	f103 031c 	add.w	r3, r3, #28
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f107 0120 	add.w	r1, r7, #32
 8001c70:	3910      	subs	r1, #16
 8001c72:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
 8001c76:	380c      	subs	r0, #12
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <main+0x57c>)
 8001c7a:	f004 fd07 	bl	800668c <f_write>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001c84:	f102 0213 	add.w	r2, r2, #19
 8001c88:	7013      	strb	r3, [r2, #0]
		  		  if(fres == FR_OK) {
		  		  }
		  		  byteSizeWrote = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001c90:	f102 021c 	add.w	r2, r2, #28
 8001c94:	6013      	str	r3, [r2, #0]
		  		  bufclear(s3, strlen(s3));
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	3b10      	subs	r3, #16
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe faa7 	bl	80001f0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	3b10      	subs	r3, #16
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc89 	bl	80015c6 <bufclear>
 8001cb4:	e02b      	b.n	8001d0e <main+0x526>
//		  		  newLineFlag = 0;
		  	  } else {
		  		  sprintf(s4, "%d", (int)buffer[i]);
 8001cb6:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <main+0x570>)
 8001cb8:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001cbc:	f103 0318 	add.w	r3, r3, #24
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	3b1c      	subs	r3, #28
 8001cce:	4923      	ldr	r1, [pc, #140]	; (8001d5c <main+0x574>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 f9bd 	bl	8007050 <siprintf>
		  		  strcat(s3, s4);
 8001cd6:	f107 0220 	add.w	r2, r7, #32
 8001cda:	3a1c      	subs	r2, #28
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	3b10      	subs	r3, #16
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 f9d3 	bl	8007090 <strcat>
		  		  sprintf(s4, "%s", ",");
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	3b1c      	subs	r3, #28
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <main+0x580>)
 8001cf2:	491e      	ldr	r1, [pc, #120]	; (8001d6c <main+0x584>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 f9ab 	bl	8007050 <siprintf>
		  		  strcat(s3, s4);
 8001cfa:	f107 0220 	add.w	r2, r7, #32
 8001cfe:	3a1c      	subs	r2, #28
 8001d00:	f107 0320 	add.w	r3, r7, #32
 8001d04:	3b10      	subs	r3, #16
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f005 f9c1 	bl	8007090 <strcat>
  for(i = 0; i < totalPixelSize; i++){
 8001d0e:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001d12:	f103 0318 	add.w	r3, r3, #24
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001d1e:	f102 0218 	add.w	r2, r2, #24
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001d28:	f103 0318 	add.w	r3, r3, #24
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8001d32:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f6ff ae65 	blt.w	8001a08 <main+0x220>
		  	  }
  }


  /* Close file */
  f_close(&fil);
 8001d3e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001d42:	3b0c      	subs	r3, #12
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 feb3 	bl	8006ab0 <f_close>
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4908      	ldr	r1, [pc, #32]	; (8001d70 <main+0x588>)
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f004 f89c 	bl	8005e8c <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <main+0x56c>
 8001d56:	bf00      	nop
 8001d58:	20001530 	.word	0x20001530
 8001d5c:	08008328 	.word	0x08008328
 8001d60:	08008334 	.word	0x08008334
 8001d64:	20023770 	.word	0x20023770
 8001d68:	0800832c 	.word	0x0800832c
 8001d6c:	08008330 	.word	0x08008330
 8001d70:	080082d4 	.word	0x080082d4

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	; 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	2230      	movs	r2, #48	; 0x30
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 f8ce 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <SystemClock_Config+0xd8>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <SystemClock_Config+0xd8>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <SystemClock_Config+0xd8>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <SystemClock_Config+0xdc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <SystemClock_Config+0xdc>)
 8001dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <SystemClock_Config+0xdc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001de4:	2308      	movs	r3, #8
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001de8:	23b4      	movs	r3, #180	; 0xb4
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df0:	2304      	movs	r3, #4
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fdb7 	bl	800296c <HAL_RCC_OscConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e04:	f000 f8a0 	bl	8001f48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e08:	f000 fd60 	bl	80028cc <HAL_PWREx_EnableOverDrive>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e12:	f000 f899 	bl	8001f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	230f      	movs	r3, #15
 8001e18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2105      	movs	r1, #5
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 f811 	bl	8002e5c <HAL_RCC_ClockConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001e40:	f000 f882 	bl	8001f48 <Error_Handler>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	; 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI1_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e88:	2210      	movs	r2, #16
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001ea6:	f001 f975 	bl	8003194 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f000 f84a 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2002377c 	.word	0x2002377c
 8001ebc:	40013000 	.word	0x40013000

08001ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_GPIO_Init+0x80>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <MX_GPIO_Init+0x84>)
 8001f16:	f000 fcbf 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_GPIO_Init+0x84>)
 8001f34:	f000 fb04 	bl	8002540 <HAL_GPIO_Init>

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x8>
	...

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_SPI_MspInit+0x84>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a17      	ldr	r2, [pc, #92]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_SPI_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23e0      	movs	r3, #224	; 0xe0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_SPI_MspInit+0x8c>)
 800201a:	f000 fa91 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40013000 	.word	0x40013000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <SysTick_Handler+0x34>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <SysTick_Handler+0x18>
		Timer1--;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <SysTick_Handler+0x34>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <SysTick_Handler+0x34>)
 800209a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <SysTick_Handler+0x38>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <SysTick_Handler+0x2c>
		Timer2--;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Handler+0x38>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <SysTick_Handler+0x38>)
 80020ae:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 f91c 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200004ea 	.word	0x200004ea
 80020bc:	200004e8 	.word	0x200004e8

080020c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
	}

return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	605a      	str	r2, [r3, #4]
	return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_isatty>:

int _isatty(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	return 1;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f004 fe8e 	bl	8006eb4 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20030000 	.word	0x20030000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	200004a8 	.word	0x200004a8
 80021cc:	20026890 	.word	0x20026890

080021d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021fa:	490e      	ldr	r1, [pc, #56]	; (8002234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002210:	4c0b      	ldr	r4, [pc, #44]	; (8002240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800221e:	f7ff ffd7 	bl	80021d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002222:	f004 fe4d 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002226:	f7ff fadf 	bl	80017e8 <main>
  bx  lr    
 800222a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800222c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002238:	08008878 	.word	0x08008878
  ldr r2, =_sbss
 800223c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002240:	2002688c 	.word	0x2002688c

08002244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f931 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fe6a 	bl	8001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f93b 	bl	8002526 <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f000 f911 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000004 	.word	0x20000004
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	20024808 	.word	0x20024808

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20024808 	.word	0x20024808

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c

08002374 <__NVIC_SetPriorityGrouping>:
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_SetPriority>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff47 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff5c 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffb0 	bl	8002494 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e177      	b.n	800284c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8166 	bne.w	8002846 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80c0 	beq.w	8002846 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <HAL_GPIO_Init+0x328>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d037      	beq.n	800277e <HAL_GPIO_Init+0x23e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d031      	beq.n	800277a <HAL_GPIO_Init+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x334>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x236>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_GPIO_Init+0x338>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d025      	beq.n	8002772 <HAL_GPIO_Init+0x232>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_GPIO_Init+0x33c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_GPIO_Init+0x340>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x22a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x344>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a51      	ldr	r2, [pc, #324]	; (8002888 <HAL_GPIO_Init+0x348>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_GPIO_Init+0x34c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <HAL_GPIO_Init+0x350>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x21a>
 8002756:	2309      	movs	r3, #9
 8002758:	e012      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275a:	230a      	movs	r3, #10
 800275c:	e010      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275e:	2308      	movs	r3, #8
 8002760:	e00e      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002762:	2307      	movs	r3, #7
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002766:	2306      	movs	r3, #6
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_GPIO_Init+0x328>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_GPIO_Init+0x354>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x354>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x354>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae84 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40021c00 	.word	0x40021c00
 800288c:	40022000 	.word	0x40022000
 8002890:	40022400 	.word	0x40022400
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_PWREx_EnableOverDrive+0x90>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_PWREx_EnableOverDrive+0x90>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_PWREx_EnableOverDrive+0x90>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_PWREx_EnableOverDrive+0x94>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f8:	f7ff fd0c 	bl	8002314 <HAL_GetTick>
 80028fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028fe:	e009      	b.n	8002914 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002900:	f7ff fd08 	bl	8002314 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290e:	d901      	bls.n	8002914 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e01f      	b.n	8002954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_PWREx_EnableOverDrive+0x98>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d1ee      	bne.n	8002900 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002928:	f7ff fcf4 	bl	8002314 <HAL_GetTick>
 800292c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800292e:	e009      	b.n	8002944 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002930:	f7ff fcf0 	bl	8002314 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293e:	d901      	bls.n	8002944 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e007      	b.n	8002954 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_PWREx_EnableOverDrive+0x98>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002950:	d1ee      	bne.n	8002930 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	420e0040 	.word	0x420e0040
 8002964:	40007000 	.word	0x40007000
 8002968:	420e0044 	.word	0x420e0044

0800296c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e264      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d075      	beq.n	8002a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	4ba3      	ldr	r3, [pc, #652]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4ba0      	ldr	r3, [pc, #640]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d112      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b9d      	ldr	r3, [pc, #628]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d157      	bne.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e23f      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x74>
 80029d2:	4b91      	ldr	r3, [pc, #580]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a90      	ldr	r2, [pc, #576]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a87      	ldr	r2, [pc, #540]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 8002a04:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a83      	ldr	r2, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fc76 	bl	8002314 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff fc72 	bl	8002314 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e204      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fc62 	bl	8002314 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff fc5e 	bl	8002314 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1f0      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1c4      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4952      	ldr	r1, [pc, #328]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <HAL_RCC_OscConfig+0x2b0>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff fc17 	bl	8002314 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff fc13 	bl	8002314 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a5      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4940      	ldr	r1, [pc, #256]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0x2b0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff fbf6 	bl	8002314 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fbf2 	bl	8002314 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e184      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d030      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_RCC_OscConfig+0x2b4>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff fbd6 	bl	8002314 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff fbd2 	bl	8002314 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e164      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x200>
 8002b8a:	e015      	b.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_OscConfig+0x2b4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff fbbf 	bl	8002314 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff fbbb 	bl	8002314 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e14d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a0 	beq.w	8002d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d121      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_RCC_OscConfig+0x2b8>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fb81 	bl	8002314 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e011      	b.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	42470000 	.word	0x42470000
 8002c20:	42470e80 	.word	0x42470e80
 8002c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7ff fb74 	bl	8002314 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e106      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_OscConfig+0x4e4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2f0>
 8002c4e:	4b81      	ldr	r3, [pc, #516]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x32a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x312>
 8002c64:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a7a      	ldr	r2, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b78      	ldr	r3, [pc, #480]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a77      	ldr	r2, [pc, #476]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x32a>
 8002c7e:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a74      	ldr	r2, [pc, #464]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a71      	ldr	r2, [pc, #452]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7ff fb39 	bl	8002314 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7ff fb35 	bl	8002314 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0c5      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x33a>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7ff fb23 	bl	8002314 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7ff fb1f 	bl	8002314 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0af      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a55      	ldr	r2, [pc, #340]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 809b 	beq.w	8002e46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d05c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d141      	bne.n	8002da8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7ff faf3 	bl	8002314 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7ff faef 	bl	8002314 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e081      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x4ec>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fac8 	bl	8002314 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff fac4 	bl	8002314 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e056      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x41c>
 8002da6:	e04e      	b.n	8002e46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x4ec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7ff fab1 	bl	8002314 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7ff faad 	bl	8002314 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e03f      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x44a>
 8002dd4:	e037      	b.n	8002e46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e032      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d028      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d11a      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d111      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40007000 	.word	0x40007000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470060 	.word	0x42470060

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0cc      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d90c      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d044      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e067      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4934      	ldr	r1, [pc, #208]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f9e2 	bl	8002314 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7ff f9de 	bl	8002314 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d20c      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f821 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f942 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00
 8003018:	40023800 	.word	0x40023800
 800301c:	08008380 	.word	0x08008380
 8003020:	20000004 	.word	0x20000004
 8003024:	20000008 	.word	0x20000008

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800302e:	2100      	movs	r1, #0
 8003030:	6079      	str	r1, [r7, #4]
 8003032:	2100      	movs	r1, #0
 8003034:	60f9      	str	r1, [r7, #12]
 8003036:	2100      	movs	r1, #0
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800303a:	2100      	movs	r1, #0
 800303c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303e:	4952      	ldr	r1, [pc, #328]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 8003040:	6889      	ldr	r1, [r1, #8]
 8003042:	f001 010c 	and.w	r1, r1, #12
 8003046:	2908      	cmp	r1, #8
 8003048:	d00d      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x3e>
 800304a:	2908      	cmp	r1, #8
 800304c:	f200 8094 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x150>
 8003050:	2900      	cmp	r1, #0
 8003052:	d002      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x32>
 8003054:	2904      	cmp	r1, #4
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x38>
 8003058:	e08e      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305a:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_RCC_GetSysClockFreq+0x164>)
 800305c:	60bb      	str	r3, [r7, #8]
       break;
 800305e:	e08e      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003060:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <HAL_RCC_GetSysClockFreq+0x168>)
 8003062:	60bb      	str	r3, [r7, #8]
      break;
 8003064:	e08b      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003066:	4948      	ldr	r1, [pc, #288]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 8003068:	6849      	ldr	r1, [r1, #4]
 800306a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800306e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003070:	4945      	ldr	r1, [pc, #276]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 8003072:	6849      	ldr	r1, [r1, #4]
 8003074:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003078:	2900      	cmp	r1, #0
 800307a:	d024      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4942      	ldr	r1, [pc, #264]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 800307e:	6849      	ldr	r1, [r1, #4]
 8003080:	0989      	lsrs	r1, r1, #6
 8003082:	4608      	mov	r0, r1
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	f240 14ff 	movw	r4, #511	; 0x1ff
 800308c:	f04f 0500 	mov.w	r5, #0
 8003090:	ea00 0204 	and.w	r2, r0, r4
 8003094:	ea01 0305 	and.w	r3, r1, r5
 8003098:	493d      	ldr	r1, [pc, #244]	; (8003190 <HAL_RCC_GetSysClockFreq+0x168>)
 800309a:	fb01 f003 	mul.w	r0, r1, r3
 800309e:	2100      	movs	r1, #0
 80030a0:	fb01 f102 	mul.w	r1, r1, r2
 80030a4:	1844      	adds	r4, r0, r1
 80030a6:	493a      	ldr	r1, [pc, #232]	; (8003190 <HAL_RCC_GetSysClockFreq+0x168>)
 80030a8:	fba2 0101 	umull	r0, r1, r2, r1
 80030ac:	1863      	adds	r3, r4, r1
 80030ae:	4619      	mov	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f7fd fbf8 	bl	80008ac <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4613      	mov	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e04a      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	461a      	mov	r2, r3
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	ea02 0400 	and.w	r4, r2, r0
 80030de:	ea03 0501 	and.w	r5, r3, r1
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	014b      	lsls	r3, r1, #5
 80030f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030f4:	0142      	lsls	r2, r0, #5
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	1b00      	subs	r0, r0, r4
 80030fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	018b      	lsls	r3, r1, #6
 800310a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800310e:	0182      	lsls	r2, r0, #6
 8003110:	1a12      	subs	r2, r2, r0
 8003112:	eb63 0301 	sbc.w	r3, r3, r1
 8003116:	f04f 0000 	mov.w	r0, #0
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	00d9      	lsls	r1, r3, #3
 8003120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003124:	00d0      	lsls	r0, r2, #3
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	1912      	adds	r2, r2, r4
 800312c:	eb45 0303 	adc.w	r3, r5, r3
 8003130:	f04f 0000 	mov.w	r0, #0
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	0299      	lsls	r1, r3, #10
 800313a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800313e:	0290      	lsls	r0, r2, #10
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	461a      	mov	r2, r3
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f7fd fbac 	bl	80008ac <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_GetSysClockFreq+0x160>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	60bb      	str	r3, [r7, #8]
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_GetSysClockFreq+0x164>)
 800317a:	60bb      	str	r3, [r7, #8]
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	68bb      	ldr	r3, [r7, #8]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bdb0      	pop	{r4, r5, r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	00f42400 	.word	0x00f42400
 8003190:	017d7840 	.word	0x017d7840

08003194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07b      	b.n	800329e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
 80031be:	e005      	b.n	80031cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fedc 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	ea42 0103 	orr.w	r1, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 0104 	and.w	r1, r3, #4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0210 	and.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_Transmit+0x22>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e126      	b.n	8003516 <HAL_SPI_Transmit+0x270>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d0:	f7ff f820 	bl	8002314 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ea:	e10b      	b.n	8003504 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_Transmit+0x52>
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fc:	e102      	b.n	8003504 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d10f      	bne.n	8003366 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338c:	d14b      	bne.n	8003426 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0xf6>
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d13e      	bne.n	800341a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c0:	e02b      	b.n	800341a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d112      	bne.n	80033f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80033f4:	e011      	b.n	800341a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fe ff8d 	bl	8002314 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Transmit+0x168>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x16e>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003418:	e074      	b.n	8003504 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ce      	bne.n	80033c2 <HAL_SPI_Transmit+0x11c>
 8003424:	e04c      	b.n	80034c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x18e>
 800342e:	8afb      	ldrh	r3, [r7, #22]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d140      	bne.n	80034b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800345a:	e02c      	b.n	80034b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d113      	bne.n	8003492 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003490:	e011      	b.n	80034b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003492:	f7fe ff3f 	bl	8002314 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d803      	bhi.n	80034aa <HAL_SPI_Transmit+0x204>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d102      	bne.n	80034b0 <HAL_SPI_Transmit+0x20a>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034b4:	e026      	b.n	8003504 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1cd      	bne.n	800345c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fa55 	bl	8003974 <SPI_EndRxTxTransaction>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e000      	b.n	8003504 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003514:	7ffb      	ldrb	r3, [r7, #31]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b08c      	sub	sp, #48	; 0x30
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x26>
 8003540:	2302      	movs	r3, #2
 8003542:	e18a      	b.n	800385a <HAL_SPI_TransmitReceive+0x33c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354c:	f7fe fee2 	bl	8002314 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800356a:	2b01      	cmp	r3, #1
 800356c:	d00f      	beq.n	800358e <HAL_SPI_TransmitReceive+0x70>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003574:	d107      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x68>
 800357e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003582:	2b04      	cmp	r3, #4
 8003584:	d003      	beq.n	800358e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800358c:	e15b      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x82>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x82>
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035a6:	e14e      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d003      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2205      	movs	r2, #5
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	887a      	ldrh	r2, [r7, #2]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d007      	beq.n	8003610 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003618:	d178      	bne.n	800370c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x10a>
 8003622:	8b7b      	ldrh	r3, [r7, #26]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d166      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364c:	e053      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11b      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x176>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x176>
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d113      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d119      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x1b8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d014      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	b292      	uxth	r2, r2
 80036b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036d2:	2301      	movs	r3, #1
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036d6:	f7fe fe1d 	bl	8002314 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d807      	bhi.n	80036f6 <HAL_SPI_TransmitReceive+0x1d8>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d003      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036f4:	e0a7      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1a6      	bne.n	800364e <HAL_SPI_TransmitReceive+0x130>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1a1      	bne.n	800364e <HAL_SPI_TransmitReceive+0x130>
 800370a:	e07c      	b.n	8003806 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_SPI_TransmitReceive+0x1fc>
 8003714:	8b7b      	ldrh	r3, [r7, #26]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d16b      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003740:	e057      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11c      	bne.n	800378a <HAL_SPI_TransmitReceive+0x26c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d017      	beq.n	800378a <HAL_SPI_TransmitReceive+0x26c>
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d114      	bne.n	800378a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d119      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x2ae>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d014      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037cc:	f7fe fda2 	bl	8002314 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d8:	429a      	cmp	r2, r3
 80037da:	d803      	bhi.n	80037e4 <HAL_SPI_TransmitReceive+0x2c6>
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d102      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x2cc>
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037f0:	e029      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1a2      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x224>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19d      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8b2 	bl	8003974 <SPI_EndRxTxTransaction>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003822:	e010      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	e000      	b.n	8003846 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003844:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800385a:	4618      	mov	r0, r3
 800385c:	3730      	adds	r7, #48	; 0x30
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003874:	f7fe fd4e 	bl	8002314 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003884:	f7fe fd46 	bl	8002314 <HAL_GetTick>
 8003888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	015b      	lsls	r3, r3, #5
 8003890:	0d1b      	lsrs	r3, r3, #20
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800389a:	e054      	b.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d050      	beq.n	8003946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a4:	f7fe fd36 	bl	8002314 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d902      	bls.n	80038ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13d      	bne.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d2:	d111      	bne.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d004      	beq.n	80038e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d107      	bne.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003900:	d10f      	bne.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e017      	b.n	8003966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3b01      	subs	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d19b      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000004 	.word	0x20000004

08003974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <SPI_EndRxTxTransaction+0x7c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <SPI_EndRxTxTransaction+0x80>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0d5b      	lsrs	r3, r3, #21
 800398c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399e:	d112      	bne.n	80039c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ff5a 	bl	8003864 <SPI_WaitFlagStateUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e00f      	b.n	80039e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d0f2      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x52>
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80039e2:	bf00      	nop
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000004 	.word	0x20000004
 80039f4:	165e9f81 	.word	0x165e9f81

080039f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80039fc:	4904      	ldr	r1, [pc, #16]	; (8003a10 <MX_FATFS_Init+0x18>)
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <MX_FATFS_Init+0x1c>)
 8003a00:	f003 f982 	bl	8006d08 <FATFS_LinkDriver>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <MX_FATFS_Init+0x20>)
 8003a0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	2002480c 	.word	0x2002480c
 8003a14:	20000010 	.word	0x20000010
 8003a18:	20024810 	.word	0x20024810

08003a1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003a20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fa6b 	bl	8000f14 <SD_disk_initialize>
 8003a3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fb43 	bl	80010e0 <SD_disk_status>
 8003a5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003a74:	7bf8      	ldrb	r0, [r7, #15]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	f7fd fb46 	bl	800110c <SD_disk_read>
 8003a80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003a9a:	7bf8      	ldrb	r0, [r7, #15]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	f7fd fb9d 	bl	80011e0 <SD_disk_write>
 8003aa6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	603a      	str	r2, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
 8003abc:	460b      	mov	r3, r1
 8003abe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003ac0:	79b9      	ldrb	r1, [r7, #6]
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fc0e 	bl	80012e8 <SD_disk_ioctl>
 8003acc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <disk_status+0x30>)
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	79fa      	ldrb	r2, [r7, #7]
 8003af0:	4905      	ldr	r1, [pc, #20]	; (8003b08 <disk_status+0x30>)
 8003af2:	440a      	add	r2, r1
 8003af4:	7a12      	ldrb	r2, [r2, #8]
 8003af6:	4610      	mov	r0, r2
 8003af8:	4798      	blx	r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200004d4 	.word	0x200004d4

08003b0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <disk_initialize+0x48>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d111      	bne.n	8003b48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <disk_initialize+0x48>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <disk_initialize+0x48>)
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	4906      	ldr	r1, [pc, #24]	; (8003b54 <disk_initialize+0x48>)
 8003b3c:	440a      	add	r2, r1
 8003b3e:	7a12      	ldrb	r2, [r2, #8]
 8003b40:	4610      	mov	r0, r2
 8003b42:	4798      	blx	r3
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200004d4 	.word	0x200004d4

08003b58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <disk_read+0x3c>)
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	689c      	ldr	r4, [r3, #8]
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <disk_read+0x3c>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	7a18      	ldrb	r0, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	47a0      	blx	r4
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200004d4 	.word	0x200004d4

08003b98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <disk_write+0x3c>)
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68dc      	ldr	r4, [r3, #12]
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <disk_write+0x3c>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	7a18      	ldrb	r0, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	47a0      	blx	r4
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200004d4 	.word	0x200004d4

08003bd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	603a      	str	r2, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
 8003be4:	460b      	mov	r3, r1
 8003be6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <disk_ioctl+0x38>)
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	79fa      	ldrb	r2, [r7, #7]
 8003bf6:	4906      	ldr	r1, [pc, #24]	; (8003c10 <disk_ioctl+0x38>)
 8003bf8:	440a      	add	r2, r1
 8003bfa:	7a10      	ldrb	r0, [r2, #8]
 8003bfc:	79b9      	ldrb	r1, [r7, #6]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	4798      	blx	r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	73fb      	strb	r3, [r7, #15]
  return res;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	200004d4 	.word	0x200004d4

08003c14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b21b      	sxth	r3, r3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003c36:	89fb      	ldrh	r3, [r7, #14]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3303      	adds	r3, #3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	3202      	adds	r2, #2
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	3201      	adds	r2, #1
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	1c53      	adds	r3, r2, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	6179      	str	r1, [r7, #20]
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f1      	bne.n	8003d32 <mem_cpy+0x1a>
	}
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d5a:	b480      	push	{r7}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	617a      	str	r2, [r7, #20]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f3      	bne.n	8003d6a <mem_set+0x10>
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	61fa      	str	r2, [r7, #28]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	61ba      	str	r2, [r7, #24]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	1acb      	subs	r3, r1, r3
 8003dbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <mem_cmp+0x40>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0eb      	beq.n	8003da8 <mem_cmp+0x18>

	return r;
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003de8:	e002      	b.n	8003df0 <chk_chr+0x12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3301      	adds	r3, #1
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <chk_chr+0x26>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d1f2      	bne.n	8003dea <chk_chr+0xc>
	return *str;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	781b      	ldrb	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e029      	b.n	8003e7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <chk_lock+0xb4>)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	4413      	add	r3, r2
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01d      	beq.n	8003e72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <chk_lock+0xb4>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4413      	add	r3, r2
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d116      	bne.n	8003e76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <chk_lock+0xb4>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d10c      	bne.n	8003e76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <chk_lock+0xb4>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	4413      	add	r3, r2
 8003e64:	3308      	adds	r3, #8
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d102      	bne.n	8003e76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e70:	e007      	b.n	8003e82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d9d2      	bls.n	8003e28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d109      	bne.n	8003e9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <chk_lock+0x80>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d101      	bne.n	8003e98 <chk_lock+0x84>
 8003e94:	2300      	movs	r3, #0
 8003e96:	e010      	b.n	8003eba <chk_lock+0xa6>
 8003e98:	2312      	movs	r3, #18
 8003e9a:	e00e      	b.n	8003eba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <chk_lock+0xa0>
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <chk_lock+0xb4>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	330c      	adds	r3, #12
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d101      	bne.n	8003eb8 <chk_lock+0xa4>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	e000      	b.n	8003eba <chk_lock+0xa6>
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	200004b4 	.word	0x200004b4

08003ecc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	e002      	b.n	8003ede <enq_lock+0x12>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3301      	adds	r3, #1
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d806      	bhi.n	8003ef2 <enq_lock+0x26>
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <enq_lock+0x40>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	4413      	add	r3, r2
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f2      	bne.n	8003ed8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200004b4 	.word	0x200004b4

08003f10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e01f      	b.n	8003f60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <inc_lock+0x118>)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	4413      	add	r3, r2
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d113      	bne.n	8003f5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003f32:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <inc_lock+0x118>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d109      	bne.n	8003f5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <inc_lock+0x118>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3308      	adds	r3, #8
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d006      	beq.n	8003f68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d9dc      	bls.n	8003f20 <inc_lock+0x10>
 8003f66:	e000      	b.n	8003f6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003f68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d132      	bne.n	8003fd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e002      	b.n	8003f7c <inc_lock+0x6c>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d806      	bhi.n	8003f90 <inc_lock+0x80>
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <inc_lock+0x118>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f2      	bne.n	8003f76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d101      	bne.n	8003f9a <inc_lock+0x8a>
 8003f96:	2300      	movs	r3, #0
 8003f98:	e040      	b.n	800401c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <inc_lock+0x118>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	440b      	add	r3, r1
 8003fa6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	491e      	ldr	r1, [pc, #120]	; (8004028 <inc_lock+0x118>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	491a      	ldr	r1, [pc, #104]	; (8004028 <inc_lock+0x118>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <inc_lock+0x118>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	4413      	add	r3, r2
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <inc_lock+0xe0>
 8003fdc:	4a12      	ldr	r2, [pc, #72]	; (8004028 <inc_lock+0x118>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	4413      	add	r3, r2
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <inc_lock+0xe0>
 8003fec:	2300      	movs	r3, #0
 8003fee:	e015      	b.n	800401c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <inc_lock+0xf8>
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <inc_lock+0x118>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	4413      	add	r3, r2
 8003ffe:	330c      	adds	r3, #12
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	e001      	b.n	800400c <inc_lock+0xfc>
 8004008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400c:	4906      	ldr	r1, [pc, #24]	; (8004028 <inc_lock+0x118>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	440b      	add	r3, r1
 8004014:	330c      	adds	r3, #12
 8004016:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3301      	adds	r3, #1
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200004b4 	.word	0x200004b4

0800402c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d825      	bhi.n	800408c <dec_lock+0x60>
		n = Files[i].ctr;
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <dec_lock+0x74>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	4413      	add	r3, r2
 8004048:	330c      	adds	r3, #12
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800404e:	89fb      	ldrh	r3, [r7, #14]
 8004050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004054:	d101      	bne.n	800405a <dec_lock+0x2e>
 8004056:	2300      	movs	r3, #0
 8004058:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800405a:	89fb      	ldrh	r3, [r7, #14]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <dec_lock+0x3a>
 8004060:	89fb      	ldrh	r3, [r7, #14]
 8004062:	3b01      	subs	r3, #1
 8004064:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <dec_lock+0x74>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	330c      	adds	r3, #12
 8004070:	89fa      	ldrh	r2, [r7, #14]
 8004072:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <dec_lock+0x5a>
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <dec_lock+0x74>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4413      	add	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	737b      	strb	r3, [r7, #13]
 800408a:	e001      	b.n	8004090 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800408c:	2302      	movs	r3, #2
 800408e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004090:	7b7b      	ldrb	r3, [r7, #13]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	200004b4 	.word	0x200004b4

080040a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e010      	b.n	80040d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80040b2:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <clear_lock+0x44>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	4413      	add	r3, r2
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d105      	bne.n	80040ce <clear_lock+0x2a>
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <clear_lock+0x44>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	4413      	add	r3, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d9eb      	bls.n	80040b2 <clear_lock+0xe>
	}
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	200004b4 	.word	0x200004b4

080040ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d034      	beq.n	800416a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7858      	ldrb	r0, [r3, #1]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004110:	2301      	movs	r3, #1
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	f7ff fd40 	bl	8003b98 <disk_write>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <sync_window+0x38>
			res = FR_DISK_ERR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	e022      	b.n	800416a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	1ad2      	subs	r2, r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	429a      	cmp	r2, r3
 8004138:	d217      	bcs.n	800416a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e010      	b.n	8004164 <sync_window+0x78>
					wsect += fs->fsize;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7858      	ldrb	r0, [r3, #1]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004156:	2301      	movs	r3, #1
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	f7ff fd1d 	bl	8003b98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d8eb      	bhi.n	8004142 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d01b      	beq.n	80041c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ffad 	bl	80040ec <sync_window>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7858      	ldrb	r0, [r3, #1]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041a6:	2301      	movs	r3, #1
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	f7ff fcd5 	bl	8003b58 <disk_read>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff87 	bl	80040ec <sync_window>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d159      	bne.n	800429c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d149      	bne.n	8004284 <sync_fs+0xb4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	791b      	ldrb	r3, [r3, #4]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d145      	bne.n	8004284 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	899b      	ldrh	r3, [r3, #12]
 8004202:	461a      	mov	r2, r3
 8004204:	2100      	movs	r1, #0
 8004206:	f7ff fda8 	bl	8003d5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3338      	adds	r3, #56	; 0x38
 800420e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004212:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fd37 	bl	8003c8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3338      	adds	r3, #56	; 0x38
 8004220:	4921      	ldr	r1, [pc, #132]	; (80042a8 <sync_fs+0xd8>)
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fd4c 	bl	8003cc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3338      	adds	r3, #56	; 0x38
 800422c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004230:	491e      	ldr	r1, [pc, #120]	; (80042ac <sync_fs+0xdc>)
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fd44 	bl	8003cc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3338      	adds	r3, #56	; 0x38
 800423c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7ff fd3a 	bl	8003cc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3338      	adds	r3, #56	; 0x38
 8004250:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff fd30 	bl	8003cc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7858      	ldrb	r0, [r3, #1]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004278:	2301      	movs	r3, #1
 800427a:	f7ff fc8d 	bl	8003b98 <disk_write>
			fs->fsi_flag = 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fca3 	bl	8003bd8 <disk_ioctl>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <sync_fs+0xcc>
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	41615252 	.word	0x41615252
 80042ac:	61417272 	.word	0x61417272

080042b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3b02      	subs	r3, #2
 80042be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	3b02      	subs	r3, #2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d301      	bcc.n	80042d0 <clust2sect+0x20>
 80042cc:	2300      	movs	r3, #0
 80042ce:	e008      	b.n	80042e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	895b      	ldrh	r3, [r3, #10]
 80042d4:	461a      	mov	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	fb03 f202 	mul.w	r2, r3, r2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	4413      	add	r3, r2
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d904      	bls.n	800430e <get_fat+0x20>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <get_fat+0x26>
		val = 1;	/* Internal error */
 800430e:	2301      	movs	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e0bb      	b.n	800448c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b03      	cmp	r3, #3
 8004320:	f000 8083 	beq.w	800442a <get_fat+0x13c>
 8004324:	2b03      	cmp	r3, #3
 8004326:	f300 80a7 	bgt.w	8004478 <get_fat+0x18a>
 800432a:	2b01      	cmp	r3, #1
 800432c:	d002      	beq.n	8004334 <get_fat+0x46>
 800432e:	2b02      	cmp	r3, #2
 8004330:	d056      	beq.n	80043e0 <get_fat+0xf2>
 8004332:	e0a1      	b.n	8004478 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	899b      	ldrh	r3, [r3, #12]
 800434a:	4619      	mov	r1, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004352:	4413      	add	r3, r2
 8004354:	4619      	mov	r1, r3
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f7ff ff0c 	bl	8004174 <move_window>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 808d 	bne.w	800447e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	60fa      	str	r2, [r7, #12]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	8992      	ldrh	r2, [r2, #12]
 800436e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004372:	fb02 f201 	mul.w	r2, r2, r1
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004380:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	899b      	ldrh	r3, [r3, #12]
 800438a:	4619      	mov	r1, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	4413      	add	r3, r2
 8004394:	4619      	mov	r1, r3
 8004396:	6938      	ldr	r0, [r7, #16]
 8004398:	f7ff feec 	bl	8004174 <move_window>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d16f      	bne.n	8004482 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	899b      	ldrh	r3, [r3, #12]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80043ae:	fb02 f201 	mul.w	r2, r2, r1
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <get_fat+0xe8>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	e002      	b.n	80043dc <get_fat+0xee>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043dc:	617b      	str	r3, [r7, #20]
			break;
 80043de:	e055      	b.n	800448c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	899b      	ldrh	r3, [r3, #12]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f4:	4413      	add	r3, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	6938      	ldr	r0, [r7, #16]
 80043fa:	f7ff febb 	bl	8004174 <move_window>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d140      	bne.n	8004486 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	8992      	ldrh	r2, [r2, #12]
 8004412:	fbb3 f0f2 	udiv	r0, r3, r2
 8004416:	fb02 f200 	mul.w	r2, r2, r0
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	440b      	add	r3, r1
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fbf8 	bl	8003c14 <ld_word>
 8004424:	4603      	mov	r3, r0
 8004426:	617b      	str	r3, [r7, #20]
			break;
 8004428:	e030      	b.n	800448c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	899b      	ldrh	r3, [r3, #12]
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	b29b      	uxth	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	fbb3 f3f1 	udiv	r3, r3, r1
 800443e:	4413      	add	r3, r2
 8004440:	4619      	mov	r1, r3
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fe96 	bl	8004174 <move_window>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11d      	bne.n	800448a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	8992      	ldrh	r2, [r2, #12]
 800445c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004460:	fb02 f200 	mul.w	r2, r2, r0
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	440b      	add	r3, r1
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fbeb 	bl	8003c44 <ld_dword>
 800446e:	4603      	mov	r3, r0
 8004470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004474:	617b      	str	r3, [r7, #20]
			break;
 8004476:	e009      	b.n	800448c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e006      	b.n	800448c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800447e:	bf00      	nop
 8004480:	e004      	b.n	800448c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800448a:	bf00      	nop
		}
	}

	return val;
 800448c:	697b      	ldr	r3, [r7, #20]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004496:	b590      	push	{r4, r7, lr}
 8004498:	b089      	sub	sp, #36	; 0x24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80044a2:	2302      	movs	r3, #2
 80044a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f240 8102 	bls.w	80046b2 <put_fat+0x21c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	f080 80fc 	bcs.w	80046b2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	f000 80b6 	beq.w	8004630 <put_fat+0x19a>
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	f300 80fd 	bgt.w	80046c4 <put_fat+0x22e>
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d003      	beq.n	80044d6 <put_fat+0x40>
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	f000 8083 	beq.w	80045da <put_fat+0x144>
 80044d4:	e0f6      	b.n	80046c4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	899b      	ldrh	r3, [r3, #12]
 80044ec:	4619      	mov	r1, r3
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f4:	4413      	add	r3, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fe3b 	bl	8004174 <move_window>
 80044fe:	4603      	mov	r3, r0
 8004500:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004502:	7ffb      	ldrb	r3, [r7, #31]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 80d6 	bne.w	80046b6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	61ba      	str	r2, [r7, #24]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	8992      	ldrh	r2, [r2, #12]
 800451a:	fbb3 f0f2 	udiv	r0, r3, r2
 800451e:	fb02 f200 	mul.w	r2, r2, r0
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	440b      	add	r3, r1
 8004526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <put_fat+0xb8>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b25b      	sxtb	r3, r3
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	b25a      	sxtb	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	b25b      	sxtb	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b25b      	sxtb	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e001      	b.n	8004552 <put_fat+0xbc>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	899b      	ldrh	r3, [r3, #12]
 8004564:	4619      	mov	r1, r3
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	fbb3 f3f1 	udiv	r3, r3, r1
 800456c:	4413      	add	r3, r2
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fdff 	bl	8004174 <move_window>
 8004576:	4603      	mov	r3, r0
 8004578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 809c 	bne.w	80046ba <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	899b      	ldrh	r3, [r3, #12]
 800458c:	461a      	mov	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	fbb3 f0f2 	udiv	r0, r3, r2
 8004594:	fb02 f200 	mul.w	r2, r2, r0
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	440b      	add	r3, r1
 800459c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <put_fat+0x11a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e00e      	b.n	80045ce <put_fat+0x138>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	f023 030f 	bic.w	r3, r3, #15
 80045ba:	b25a      	sxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	b25b      	sxtb	r3, r3
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	70da      	strb	r2, [r3, #3]
			break;
 80045d8:	e074      	b.n	80046c4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	899b      	ldrh	r3, [r3, #12]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ee:	4413      	add	r3, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fdbe 	bl	8004174 <move_window>
 80045f8:	4603      	mov	r3, r0
 80045fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d15d      	bne.n	80046be <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	8992      	ldrh	r2, [r2, #12]
 8004610:	fbb3 f0f2 	udiv	r0, r3, r2
 8004614:	fb02 f200 	mul.w	r2, r2, r0
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	440b      	add	r3, r1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	b292      	uxth	r2, r2
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fb31 	bl	8003c8a <st_word>
			fs->wflag = 1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	70da      	strb	r2, [r3, #3]
			break;
 800462e:	e049      	b.n	80046c4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	899b      	ldrh	r3, [r3, #12]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	b29b      	uxth	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	fbb3 f3f1 	udiv	r3, r3, r1
 8004644:	4413      	add	r3, r2
 8004646:	4619      	mov	r1, r3
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fd93 	bl	8004174 <move_window>
 800464e:	4603      	mov	r3, r0
 8004650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d134      	bne.n	80046c2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	8992      	ldrh	r2, [r2, #12]
 800466c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004670:	fb02 f200 	mul.w	r2, r2, r0
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	440b      	add	r3, r1
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fae3 	bl	8003c44 <ld_dword>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004684:	4323      	orrs	r3, r4
 8004686:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	8992      	ldrh	r2, [r2, #12]
 8004696:	fbb3 f0f2 	udiv	r0, r3, r2
 800469a:	fb02 f200 	mul.w	r2, r2, r0
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	440b      	add	r3, r1
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fb0b 	bl	8003cc0 <st_dword>
			fs->wflag = 1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	70da      	strb	r2, [r3, #3]
			break;
 80046b0:	e008      	b.n	80046c4 <put_fat+0x22e>
		}
	}
 80046b2:	bf00      	nop
 80046b4:	e006      	b.n	80046c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80046c2:	bf00      	nop
	return res;
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}

080046ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b088      	sub	sp, #32
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d904      	bls.n	80046f4 <remove_chain+0x26>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d301      	bcc.n	80046f8 <remove_chain+0x2a>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e04b      	b.n	8004790 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	69b8      	ldr	r0, [r7, #24]
 8004706:	f7ff fec6 	bl	8004496 <put_fat>
 800470a:	4603      	mov	r3, r0
 800470c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <remove_chain+0x4a>
 8004714:	7ffb      	ldrb	r3, [r7, #31]
 8004716:	e03b      	b.n	8004790 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff fde7 	bl	80042ee <get_fat>
 8004720:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d031      	beq.n	800478c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <remove_chain+0x64>
 800472e:	2302      	movs	r3, #2
 8004730:	e02e      	b.n	8004790 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d101      	bne.n	800473e <remove_chain+0x70>
 800473a:	2301      	movs	r3, #1
 800473c:	e028      	b.n	8004790 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800473e:	2200      	movs	r2, #0
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	69b8      	ldr	r0, [r7, #24]
 8004744:	f7ff fea7 	bl	8004496 <put_fat>
 8004748:	4603      	mov	r3, r0
 800474a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <remove_chain+0x88>
 8004752:	7ffb      	ldrb	r3, [r7, #31]
 8004754:	e01c      	b.n	8004790 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	3b02      	subs	r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d20b      	bcs.n	800477c <remove_chain+0xae>
			fs->free_clst++;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	791b      	ldrb	r3, [r3, #4]
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3c6      	bcc.n	8004718 <remove_chain+0x4a>
 800478a:	e000      	b.n	800478e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800478c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <create_chain+0x2c>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d31b      	bcc.n	80047fc <create_chain+0x64>
 80047c4:	2301      	movs	r3, #1
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	e018      	b.n	80047fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fd8e 	bl	80042ee <get_fat>
 80047d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d801      	bhi.n	80047de <create_chain+0x46>
 80047da:	2301      	movs	r3, #1
 80047dc:	e070      	b.n	80048c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d101      	bne.n	80047ea <create_chain+0x52>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	e06a      	b.n	80048c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d201      	bcs.n	80047f8 <create_chain+0x60>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	e063      	b.n	80048c0 <create_chain+0x128>
		scl = clst;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	429a      	cmp	r2, r3
 800480e:	d307      	bcc.n	8004820 <create_chain+0x88>
				ncl = 2;
 8004810:	2302      	movs	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	429a      	cmp	r2, r3
 800481a:	d901      	bls.n	8004820 <create_chain+0x88>
 800481c:	2300      	movs	r3, #0
 800481e:	e04f      	b.n	80048c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fd63 	bl	80042ee <get_fat>
 8004828:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <create_chain+0xa6>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d101      	bne.n	8004842 <create_chain+0xaa>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	e03e      	b.n	80048c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d1da      	bne.n	8004800 <create_chain+0x68>
 800484a:	2300      	movs	r3, #0
 800484c:	e038      	b.n	80048c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800484e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	69f9      	ldr	r1, [r7, #28]
 8004856:	6938      	ldr	r0, [r7, #16]
 8004858:	f7ff fe1d 	bl	8004496 <put_fat>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <create_chain+0xe2>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f7ff fe10 	bl	8004496 <put_fat>
 8004876:	4603      	mov	r3, r0
 8004878:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <create_chain+0x116>
		fs->last_clst = ncl;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	3b02      	subs	r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d804      	bhi.n	800489e <create_chain+0x106>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	711a      	strb	r2, [r3, #4]
 80048ac:	e007      	b.n	80048be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d102      	bne.n	80048ba <create_chain+0x122>
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	e000      	b.n	80048bc <create_chain+0x124>
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80048be:	69fb      	ldr	r3, [r7, #28]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	3304      	adds	r3, #4
 80048de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	899b      	ldrh	r3, [r3, #12]
 80048e4:	461a      	mov	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	8952      	ldrh	r2, [r2, #10]
 80048f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1d1a      	adds	r2, r3, #4
 80048fa:	613a      	str	r2, [r7, #16]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <clmt_clust+0x42>
 8004906:	2300      	movs	r3, #0
 8004908:	e010      	b.n	800492c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d307      	bcc.n	8004922 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3304      	adds	r3, #4
 800491e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004920:	e7e9      	b.n	80048f6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004922:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800494e:	d204      	bcs.n	800495a <dir_sdi+0x22>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <dir_sdi+0x26>
		return FR_INT_ERR;
 800495a:	2302      	movs	r3, #2
 800495c:	e071      	b.n	8004a42 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <dir_sdi+0x46>
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d902      	bls.n	800497e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	8912      	ldrh	r2, [r2, #8]
 800498c:	4293      	cmp	r3, r2
 800498e:	d301      	bcc.n	8004994 <dir_sdi+0x5c>
 8004990:	2302      	movs	r3, #2
 8004992:	e056      	b.n	8004a42 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	61da      	str	r2, [r3, #28]
 800499c:	e02d      	b.n	80049fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	895b      	ldrh	r3, [r3, #10]
 80049a2:	461a      	mov	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	899b      	ldrh	r3, [r3, #12]
 80049a8:	fb03 f302 	mul.w	r3, r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80049ae:	e019      	b.n	80049e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fc9a 	bl	80042ee <get_fat>
 80049ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d101      	bne.n	80049c8 <dir_sdi+0x90>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e03c      	b.n	8004a42 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d904      	bls.n	80049d8 <dir_sdi+0xa0>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d301      	bcc.n	80049dc <dir_sdi+0xa4>
 80049d8:	2302      	movs	r3, #2
 80049da:	e032      	b.n	8004a42 <dir_sdi+0x10a>
			ofs -= csz;
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d2e1      	bcs.n	80049b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	6938      	ldr	r0, [r7, #16]
 80049f0:	f7ff fc5e 	bl	80042b0 <clust2sect>
 80049f4:	4602      	mov	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <dir_sdi+0xd4>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e01a      	b.n	8004a42 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	899b      	ldrh	r3, [r3, #12]
 8004a14:	4619      	mov	r1, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	899b      	ldrh	r3, [r3, #12]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a34:	fb02 f200 	mul.w	r2, r2, r0
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	18ca      	adds	r2, r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	3320      	adds	r3, #32
 8004a60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <dir_next+0x28>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a70:	d301      	bcc.n	8004a76 <dir_next+0x2c>
 8004a72:	2304      	movs	r3, #4
 8004a74:	e0bb      	b.n	8004bee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	899b      	ldrh	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a82:	fb02 f201 	mul.w	r2, r2, r1
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f040 809d 	bne.w	8004bc8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	8912      	ldrh	r2, [r2, #8]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f0c0 808d 	bcc.w	8004bc8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	61da      	str	r2, [r3, #28]
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	e09a      	b.n	8004bee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	899b      	ldrh	r3, [r3, #12]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	8952      	ldrh	r2, [r2, #10]
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d17b      	bne.n	8004bc8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7ff fc08 	bl	80042ee <get_fat>
 8004ade:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d801      	bhi.n	8004aea <dir_next+0xa0>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e081      	b.n	8004bee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d101      	bne.n	8004af6 <dir_next+0xac>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07b      	b.n	8004bee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d359      	bcc.n	8004bb4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	61da      	str	r2, [r3, #28]
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e06e      	b.n	8004bee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7ff fe3d 	bl	8004798 <create_chain>
 8004b1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <dir_next+0xe0>
 8004b26:	2307      	movs	r3, #7
 8004b28:	e061      	b.n	8004bee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <dir_next+0xea>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e05c      	b.n	8004bee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d101      	bne.n	8004b40 <dir_next+0xf6>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e056      	b.n	8004bee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fad3 	bl	80040ec <sync_window>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <dir_next+0x106>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e04e      	b.n	8004bee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	899b      	ldrh	r3, [r3, #12]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f7ff f8fc 	bl	8003d5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fba1 	bl	80042b0 <clust2sect>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34
 8004b74:	e012      	b.n	8004b9c <dir_next+0x152>
						fs->wflag = 1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fab5 	bl	80040ec <sync_window>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <dir_next+0x142>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e030      	b.n	8004bee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	895b      	ldrh	r3, [r3, #10]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d3e6      	bcc.n	8004b76 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fb77 	bl	80042b0 <clust2sect>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	899b      	ldrh	r3, [r3, #12]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004be0:	fb02 f200 	mul.w	r2, r2, r0
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	18ca      	adds	r2, r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fe95 	bl	8004938 <dir_sdi>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d12b      	bne.n	8004c70 <dir_alloc+0x7a>
		n = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4619      	mov	r1, r3
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff faa6 	bl	8004174 <move_window>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d11d      	bne.n	8004c6e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2be5      	cmp	r3, #229	; 0xe5
 8004c3a:	d004      	beq.n	8004c46 <dir_alloc+0x50>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d102      	bne.n	8004c5a <dir_alloc+0x64>
 8004c54:	e00c      	b.n	8004c70 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fef4 	bl	8004a4a <dir_next>
 8004c62:	4603      	mov	r3, r0
 8004c64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0d7      	beq.n	8004c1c <dir_alloc+0x26>
 8004c6c:	e000      	b.n	8004c70 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004c6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d101      	bne.n	8004c7a <dir_alloc+0x84>
 8004c76:	2307      	movs	r3, #7
 8004c78:	75fb      	strb	r3, [r7, #23]
	return res;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	331a      	adds	r3, #26
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe ffbe 	bl	8003c14 <ld_word>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d109      	bne.n	8004cb8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe ffb3 	bl	8003c14 <ld_word>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	331a      	adds	r3, #26
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe ffd6 	bl	8003c8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d109      	bne.n	8004cfa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f103 0214 	add.w	r2, r3, #20
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fe ffc8 	bl	8003c8a <st_word>
	}
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	331a      	adds	r3, #26
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe ff7e 	bl	8003c14 <ld_word>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <cmp_lfn+0x1e>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e059      	b.n	8004dd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004d38:	2301      	movs	r3, #1
 8004d3a:	81fb      	strh	r3, [r7, #14]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e033      	b.n	8004daa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004d42:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <cmp_lfn+0xdc>)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4413      	add	r3, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe ff5f 	bl	8003c14 <ld_word>
 8004d56:	4603      	mov	r3, r0
 8004d58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2bfe      	cmp	r3, #254	; 0xfe
 8004d64:	d812      	bhi.n	8004d8c <cmp_lfn+0x88>
 8004d66:	89bb      	ldrh	r3, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 f819 	bl	8006da0 <ff_wtoupper>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461c      	mov	r4, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	617a      	str	r2, [r7, #20]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f002 f80d 	bl	8006da0 <ff_wtoupper>
 8004d86:	4603      	mov	r3, r0
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	d001      	beq.n	8004d90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e022      	b.n	8004dd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004d90:	89bb      	ldrh	r3, [r7, #12]
 8004d92:	81fb      	strh	r3, [r7, #14]
 8004d94:	e006      	b.n	8004da4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004d96:	89bb      	ldrh	r3, [r7, #12]
 8004d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d001      	beq.n	8004da4 <cmp_lfn+0xa0>
 8004da0:	2300      	movs	r3, #0
 8004da2:	e018      	b.n	8004dd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d9c8      	bls.n	8004d42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00b      	beq.n	8004dd4 <cmp_lfn+0xd0>
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <cmp_lfn+0xd0>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <cmp_lfn+0xd0>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004dd4:	2301      	movs	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd90      	pop	{r4, r7, pc}
 8004dde:	bf00      	nop
 8004de0:	08008410 	.word	0x08008410

08004de4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	460b      	mov	r3, r1
 8004df4:	71fb      	strb	r3, [r7, #7]
 8004df6:	4613      	mov	r3, r2
 8004df8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	330d      	adds	r3, #13
 8004dfe:	79ba      	ldrb	r2, [r7, #6]
 8004e00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	330b      	adds	r3, #11
 8004e06:	220f      	movs	r2, #15
 8004e08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	331a      	adds	r3, #26
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe ff36 	bl	8003c8a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	1e5a      	subs	r2, r3, #1
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	82fb      	strh	r3, [r7, #22]
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004e36:	8afb      	ldrh	r3, [r7, #22]
 8004e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <put_lfn+0x6c>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <put_lfn+0xcc>)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	4413      	add	r3, r2
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	8afa      	ldrh	r2, [r7, #22]
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe ff11 	bl	8003c8a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <put_lfn+0x90>
 8004e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d9da      	bls.n	8004e36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004e80:	8afb      	ldrh	r3, [r7, #22]
 8004e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d006      	beq.n	8004e98 <put_lfn+0xb4>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <put_lfn+0xbc>
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	79fa      	ldrb	r2, [r7, #7]
 8004ea4:	701a      	strb	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	08008410 	.word	0x08008410

08004eb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	; 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004ec2:	220b      	movs	r2, #11
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7fe ff26 	bl	8003d18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d92b      	bls.n	8004f2a <gen_numname+0x76>
		sr = seq;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004ed6:	e022      	b.n	8004f1e <gen_numname+0x6a>
			wc = *lfn++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee6:	e017      	b.n	8004f18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	005a      	lsls	r2, r3, #1
 8004eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <gen_numname+0x5e>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004f0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004f10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	3301      	adds	r3, #1
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d9e4      	bls.n	8004ee8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1d8      	bne.n	8004ed8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004f2a:	2307      	movs	r3, #7
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3330      	adds	r3, #48	; 0x30
 8004f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f42:	2b39      	cmp	r3, #57	; 0x39
 8004f44:	d904      	bls.n	8004f50 <gen_numname+0x9c>
 8004f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f4a:	3307      	adds	r3, #7
 8004f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f60:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1de      	bne.n	8004f2e <gen_numname+0x7a>
	ns[i] = '~';
 8004f70:	f107 0214 	add.w	r2, r7, #20
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	4413      	add	r3, r2
 8004f78:	227e      	movs	r2, #126	; 0x7e
 8004f7a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	e002      	b.n	8004f88 <gen_numname+0xd4>
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d205      	bcs.n	8004f9c <gen_numname+0xe8>
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d1f2      	bne.n	8004f82 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b07      	cmp	r3, #7
 8004fa0:	d808      	bhi.n	8004fb4 <gen_numname+0x100>
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fa8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004fac:	4413      	add	r3, r2
 8004fae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004fb2:	e000      	b.n	8004fb6 <gen_numname+0x102>
 8004fb4:	2120      	movs	r1, #32
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	627a      	str	r2, [r7, #36]	; 0x24
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	2b07      	cmp	r3, #7
 8004fc8:	d9e8      	bls.n	8004f9c <gen_numname+0xe8>
}
 8004fca:	bf00      	nop
 8004fcc:	bf00      	nop
 8004fce:	3730      	adds	r7, #48	; 0x30
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004fe0:	230b      	movs	r3, #11
 8004fe2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	0852      	lsrs	r2, r2, #1
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	6079      	str	r1, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ed      	bne.n	8004fe4 <sum_sfn+0x10>
	return sum;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005024:	2100      	movs	r1, #0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fc86 	bl	8004938 <dir_sdi>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <dir_find+0x24>
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	e0a9      	b.n	800518e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800503a:	23ff      	movs	r3, #255	; 0xff
 800503c:	753b      	strb	r3, [r7, #20]
 800503e:	7d3b      	ldrb	r3, [r7, #20]
 8005040:	757b      	strb	r3, [r7, #21]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f04f 32ff 	mov.w	r2, #4294967295
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4619      	mov	r1, r3
 8005050:	6938      	ldr	r0, [r7, #16]
 8005052:	f7ff f88f 	bl	8004174 <move_window>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 8090 	bne.w	8005182 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800506a:	7dbb      	ldrb	r3, [r7, #22]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <dir_find+0x60>
 8005070:	2304      	movs	r3, #4
 8005072:	75fb      	strb	r3, [r7, #23]
 8005074:	e08a      	b.n	800518c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	330b      	adds	r3, #11
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800508a:	7dbb      	ldrb	r3, [r7, #22]
 800508c:	2be5      	cmp	r3, #229	; 0xe5
 800508e:	d007      	beq.n	80050a0 <dir_find+0x8a>
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <dir_find+0x98>
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b0f      	cmp	r3, #15
 800509e:	d006      	beq.n	80050ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80050a0:	23ff      	movs	r3, #255	; 0xff
 80050a2:	757b      	strb	r3, [r7, #21]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f04f 32ff 	mov.w	r2, #4294967295
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
 80050ac:	e05e      	b.n	800516c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d136      	bne.n	8005122 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d154      	bne.n	800516c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80050c2:	7dbb      	ldrb	r3, [r7, #22]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	7b5b      	ldrb	r3, [r3, #13]
 80050d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80050d4:	7dbb      	ldrb	r3, [r7, #22]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	75bb      	strb	r3, [r7, #22]
 80050dc:	7dbb      	ldrb	r3, [r7, #22]
 80050de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80050e8:	7dba      	ldrb	r2, [r7, #22]
 80050ea:	7d7b      	ldrb	r3, [r7, #21]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d115      	bne.n	800511c <dir_find+0x106>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	330d      	adds	r3, #13
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	7d3a      	ldrb	r2, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d10e      	bne.n	800511c <dir_find+0x106>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7ff fdfb 	bl	8004d04 <cmp_lfn>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <dir_find+0x106>
 8005114:	7d7b      	ldrb	r3, [r7, #21]
 8005116:	3b01      	subs	r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e000      	b.n	800511e <dir_find+0x108>
 800511c:	23ff      	movs	r3, #255	; 0xff
 800511e:	757b      	strb	r3, [r7, #21]
 8005120:	e024      	b.n	800516c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005122:	7d7b      	ldrb	r3, [r7, #21]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <dir_find+0x126>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff51 	bl	8004fd4 <sum_sfn>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	7d3b      	ldrb	r3, [r7, #20]
 8005138:	4293      	cmp	r3, r2
 800513a:	d024      	beq.n	8005186 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <dir_find+0x14a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a18      	ldr	r0, [r3, #32]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	220b      	movs	r2, #11
 8005154:	4619      	mov	r1, r3
 8005156:	f7fe fe1b 	bl	8003d90 <mem_cmp>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d014      	beq.n	800518a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005160:	23ff      	movs	r3, #255	; 0xff
 8005162:	757b      	strb	r3, [r7, #21]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800516c:	2100      	movs	r1, #0
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fc6b 	bl	8004a4a <dir_next>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f43f af65 	beq.w	800504a <dir_find+0x34>
 8005180:	e004      	b.n	800518c <dir_find+0x176>
		if (res != FR_OK) break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800518a:	bf00      	nop

	return res;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <dir_register+0x20>
 80051b4:	2306      	movs	r3, #6
 80051b6:	e0e0      	b.n	800537a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80051b8:	2300      	movs	r3, #0
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
 80051bc:	e002      	b.n	80051c4 <dir_register+0x2c>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f4      	bne.n	80051be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80051da:	f107 030c 	add.w	r3, r7, #12
 80051de:	220c      	movs	r2, #12
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fd99 	bl	8003d18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d032      	beq.n	8005256 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2240      	movs	r2, #64	; 0x40
 80051f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80051f8:	2301      	movs	r3, #1
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	e016      	b.n	800522c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	f107 010c 	add.w	r1, r7, #12
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f7ff fe51 	bl	8004eb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff feff 	bl	8005016 <dir_find>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800521e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	3301      	adds	r3, #1
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	2b63      	cmp	r3, #99	; 0x63
 8005230:	d9e5      	bls.n	80051fe <dir_register+0x66>
 8005232:	e000      	b.n	8005236 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005234:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	2b64      	cmp	r3, #100	; 0x64
 800523a:	d101      	bne.n	8005240 <dir_register+0xa8>
 800523c:	2307      	movs	r3, #7
 800523e:	e09c      	b.n	800537a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005244:	2b04      	cmp	r3, #4
 8005246:	d002      	beq.n	800524e <dir_register+0xb6>
 8005248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800524c:	e095      	b.n	800537a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800524e:	7dfa      	ldrb	r2, [r7, #23]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <dir_register+0xd8>
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	330c      	adds	r3, #12
 8005264:	4a47      	ldr	r2, [pc, #284]	; (8005384 <dir_register+0x1ec>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3301      	adds	r3, #1
 800526e:	e000      	b.n	8005272 <dir_register+0xda>
 8005270:	2301      	movs	r3, #1
 8005272:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005274:	6a39      	ldr	r1, [r7, #32]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fcbd 	bl	8004bf6 <dir_alloc>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005286:	2b00      	cmp	r3, #0
 8005288:	d148      	bne.n	800531c <dir_register+0x184>
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	3b01      	subs	r3, #1
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d042      	beq.n	800531c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	015b      	lsls	r3, r3, #5
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fb48 	bl	8004938 <dir_sdi>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80052ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d132      	bne.n	800531c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fe8a 	bl	8004fd4 <sum_sfn>
 80052c0:	4603      	mov	r3, r0
 80052c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4619      	mov	r1, r3
 80052ca:	69f8      	ldr	r0, [r7, #28]
 80052cc:	f7fe ff52 	bl	8004174 <move_window>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80052d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11d      	bne.n	800531a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	6918      	ldr	r0, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a19      	ldr	r1, [r3, #32]
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	7efb      	ldrb	r3, [r7, #27]
 80052ec:	f7ff fd7a 	bl	8004de4 <put_lfn>
				fs->wflag = 1;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2201      	movs	r2, #1
 80052f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80052f6:	2100      	movs	r1, #0
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fba6 	bl	8004a4a <dir_next>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005308:	2b00      	cmp	r3, #0
 800530a:	d107      	bne.n	800531c <dir_register+0x184>
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	3b01      	subs	r3, #1
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1d5      	bne.n	80052c4 <dir_register+0x12c>
 8005318:	e000      	b.n	800531c <dir_register+0x184>
				if (res != FR_OK) break;
 800531a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800531c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005320:	2b00      	cmp	r3, #0
 8005322:	d128      	bne.n	8005376 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4619      	mov	r1, r3
 800532a:	69f8      	ldr	r0, [r7, #28]
 800532c:	f7fe ff22 	bl	8004174 <move_window>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11b      	bne.n	8005376 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	2220      	movs	r2, #32
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fd07 	bl	8003d5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a18      	ldr	r0, [r3, #32]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	220b      	movs	r2, #11
 8005356:	4619      	mov	r1, r3
 8005358:	f7fe fcde 	bl	8003d18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	330c      	adds	r3, #12
 8005368:	f002 0218 	and.w	r2, r2, #24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2201      	movs	r2, #1
 8005374:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800537a:	4618      	mov	r0, r3
 800537c:	3730      	adds	r7, #48	; 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	4ec4ec4f 	.word	0x4ec4ec4f

08005388 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	61ba      	str	r2, [r7, #24]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4413      	add	r3, r2
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80053b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053b8:	2b1f      	cmp	r3, #31
 80053ba:	d940      	bls.n	800543e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80053bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053be:	2b2f      	cmp	r3, #47	; 0x2f
 80053c0:	d006      	beq.n	80053d0 <create_name+0x48>
 80053c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053c4:	2b5c      	cmp	r3, #92	; 0x5c
 80053c6:	d110      	bne.n	80053ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80053c8:	e002      	b.n	80053d0 <create_name+0x48>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	4413      	add	r3, r2
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b2f      	cmp	r3, #47	; 0x2f
 80053da:	d0f6      	beq.n	80053ca <create_name+0x42>
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	4413      	add	r3, r2
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b5c      	cmp	r3, #92	; 0x5c
 80053e6:	d0f0      	beq.n	80053ca <create_name+0x42>
			break;
 80053e8:	e02a      	b.n	8005440 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2bfe      	cmp	r3, #254	; 0xfe
 80053ee:	d901      	bls.n	80053f4 <create_name+0x6c>
 80053f0:	2306      	movs	r3, #6
 80053f2:	e177      	b.n	80056e4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80053f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80053fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053fc:	2101      	movs	r1, #1
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fc92 	bl	8006d28 <ff_convert>
 8005404:	4603      	mov	r3, r0
 8005406:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <create_name+0x8a>
 800540e:	2306      	movs	r3, #6
 8005410:	e168      	b.n	80056e4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005414:	2b7f      	cmp	r3, #127	; 0x7f
 8005416:	d809      	bhi.n	800542c <create_name+0xa4>
 8005418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800541a:	4619      	mov	r1, r3
 800541c:	48b3      	ldr	r0, [pc, #716]	; (80056ec <create_name+0x364>)
 800541e:	f7fe fcde 	bl	8003dde <chk_chr>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <create_name+0xa4>
 8005428:	2306      	movs	r3, #6
 800542a:	e15b      	b.n	80056e4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	617a      	str	r2, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800543a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800543c:	e7b4      	b.n	80053a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800543e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	441a      	add	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800544a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544c:	2b1f      	cmp	r3, #31
 800544e:	d801      	bhi.n	8005454 <create_name+0xcc>
 8005450:	2304      	movs	r3, #4
 8005452:	e000      	b.n	8005456 <create_name+0xce>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800545a:	e011      	b.n	8005480 <create_name+0xf8>
		w = lfn[di - 1];
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005462:	3b01      	subs	r3, #1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800546e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005470:	2b20      	cmp	r3, #32
 8005472:	d002      	beq.n	800547a <create_name+0xf2>
 8005474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005476:	2b2e      	cmp	r3, #46	; 0x2e
 8005478:	d106      	bne.n	8005488 <create_name+0x100>
		di--;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3b01      	subs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ea      	bne.n	800545c <create_name+0xd4>
 8005486:	e000      	b.n	800548a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005488:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <create_name+0x118>
 800549c:	2306      	movs	r3, #6
 800549e:	e121      	b.n	80056e4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	220b      	movs	r2, #11
 80054a6:	2120      	movs	r1, #32
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fc56 	bl	8003d5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	e002      	b.n	80054ba <create_name+0x132>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d0f5      	beq.n	80054b4 <create_name+0x12c>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	2b2e      	cmp	r3, #46	; 0x2e
 80054d4:	d0ee      	beq.n	80054b4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <create_name+0x168>
 80054dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054e0:	f043 0303 	orr.w	r3, r3, #3
 80054e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80054e8:	e002      	b.n	80054f0 <create_name+0x168>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <create_name+0x182>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054fc:	3b01      	subs	r3, #1
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	2b2e      	cmp	r3, #46	; 0x2e
 8005508:	d1ef      	bne.n	80054ea <create_name+0x162>

	i = b = 0; ni = 8;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005510:	2300      	movs	r3, #0
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	2308      	movs	r3, #8
 8005516:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	61ba      	str	r2, [r7, #24]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8090 	beq.w	8005650 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005532:	2b20      	cmp	r3, #32
 8005534:	d006      	beq.n	8005544 <create_name+0x1bc>
 8005536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005538:	2b2e      	cmp	r3, #46	; 0x2e
 800553a:	d10a      	bne.n	8005552 <create_name+0x1ca>
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	429a      	cmp	r2, r3
 8005542:	d006      	beq.n	8005552 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005548:	f043 0303 	orr.w	r3, r3, #3
 800554c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005550:	e07d      	b.n	800564e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005552:	6a3a      	ldr	r2, [r7, #32]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	429a      	cmp	r2, r3
 8005558:	d203      	bcs.n	8005562 <create_name+0x1da>
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	429a      	cmp	r2, r3
 8005560:	d123      	bne.n	80055aa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b0b      	cmp	r3, #11
 8005566:	d106      	bne.n	8005576 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800556c:	f043 0303 	orr.w	r3, r3, #3
 8005570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005574:	e06f      	b.n	8005656 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	429a      	cmp	r2, r3
 800557c:	d005      	beq.n	800558a <create_name+0x202>
 800557e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005582:	f043 0303 	orr.w	r3, r3, #3
 8005586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	429a      	cmp	r2, r3
 8005590:	d860      	bhi.n	8005654 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	2308      	movs	r3, #8
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	230b      	movs	r3, #11
 800559c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800559e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80055a8:	e051      	b.n	800564e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80055aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ac:	2b7f      	cmp	r3, #127	; 0x7f
 80055ae:	d914      	bls.n	80055da <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80055b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fbb7 	bl	8006d28 <ff_convert>
 80055ba:	4603      	mov	r3, r0
 80055bc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80055be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <create_name+0x246>
 80055c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c6:	3b80      	subs	r3, #128	; 0x80
 80055c8:	4a49      	ldr	r2, [pc, #292]	; (80056f0 <create_name+0x368>)
 80055ca:	5cd3      	ldrb	r3, [r2, r3]
 80055cc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80055ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d2:	f043 0302 	orr.w	r3, r3, #2
 80055d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80055da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <create_name+0x268>
 80055e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e2:	4619      	mov	r1, r3
 80055e4:	4843      	ldr	r0, [pc, #268]	; (80056f4 <create_name+0x36c>)
 80055e6:	f7fe fbfa 	bl	8003dde <chk_chr>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80055f0:	235f      	movs	r3, #95	; 0x5f
 80055f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055f8:	f043 0303 	orr.w	r3, r3, #3
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005600:	e01b      	b.n	800563a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d909      	bls.n	800561c <create_name+0x294>
 8005608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800560a:	2b5a      	cmp	r3, #90	; 0x5a
 800560c:	d806      	bhi.n	800561c <create_name+0x294>
					b |= 2;
 800560e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800561a:	e00e      	b.n	800563a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800561c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800561e:	2b60      	cmp	r3, #96	; 0x60
 8005620:	d90b      	bls.n	800563a <create_name+0x2b2>
 8005622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005624:	2b7a      	cmp	r3, #122	; 0x7a
 8005626:	d808      	bhi.n	800563a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005628:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005636:	3b20      	subs	r3, #32
 8005638:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	623a      	str	r2, [r7, #32]
 8005640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005642:	b2d1      	uxtb	r1, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	460a      	mov	r2, r1
 800564a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800564e:	e763      	b.n	8005518 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8005654:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800565c:	2be5      	cmp	r3, #229	; 0xe5
 800565e:	d103      	bne.n	8005668 <create_name+0x2e0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2205      	movs	r2, #5
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d104      	bne.n	8005678 <create_name+0x2f0>
 800566e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d005      	beq.n	8005690 <create_name+0x308>
 8005684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b03      	cmp	r3, #3
 800568e:	d105      	bne.n	800569c <create_name+0x314>
 8005690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005694:	f043 0302 	orr.w	r3, r3, #2
 8005698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800569c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d117      	bne.n	80056d8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80056a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <create_name+0x338>
 80056b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b8:	f043 0310 	orr.w	r3, r3, #16
 80056bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80056c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d105      	bne.n	80056d8 <create_name+0x350>
 80056cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d0:	f043 0308 	orr.w	r3, r3, #8
 80056d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80056e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3728      	adds	r7, #40	; 0x28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	08008338 	.word	0x08008338
 80056f0:	08008390 	.word	0x08008390
 80056f4:	08008344 	.word	0x08008344

080056f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800570c:	e002      	b.n	8005714 <follow_path+0x1c>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b2f      	cmp	r3, #47	; 0x2f
 800571a:	d0f8      	beq.n	800570e <follow_path+0x16>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b5c      	cmp	r3, #92	; 0x5c
 8005722:	d0f4      	beq.n	800570e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b1f      	cmp	r3, #31
 8005730:	d80a      	bhi.n	8005748 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2280      	movs	r2, #128	; 0x80
 8005736:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800573a:	2100      	movs	r1, #0
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f8fb 	bl	8004938 <dir_sdi>
 8005742:	4603      	mov	r3, r0
 8005744:	75fb      	strb	r3, [r7, #23]
 8005746:	e048      	b.n	80057da <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005748:	463b      	mov	r3, r7
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fe1b 	bl	8005388 <create_name>
 8005752:	4603      	mov	r3, r0
 8005754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d139      	bne.n	80057d0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff fc5a 	bl	8005016 <dir_find>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800576c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b04      	cmp	r3, #4
 8005778:	d12c      	bne.n	80057d4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d127      	bne.n	80057d4 <follow_path+0xdc>
 8005784:	2305      	movs	r3, #5
 8005786:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005788:	e024      	b.n	80057d4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d121      	bne.n	80057d8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	799b      	ldrb	r3, [r3, #6]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80057a0:	2305      	movs	r3, #5
 80057a2:	75fb      	strb	r3, [r7, #23]
 80057a4:	e019      	b.n	80057da <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	8992      	ldrh	r2, [r2, #12]
 80057b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80057b8:	fb02 f200 	mul.w	r2, r2, r0
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	440b      	add	r3, r1
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff fa5e 	bl	8004c84 <ld_clust>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057ce:	e7bb      	b.n	8005748 <follow_path+0x50>
			if (res != FR_OK) break;
 80057d0:	bf00      	nop
 80057d2:	e002      	b.n	80057da <follow_path+0xe2>
				break;
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057d8:	bf00      	nop
			}
		}
	}

	return res;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d031      	beq.n	800585e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e002      	b.n	8005808 <get_ldnumber+0x24>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	3301      	adds	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b1f      	cmp	r3, #31
 800580e:	d903      	bls.n	8005818 <get_ldnumber+0x34>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b3a      	cmp	r3, #58	; 0x3a
 8005816:	d1f4      	bne.n	8005802 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b3a      	cmp	r3, #58	; 0x3a
 800581e:	d11c      	bne.n	800585a <get_ldnumber+0x76>
			tp = *path;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	3b30      	subs	r3, #48	; 0x30
 8005830:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b09      	cmp	r3, #9
 8005836:	d80e      	bhi.n	8005856 <get_ldnumber+0x72>
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	429a      	cmp	r2, r3
 800583e:	d10a      	bne.n	8005856 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <get_ldnumber+0x72>
					vol = (int)i;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	3301      	adds	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	e002      	b.n	8005860 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800585e:	693b      	ldr	r3, [r7, #16]
}
 8005860:	4618      	mov	r0, r3
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	70da      	strb	r2, [r3, #3]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fe fc74 	bl	8004174 <move_window>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <check_fs+0x2a>
 8005892:	2304      	movs	r3, #4
 8005894:	e038      	b.n	8005908 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3338      	adds	r3, #56	; 0x38
 800589a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe f9b8 	bl	8003c14 <ld_word>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <check_fs+0x48>
 80058b0:	2303      	movs	r3, #3
 80058b2:	e029      	b.n	8005908 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ba:	2be9      	cmp	r3, #233	; 0xe9
 80058bc:	d009      	beq.n	80058d2 <check_fs+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c4:	2beb      	cmp	r3, #235	; 0xeb
 80058c6:	d11e      	bne.n	8005906 <check_fs+0x9a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058ce:	2b90      	cmp	r3, #144	; 0x90
 80058d0:	d119      	bne.n	8005906 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3338      	adds	r3, #56	; 0x38
 80058d6:	3336      	adds	r3, #54	; 0x36
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe f9b3 	bl	8003c44 <ld_dword>
 80058de:	4603      	mov	r3, r0
 80058e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <check_fs+0xa4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <check_fs+0x82>
 80058ea:	2300      	movs	r3, #0
 80058ec:	e00c      	b.n	8005908 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3338      	adds	r3, #56	; 0x38
 80058f2:	3352      	adds	r3, #82	; 0x52
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe f9a5 	bl	8003c44 <ld_dword>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <check_fs+0xa8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <check_fs+0x9a>
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005906:	2302      	movs	r3, #2
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	00544146 	.word	0x00544146
 8005914:	33544146 	.word	0x33544146

08005918 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b096      	sub	sp, #88	; 0x58
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff ff59 	bl	80057e4 <get_ldnumber>
 8005932:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	da01      	bge.n	800593e <find_volume+0x26>
 800593a:	230b      	movs	r3, #11
 800593c:	e265      	b.n	8005e0a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800593e:	4ab0      	ldr	r2, [pc, #704]	; (8005c00 <find_volume+0x2e8>)
 8005940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <find_volume+0x3a>
 800594e:	230c      	movs	r3, #12
 8005950:	e25b      	b.n	8005e0a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005956:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01a      	beq.n	800599e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe f8b3 	bl	8003ad8 <disk_status>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <find_volume+0x82>
 800598a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005996:	230a      	movs	r3, #10
 8005998:	e237      	b.n	8005e0a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800599a:	2300      	movs	r3, #0
 800599c:	e235      	b.n	8005e0a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe f8ab 	bl	8003b0c <disk_initialize>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059c8:	2303      	movs	r3, #3
 80059ca:	e21e      	b.n	8005e0a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <find_volume+0xca>
 80059d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80059de:	230a      	movs	r3, #10
 80059e0:	e213      	b.n	8005e0a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	7858      	ldrb	r0, [r3, #1]
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	330c      	adds	r3, #12
 80059ea:	461a      	mov	r2, r3
 80059ec:	2102      	movs	r1, #2
 80059ee:	f7fe f8f3 	bl	8003bd8 <disk_ioctl>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <find_volume+0xe4>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e206      	b.n	8005e0a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	899b      	ldrh	r3, [r3, #12]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d80d      	bhi.n	8005a22 <find_volume+0x10a>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	899b      	ldrh	r3, [r3, #12]
 8005a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0e:	d308      	bcc.n	8005a22 <find_volume+0x10a>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	899b      	ldrh	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	899b      	ldrh	r3, [r3, #12]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <find_volume+0x10e>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e1f1      	b.n	8005e0a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a2e:	f7ff ff1d 	bl	800586c <check_fs>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d14b      	bne.n	8005ad8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a40:	2300      	movs	r3, #0
 8005a42:	643b      	str	r3, [r7, #64]	; 0x40
 8005a44:	e01f      	b.n	8005a86 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a54:	4413      	add	r3, r2
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <find_volume+0x158>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	3308      	adds	r3, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe f8ec 	bl	8003c44 <ld_dword>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	e000      	b.n	8005a72 <find_volume+0x15a>
 8005a70:	2200      	movs	r2, #0
 8005a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005a7a:	440b      	add	r3, r1
 8005a7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	3301      	adds	r3, #1
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d9dc      	bls.n	8005a46 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <find_volume+0x184>
 8005a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005aaa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <find_volume+0x1a6>
 8005ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ab6:	f7ff fed9 	bl	800586c <check_fs>
 8005aba:	4603      	mov	r3, r0
 8005abc:	e000      	b.n	8005ac0 <find_volume+0x1a8>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d905      	bls.n	8005ad8 <find_volume+0x1c0>
 8005acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ace:	3301      	adds	r3, #1
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d9e1      	bls.n	8005a9c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d101      	bne.n	8005ae4 <find_volume+0x1cc>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e192      	b.n	8005e0a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d901      	bls.n	8005af0 <find_volume+0x1d8>
 8005aec:	230d      	movs	r3, #13
 8005aee:	e18c      	b.n	8005e0a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	3338      	adds	r3, #56	; 0x38
 8005af4:	330b      	adds	r3, #11
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe f88c 	bl	8003c14 <ld_word>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	899b      	ldrh	r3, [r3, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <find_volume+0x1f4>
 8005b08:	230d      	movs	r3, #13
 8005b0a:	e17e      	b.n	8005e0a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	3338      	adds	r3, #56	; 0x38
 8005b10:	3316      	adds	r3, #22
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe f87e 	bl	8003c14 <ld_word>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <find_volume+0x218>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	3338      	adds	r3, #56	; 0x38
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe f88b 	bl	8003c44 <ld_dword>
 8005b2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b34:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d005      	beq.n	8005b54 <find_volume+0x23c>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	789b      	ldrb	r3, [r3, #2]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d001      	beq.n	8005b54 <find_volume+0x23c>
 8005b50:	230d      	movs	r3, #13
 8005b52:	e15a      	b.n	8005e0a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	789b      	ldrb	r3, [r3, #2]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	895b      	ldrh	r3, [r3, #10]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <find_volume+0x270>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	895b      	ldrh	r3, [r3, #10]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	895b      	ldrh	r3, [r3, #10]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <find_volume+0x274>
 8005b88:	230d      	movs	r3, #13
 8005b8a:	e13e      	b.n	8005e0a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	3338      	adds	r3, #56	; 0x38
 8005b90:	3311      	adds	r3, #17
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe f83e 	bl	8003c14 <ld_word>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	891b      	ldrh	r3, [r3, #8]
 8005ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba6:	8992      	ldrh	r2, [r2, #12]
 8005ba8:	0952      	lsrs	r2, r2, #5
 8005baa:	b292      	uxth	r2, r2
 8005bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bb0:	fb02 f201 	mul.w	r2, r2, r1
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <find_volume+0x2a8>
 8005bbc:	230d      	movs	r3, #13
 8005bbe:	e124      	b.n	8005e0a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	3338      	adds	r3, #56	; 0x38
 8005bc4:	3313      	adds	r3, #19
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe f824 	bl	8003c14 <ld_word>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <find_volume+0x2cc>
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	3338      	adds	r3, #56	; 0x38
 8005bda:	3320      	adds	r3, #32
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe f831 	bl	8003c44 <ld_dword>
 8005be2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	3338      	adds	r3, #56	; 0x38
 8005be8:	330e      	adds	r3, #14
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f812 	bl	8003c14 <ld_word>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <find_volume+0x2ec>
 8005bfa:	230d      	movs	r3, #13
 8005bfc:	e105      	b.n	8005e0a <find_volume+0x4f2>
 8005bfe:	bf00      	nop
 8005c00:	200004ac 	.word	0x200004ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c08:	4413      	add	r3, r2
 8005c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0c:	8911      	ldrh	r1, [r2, #8]
 8005c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c10:	8992      	ldrh	r2, [r2, #12]
 8005c12:	0952      	lsrs	r2, r2, #5
 8005c14:	b292      	uxth	r2, r2
 8005c16:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c1a:	b292      	uxth	r2, r2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d201      	bcs.n	8005c2c <find_volume+0x314>
 8005c28:	230d      	movs	r3, #13
 8005c2a:	e0ee      	b.n	8005e0a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c34:	8952      	ldrh	r2, [r2, #10]
 8005c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <find_volume+0x32e>
 8005c42:	230d      	movs	r3, #13
 8005c44:	e0e1      	b.n	8005e0a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005c46:	2303      	movs	r3, #3
 8005c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d802      	bhi.n	8005c5c <find_volume+0x344>
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <find_volume+0x354>
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	1c9a      	adds	r2, r3, #2
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7e:	441a      	add	r2, r3
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	441a      	add	r2, r3
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d11e      	bne.n	8005cd4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	3338      	adds	r3, #56	; 0x38
 8005c9a:	332a      	adds	r3, #42	; 0x2a
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fd ffb9 	bl	8003c14 <ld_word>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <find_volume+0x394>
 8005ca8:	230d      	movs	r3, #13
 8005caa:	e0ae      	b.n	8005e0a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	891b      	ldrh	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <find_volume+0x3a0>
 8005cb4:	230d      	movs	r3, #13
 8005cb6:	e0a8      	b.n	8005e0a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	3338      	adds	r3, #56	; 0x38
 8005cbc:	332c      	adds	r3, #44	; 0x2c
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd ffc0 	bl	8003c44 <ld_dword>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd2:	e01f      	b.n	8005d14 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	891b      	ldrh	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <find_volume+0x3c8>
 8005cdc:	230d      	movs	r3, #13
 8005cde:	e094      	b.n	8005e0a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	441a      	add	r2, r3
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d103      	bne.n	8005cfc <find_volume+0x3e4>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	e00a      	b.n	8005d12 <find_volume+0x3fa>
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	085a      	lsrs	r2, r3, #1
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	6a1a      	ldr	r2, [r3, #32]
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	899b      	ldrh	r3, [r3, #12]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	440b      	add	r3, r1
 8005d22:	3b01      	subs	r3, #1
 8005d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d26:	8989      	ldrh	r1, [r1, #12]
 8005d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d201      	bcs.n	8005d34 <find_volume+0x41c>
 8005d30:	230d      	movs	r3, #13
 8005d32:	e06a      	b.n	8005e0a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	619a      	str	r2, [r3, #24]
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d149      	bne.n	8005de6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	3338      	adds	r3, #56	; 0x38
 8005d56:	3330      	adds	r3, #48	; 0x30
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fd ff5b 	bl	8003c14 <ld_word>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d140      	bne.n	8005de6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d66:	3301      	adds	r3, #1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d6c:	f7fe fa02 	bl	8004174 <move_window>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d137      	bne.n	8005de6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2200      	movs	r2, #0
 8005d7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	3338      	adds	r3, #56	; 0x38
 8005d80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fd ff45 	bl	8003c14 <ld_word>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d127      	bne.n	8005de6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	3338      	adds	r3, #56	; 0x38
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd ff52 	bl	8003c44 <ld_dword>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <find_volume+0x4fc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d11e      	bne.n	8005de6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	3338      	adds	r3, #56	; 0x38
 8005dac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fd ff47 	bl	8003c44 <ld_dword>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <find_volume+0x500>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d113      	bne.n	8005de6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	3338      	adds	r3, #56	; 0x38
 8005dc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fd ff3c 	bl	8003c44 <ld_dword>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	3338      	adds	r3, #56	; 0x38
 8005dd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd ff32 	bl	8003c44 <ld_dword>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005dec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <find_volume+0x504>)
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <find_volume+0x504>)
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <find_volume+0x504>)
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e04:	f7fe f94e 	bl	80040a4 <clear_lock>
#endif
	return FR_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3758      	adds	r7, #88	; 0x58
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	41615252 	.word	0x41615252
 8005e18:	61417272 	.word	0x61417272
 8005e1c:	200004b0 	.word	0x200004b0

08005e20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e2a:	2309      	movs	r3, #9
 8005e2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01c      	beq.n	8005e6e <validate+0x4e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d018      	beq.n	8005e6e <validate+0x4e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d013      	beq.n	8005e6e <validate+0x4e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	889a      	ldrh	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	88db      	ldrh	r3, [r3, #6]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d10c      	bne.n	8005e6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd fe3c 	bl	8003ad8 <disk_status>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <validate+0x4e>
			res = FR_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <validate+0x5a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	e000      	b.n	8005e7c <validate+0x5c>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	6013      	str	r3, [r2, #0]
	return res;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e9e:	f107 0310 	add.w	r3, r7, #16
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fc9e 	bl	80057e4 <get_ldnumber>
 8005ea8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da01      	bge.n	8005eb4 <f_mount+0x28>
 8005eb0:	230b      	movs	r3, #11
 8005eb2:	e02b      	b.n	8005f0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <f_mount+0x88>)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ec4:	69b8      	ldr	r0, [r7, #24]
 8005ec6:	f7fe f8ed 	bl	80040a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	490d      	ldr	r1, [pc, #52]	; (8005f14 <f_mount+0x88>)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <f_mount+0x66>
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <f_mount+0x6a>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e00a      	b.n	8005f0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ef6:	f107 010c 	add.w	r1, r7, #12
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	2200      	movs	r2, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd09 	bl	8005918 <find_volume>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200004ac 	.word	0x200004ac

08005f18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	6018      	str	r0, [r3, #0]
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	6019      	str	r1, [r3, #0]
 8005f2c:	1dfb      	adds	r3, r7, #7
 8005f2e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <f_open+0x26>
 8005f3a:	2309      	movs	r3, #9
 8005f3c:	e242      	b.n	80063c4 <f_open+0x4ac>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f3e:	1dfb      	adds	r3, r7, #7
 8005f40:	1dfa      	adds	r2, r7, #7
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005f48:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8005f4a:	1dfb      	adds	r3, r7, #7
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fcde 	bl	8005918 <find_volume>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8005f62:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8221 	bne.w	80063ae <f_open+0x496>
		dj.obj.fs = fs;
 8005f6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005f70:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8005f74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005f78:	f107 0214 	add.w	r2, r7, #20
 8005f7c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fbb4 	bl	80056f8 <follow_path>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f96:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11b      	bne.n	8005fd6 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f9e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	da03      	bge.n	8005fb0 <f_open+0x98>
				res = FR_INVALID_NAME;
 8005fa8:	2306      	movs	r3, #6
 8005faa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8005fae:	e012      	b.n	8005fd6 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005fb0:	1dfb      	adds	r3, r7, #7
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd ff22 	bl	8003e14 <chk_lock>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005fd6:	1dfb      	adds	r3, r7, #7
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 031c 	and.w	r3, r3, #28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 809b 	beq.w	800611a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8005fe4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005fec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d10e      	bne.n	8006012 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ff4:	f7fd ff6a 	bl	8003ecc <enq_lock>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <f_open+0xf4>
 8005ffe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff f8c8 	bl	8005198 <dir_register>
 8006008:	4603      	mov	r3, r0
 800600a:	e000      	b.n	800600e <f_open+0xf6>
 800600c:	2312      	movs	r3, #18
 800600e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006012:	1dfb      	adds	r3, r7, #7
 8006014:	1dfa      	adds	r2, r7, #7
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	f042 0208 	orr.w	r2, r2, #8
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e012      	b.n	8006046 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006020:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006024:	f003 0311 	and.w	r3, r3, #17
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <f_open+0x11c>
					res = FR_DENIED;
 800602c:	2307      	movs	r3, #7
 800602e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006032:	e008      	b.n	8006046 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <f_open+0x12e>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006046:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 8082 	bne.w	8006154 <f_open+0x23c>
 8006050:	1dfb      	adds	r3, r7, #7
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d07b      	beq.n	8006154 <f_open+0x23c>
				dw = GET_FATTIME();
 800605c:	f7fd fcde 	bl	8003a1c <get_fattime>
 8006060:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006064:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006068:	330e      	adds	r3, #14
 800606a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd fe26 	bl	8003cc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006074:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006078:	3316      	adds	r3, #22
 800607a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fe1e 	bl	8003cc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006084:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006088:	330b      	adds	r3, #11
 800608a:	2220      	movs	r2, #32
 800608c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800608e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006092:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fdf3 	bl	8004c84 <ld_clust>
 800609e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80060a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80060a6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80060aa:	2200      	movs	r2, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fe08 	bl	8004cc2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80060b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80060b6:	331c      	adds	r3, #28
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fe00 	bl	8003cc0 <st_dword>
					fs->wflag = 1;
 80060c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80060c4:	2201      	movs	r2, #1
 80060c6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80060c8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d041      	beq.n	8006154 <f_open+0x23c>
						dw = fs->winsect;
 80060d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80060da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80060de:	2200      	movs	r2, #0
 80060e0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe faf2 	bl	80046ce <remove_chain>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80060f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d12d      	bne.n	8006154 <f_open+0x23c>
							res = move_window(fs, dw);
 80060f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80060fc:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe f837 	bl	8004174 <move_window>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800610c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006110:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8006114:	3a01      	subs	r2, #1
 8006116:	615a      	str	r2, [r3, #20]
 8006118:	e01c      	b.n	8006154 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800611a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800611e:	2b00      	cmp	r3, #0
 8006120:	d118      	bne.n	8006154 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006122:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <f_open+0x21e>
					res = FR_NO_FILE;
 800612e:	2304      	movs	r3, #4
 8006130:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006134:	e00e      	b.n	8006154 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006136:	1dfb      	adds	r3, r7, #7
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <f_open+0x23c>
 8006142:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <f_open+0x23c>
						res = FR_DENIED;
 800614e:	2307      	movs	r3, #7
 8006150:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8006154:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006158:	2b00      	cmp	r3, #0
 800615a:	d136      	bne.n	80061ca <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800615c:	1dfb      	adds	r3, r7, #7
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8006168:	1dfb      	adds	r3, r7, #7
 800616a:	1dfa      	adds	r2, r7, #7
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006172:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006174:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006182:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800618e:	1dfb      	adds	r3, r7, #7
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fd feb1 	bl	8003f10 <inc_lock>
 80061ae:	4602      	mov	r2, r0
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80061b8:	f107 030c 	add.w	r3, r7, #12
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <f_open+0x2b2>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80061ca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 80ed 	bne.w	80063ae <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80061d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80061d8:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fd50 	bl	8004c84 <ld_clust>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80061ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80061f2:	331c      	adds	r3, #28
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fd fd25 	bl	8003c44 <ld_dword>
 80061fa:	4602      	mov	r2, r0
 80061fc:	f107 030c 	add.w	r3, r7, #12
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006204:	f107 030c 	add.w	r3, r7, #12
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800620e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800621a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800621e:	88da      	ldrh	r2, [r3, #6]
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	1dfa      	adds	r2, r7, #7
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006234:	f107 030c 	add.w	r3, r7, #12
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006252:	f107 030c 	add.w	r3, r7, #12
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3330      	adds	r3, #48	; 0x30
 800625a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd fd7a 	bl	8003d5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 809d 	beq.w	80063ae <f_open+0x496>
 8006274:	f107 030c 	add.w	r3, r7, #12
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8096 	beq.w	80063ae <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006282:	f107 030c 	add.w	r3, r7, #12
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006292:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006296:	895b      	ldrh	r3, [r3, #10]
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800629e:	899b      	ldrh	r3, [r3, #12]
 80062a0:	fb03 f302 	mul.w	r3, r3, r2
 80062a4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80062a8:	f107 030c 	add.w	r3, r7, #12
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062b4:	f107 030c 	add.w	r3, r7, #12
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80062c0:	e01f      	b.n	8006302 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 80062c2:	f107 030c 	add.w	r3, r7, #12
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe f80e 	bl	80042ee <get_fat>
 80062d2:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80062d6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d802      	bhi.n	80062e4 <f_open+0x3cc>
 80062de:	2302      	movs	r3, #2
 80062e0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80062e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d102      	bne.n	80062f4 <f_open+0x3dc>
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062f4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80062f8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006302:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <f_open+0x3fe>
 800630a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800630e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006312:	429a      	cmp	r2, r3
 8006314:	d8d5      	bhi.n	80062c2 <f_open+0x3aa>
				}
				fp->clust = clst;
 8006316:	f107 030c 	add.w	r3, r7, #12
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8006320:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006322:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006326:	2b00      	cmp	r3, #0
 8006328:	d141      	bne.n	80063ae <f_open+0x496>
 800632a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800632e:	899b      	ldrh	r3, [r3, #12]
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006336:	fbb3 f1f2 	udiv	r1, r3, r2
 800633a:	fb02 f201 	mul.w	r2, r2, r1
 800633e:	1a9b      	subs	r3, r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d034      	beq.n	80063ae <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006344:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006348:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd ffaf 	bl	80042b0 <clust2sect>
 8006352:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8006356:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <f_open+0x44e>
						res = FR_INT_ERR;
 800635e:	2302      	movs	r3, #2
 8006360:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006364:	e023      	b.n	80063ae <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006366:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800636a:	899b      	ldrh	r3, [r3, #12]
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006372:	fbb3 f2f2 	udiv	r2, r3, r2
 8006376:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800637a:	441a      	add	r2, r3
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006384:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006388:	7858      	ldrb	r0, [r3, #1]
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	2301      	movs	r3, #1
 800639e:	f7fd fbdb 	bl	8003b58 <disk_read>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <f_open+0x496>
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063ae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <f_open+0x4a8>
 80063b6:	f107 030c 	add.w	r3, r7, #12
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80063c0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08e      	sub	sp, #56	; 0x38
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f107 0214 	add.w	r2, r7, #20
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fd16 	bl	8005e20 <validate>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80063fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <f_read+0x44>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	7d5b      	ldrb	r3, [r3, #21]
 8006406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800640a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <f_read+0x4a>
 8006412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006416:	e135      	b.n	8006684 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	7d1b      	ldrb	r3, [r3, #20]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <f_read+0x5a>
 8006424:	2307      	movs	r3, #7
 8006426:	e12d      	b.n	8006684 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	429a      	cmp	r2, r3
 800643a:	f240 811e 	bls.w	800667a <f_read+0x2ac>
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006442:	e11a      	b.n	800667a <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	8992      	ldrh	r2, [r2, #12]
 800644c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006450:	fb02 f201 	mul.w	r2, r2, r1
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 80d5 	bne.w	8006606 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	8992      	ldrh	r2, [r2, #12]
 8006464:	fbb3 f3f2 	udiv	r3, r3, r2
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	8952      	ldrh	r2, [r2, #10]
 800646c:	3a01      	subs	r2, #1
 800646e:	4013      	ands	r3, r2
 8006470:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d12f      	bne.n	80064d8 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
 8006486:	e013      	b.n	80064b0 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7fe fa16 	bl	80048c8 <clmt_clust>
 800649c:	6338      	str	r0, [r7, #48]	; 0x30
 800649e:	e007      	b.n	80064b0 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fd ff20 	bl	80042ee <get_fat>
 80064ae:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d804      	bhi.n	80064c0 <f_read+0xf2>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2202      	movs	r2, #2
 80064ba:	755a      	strb	r2, [r3, #21]
 80064bc:	2302      	movs	r3, #2
 80064be:	e0e1      	b.n	8006684 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d104      	bne.n	80064d2 <f_read+0x104>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	755a      	strb	r2, [r3, #21]
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0d8      	b.n	8006684 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fd fee5 	bl	80042b0 <clust2sect>
 80064e6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <f_read+0x12a>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2202      	movs	r2, #2
 80064f2:	755a      	strb	r2, [r3, #21]
 80064f4:	2302      	movs	r3, #2
 80064f6:	e0c5      	b.n	8006684 <f_read+0x2b6>
			sect += csect;
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	899b      	ldrh	r3, [r3, #12]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	fbb3 f3f2 	udiv	r3, r3, r2
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d041      	beq.n	8006598 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	4413      	add	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	8952      	ldrh	r2, [r2, #10]
 800651e:	4293      	cmp	r3, r2
 8006520:	d905      	bls.n	800652e <f_read+0x160>
					cc = fs->csize - csect;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	895b      	ldrh	r3, [r3, #10]
 8006526:	461a      	mov	r2, r3
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	7858      	ldrb	r0, [r3, #1]
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006538:	f7fd fb0e 	bl	8003b58 <disk_read>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <f_read+0x17e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	755a      	strb	r2, [r3, #21]
 8006548:	2301      	movs	r3, #1
 800654a:	e09b      	b.n	8006684 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7d1b      	ldrb	r3, [r3, #20]
 8006550:	b25b      	sxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	da18      	bge.n	8006588 <f_read+0x1ba>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006560:	429a      	cmp	r2, r3
 8006562:	d911      	bls.n	8006588 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	8992      	ldrh	r2, [r2, #12]
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	18d0      	adds	r0, r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	899b      	ldrh	r3, [r3, #12]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fd fbc8 	bl	8003d18 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	899b      	ldrh	r3, [r3, #12]
 800658c:	461a      	mov	r2, r3
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006596:	e05c      	b.n	8006652 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d02e      	beq.n	8006600 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	7d1b      	ldrb	r3, [r3, #20]
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da18      	bge.n	80065de <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	7858      	ldrb	r0, [r3, #1]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	2301      	movs	r3, #1
 80065bc:	f7fd faec 	bl	8003b98 <disk_write>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <f_read+0x202>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	755a      	strb	r2, [r3, #21]
 80065cc:	2301      	movs	r3, #1
 80065ce:	e059      	b.n	8006684 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	7d1b      	ldrb	r3, [r3, #20]
 80065d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	7858      	ldrb	r0, [r3, #1]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065e8:	2301      	movs	r3, #1
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	f7fd fab4 	bl	8003b58 <disk_read>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <f_read+0x232>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	755a      	strb	r2, [r3, #21]
 80065fc:	2301      	movs	r3, #1
 80065fe:	e041      	b.n	8006684 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	899b      	ldrh	r3, [r3, #12]
 800660a:	4618      	mov	r0, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	8992      	ldrh	r2, [r2, #12]
 8006614:	fbb3 f1f2 	udiv	r1, r3, r2
 8006618:	fb02 f201 	mul.w	r2, r2, r1
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	1ac3      	subs	r3, r0, r3
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d901      	bls.n	800662e <f_read+0x260>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	8992      	ldrh	r2, [r2, #12]
 800663c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006640:	fb02 f200 	mul.w	r2, r2, r0
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	440b      	add	r3, r1
 8006648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664a:	4619      	mov	r1, r3
 800664c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800664e:	f7fd fb63 	bl	8003d18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	4413      	add	r3, r2
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	619a      	str	r2, [r3, #24]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	441a      	add	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f47f aee1 	bne.w	8006444 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3738      	adds	r7, #56	; 0x38
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08c      	sub	sp, #48	; 0x30
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f107 0210 	add.w	r2, r7, #16
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fbb7 	bl	8005e20 <validate>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d107      	bne.n	80066d0 <f_write+0x44>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	7d5b      	ldrb	r3, [r3, #21]
 80066c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <f_write+0x4a>
 80066d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066d4:	e16a      	b.n	80069ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	7d1b      	ldrb	r3, [r3, #20]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <f_write+0x5a>
 80066e2:	2307      	movs	r3, #7
 80066e4:	e162      	b.n	80069ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	f080 814c 	bcs.w	8006990 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006700:	e146      	b.n	8006990 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	8992      	ldrh	r2, [r2, #12]
 800670a:	fbb3 f1f2 	udiv	r1, r3, r2
 800670e:	fb02 f201 	mul.w	r2, r2, r1
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 80f1 	bne.w	80068fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	8992      	ldrh	r2, [r2, #12]
 8006722:	fbb3 f3f2 	udiv	r3, r3, r2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	8952      	ldrh	r2, [r2, #10]
 800672a:	3a01      	subs	r2, #1
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d143      	bne.n	80067be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11a      	bne.n	8006780 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2100      	movs	r1, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe f822 	bl	8004798 <create_chain>
 8006754:	62b8      	str	r0, [r7, #40]	; 0x28
 8006756:	e013      	b.n	8006780 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	4619      	mov	r1, r3
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7fe f8ae 	bl	80048c8 <clmt_clust>
 800676c:	62b8      	str	r0, [r7, #40]	; 0x28
 800676e:	e007      	b.n	8006780 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe f80d 	bl	8004798 <create_chain>
 800677e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8109 	beq.w	800699a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b01      	cmp	r3, #1
 800678c:	d104      	bne.n	8006798 <f_write+0x10c>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2202      	movs	r2, #2
 8006792:	755a      	strb	r2, [r3, #21]
 8006794:	2302      	movs	r3, #2
 8006796:	e109      	b.n	80069ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d104      	bne.n	80067aa <f_write+0x11e>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	755a      	strb	r2, [r3, #21]
 80067a6:	2301      	movs	r3, #1
 80067a8:	e100      	b.n	80069ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <f_write+0x132>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	7d1b      	ldrb	r3, [r3, #20]
 80067c2:	b25b      	sxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da18      	bge.n	80067fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	7858      	ldrb	r0, [r3, #1]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	2301      	movs	r3, #1
 80067d8:	f7fd f9de 	bl	8003b98 <disk_write>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <f_write+0x160>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	755a      	strb	r2, [r3, #21]
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0df      	b.n	80069ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	7d1b      	ldrb	r3, [r3, #20]
 80067f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fd fd54 	bl	80042b0 <clust2sect>
 8006808:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <f_write+0x18e>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	755a      	strb	r2, [r3, #21]
 8006816:	2302      	movs	r3, #2
 8006818:	e0c8      	b.n	80069ac <f_write+0x320>
			sect += csect;
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	4413      	add	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	899b      	ldrh	r3, [r3, #12]
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	fbb3 f3f2 	udiv	r3, r3, r2
 800682e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d043      	beq.n	80068be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	4413      	add	r3, r2
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	8952      	ldrh	r2, [r2, #10]
 8006840:	4293      	cmp	r3, r2
 8006842:	d905      	bls.n	8006850 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	895b      	ldrh	r3, [r3, #10]
 8006848:	461a      	mov	r2, r3
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	7858      	ldrb	r0, [r3, #1]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	f7fd f99d 	bl	8003b98 <disk_write>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <f_write+0x1e2>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	755a      	strb	r2, [r3, #21]
 800686a:	2301      	movs	r3, #1
 800686c:	e09e      	b.n	80069ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	429a      	cmp	r2, r3
 800687a:	d918      	bls.n	80068ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	8992      	ldrh	r2, [r2, #12]
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	18d1      	adds	r1, r2, r3
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	899b      	ldrh	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fd fa3c 	bl	8003d18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7d1b      	ldrb	r3, [r3, #20]
 80068a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	899b      	ldrh	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80068bc:	e04b      	b.n	8006956 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d016      	beq.n	80068f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d210      	bcs.n	80068f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	7858      	ldrb	r0, [r3, #1]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068de:	2301      	movs	r3, #1
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	f7fd f939 	bl	8003b58 <disk_read>
 80068e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	755a      	strb	r2, [r3, #21]
 80068f2:	2301      	movs	r3, #1
 80068f4:	e05a      	b.n	80069ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	899b      	ldrh	r3, [r3, #12]
 8006900:	4618      	mov	r0, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	fbb3 f1f2 	udiv	r1, r3, r2
 800690e:	fb02 f201 	mul.w	r2, r2, r1
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	1ac3      	subs	r3, r0, r3
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d901      	bls.n	8006924 <f_write+0x298>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	8992      	ldrh	r2, [r2, #12]
 8006932:	fbb3 f0f2 	udiv	r0, r3, r2
 8006936:	fb02 f200 	mul.w	r2, r2, r0
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	440b      	add	r3, r1
 800693e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006940:	69f9      	ldr	r1, [r7, #28]
 8006942:	4618      	mov	r0, r3
 8006944:	f7fd f9e8 	bl	8003d18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	7d1b      	ldrb	r3, [r3, #20]
 800694c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	4413      	add	r3, r2
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	619a      	str	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	429a      	cmp	r2, r3
 8006974:	bf38      	it	cc
 8006976:	461a      	movcc	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	441a      	add	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f47f aeb5 	bne.w	8006702 <f_write+0x76>
 8006998:	e000      	b.n	800699c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800699a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	7d1b      	ldrb	r3, [r3, #20]
 80069a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3730      	adds	r7, #48	; 0x30
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f107 0208 	add.w	r2, r7, #8
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fa2b 	bl	8005e20 <validate>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d168      	bne.n	8006aa6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7d1b      	ldrb	r3, [r3, #20]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d062      	beq.n	8006aa6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7d1b      	ldrb	r3, [r3, #20]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da15      	bge.n	8006a16 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	7858      	ldrb	r0, [r3, #1]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	2301      	movs	r3, #1
 80069fa:	f7fd f8cd 	bl	8003b98 <disk_write>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <f_sync+0x54>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e04f      	b.n	8006aa8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7d1b      	ldrb	r3, [r3, #20]
 8006a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006a16:	f7fd f801 	bl	8003a1c <get_fattime>
 8006a1a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fd fba5 	bl	8004174 <move_window>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d138      	bne.n	8006aa6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	330b      	adds	r3, #11
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	330b      	adds	r3, #11
 8006a44:	f042 0220 	orr.w	r2, r2, #32
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	461a      	mov	r2, r3
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	f7fe f933 	bl	8004cc2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f103 021c 	add.w	r2, r3, #28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7fd f929 	bl	8003cc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3316      	adds	r3, #22
 8006a72:	6939      	ldr	r1, [r7, #16]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fd f923 	bl	8003cc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3312      	adds	r3, #18
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fd f902 	bl	8003c8a <st_word>
					fs->wflag = 1;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fd fb9e 	bl	80041d0 <sync_fs>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7d1b      	ldrb	r3, [r3, #20]
 8006a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff7b 	bl	80069b4 <f_sync>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d118      	bne.n	8006afa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f107 0208 	add.w	r2, r7, #8
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff f9a5 	bl	8005e20 <validate>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10c      	bne.n	8006afa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fd faa1 	bl	800402c <dec_lock>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b092      	sub	sp, #72	; 0x48
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006b10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fefc 	bl	8005918 <find_volume>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 8099 	bne.w	8006c62 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	3b02      	subs	r3, #2
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d804      	bhi.n	8006b4e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e089      	b.n	8006c62 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d128      	bne.n	8006bac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006b62:	f107 0314 	add.w	r3, r7, #20
 8006b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd fbc0 	bl	80042ee <get_fat>
 8006b6e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d103      	bne.n	8006b80 <f_getfree+0x7c>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b7e:	e063      	b.n	8006c48 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d103      	bne.n	8006b8e <f_getfree+0x8a>
 8006b86:	2302      	movs	r3, #2
 8006b88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b8c:	e05c      	b.n	8006c48 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <f_getfree+0x96>
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	3301      	adds	r3, #1
 8006b98:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d3db      	bcc.n	8006b62 <f_getfree+0x5e>
 8006baa:	e04d      	b.n	8006c48 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d113      	bne.n	8006bee <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7fd fad0 	bl	8004174 <move_window>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006bda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d131      	bne.n	8006c46 <f_getfree+0x142>
							p = fs->win;
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	3338      	adds	r3, #56	; 0x38
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	899b      	ldrh	r3, [r3, #12]
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d10f      	bne.n	8006c16 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf8:	f7fd f80c 	bl	8003c14 <ld_word>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <f_getfree+0x104>
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	3301      	adds	r3, #1
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	3b02      	subs	r3, #2
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	e010      	b.n	8006c38 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c18:	f7fd f814 	bl	8003c44 <ld_dword>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <f_getfree+0x128>
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	3301      	adds	r3, #1
 8006c2a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	3304      	adds	r3, #4
 8006c30:	633b      	str	r3, [r7, #48]	; 0x30
 8006c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c34:	3b04      	subs	r3, #4
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1bd      	bne.n	8006bc0 <f_getfree+0xbc>
 8006c44:	e000      	b.n	8006c48 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006c46:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c4c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c52:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	791a      	ldrb	r2, [r3, #4]
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006c62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3748      	adds	r7, #72	; 0x48
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c86:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006c88:	7a5b      	ldrb	r3, [r3, #9]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d131      	bne.n	8006cf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c90:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006c92:	7a5b      	ldrb	r3, [r3, #9]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c9e:	4b19      	ldr	r3, [pc, #100]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006ca0:	7a5b      	ldrb	r3, [r3, #9]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006cb0:	7a5b      	ldrb	r3, [r3, #9]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	79fa      	ldrb	r2, [r7, #7]
 8006cbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006cc0:	7a5b      	ldrb	r3, [r3, #9]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	b2d1      	uxtb	r1, r2
 8006cc8:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <FATFS_LinkDriverEx+0x94>)
 8006cca:	7251      	strb	r1, [r2, #9]
 8006ccc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cce:	7dbb      	ldrb	r3, [r7, #22]
 8006cd0:	3330      	adds	r3, #48	; 0x30
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	223a      	movs	r2, #58	; 0x3a
 8006cde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	222f      	movs	r2, #47	; 0x2f
 8006ce6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3303      	adds	r3, #3
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	200004d4 	.word	0x200004d4

08006d08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006d12:	2200      	movs	r2, #0
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ffaa 	bl	8006c70 <FATFS_LinkDriverEx>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	2b7f      	cmp	r3, #127	; 0x7f
 8006d38:	d802      	bhi.n	8006d40 <ff_convert+0x18>
		c = chr;
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	e025      	b.n	8006d8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2bff      	cmp	r3, #255	; 0xff
 8006d4a:	d805      	bhi.n	8006d58 <ff_convert+0x30>
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	3b80      	subs	r3, #128	; 0x80
 8006d50:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <ff_convert+0x74>)
 8006d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d56:	e000      	b.n	8006d5a <ff_convert+0x32>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	81fb      	strh	r3, [r7, #14]
 8006d5c:	e016      	b.n	8006d8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006d5e:	2300      	movs	r3, #0
 8006d60:	81fb      	strh	r3, [r7, #14]
 8006d62:	e009      	b.n	8006d78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006d64:	89fb      	ldrh	r3, [r7, #14]
 8006d66:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <ff_convert+0x74>)
 8006d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d006      	beq.n	8006d80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006d72:	89fb      	ldrh	r3, [r7, #14]
 8006d74:	3301      	adds	r3, #1
 8006d76:	81fb      	strh	r3, [r7, #14]
 8006d78:	89fb      	ldrh	r3, [r7, #14]
 8006d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7c:	d9f2      	bls.n	8006d64 <ff_convert+0x3c>
 8006d7e:	e000      	b.n	8006d82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006d80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006d82:	89fb      	ldrh	r3, [r7, #14]
 8006d84:	3380      	adds	r3, #128	; 0x80
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	08008420 	.word	0x08008420

08006da0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	d201      	bcs.n	8006db6 <ff_wtoupper+0x16>
 8006db2:	4b3e      	ldr	r3, [pc, #248]	; (8006eac <ff_wtoupper+0x10c>)
 8006db4:	e000      	b.n	8006db8 <ff_wtoupper+0x18>
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <ff_wtoupper+0x110>)
 8006db8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1c9a      	adds	r2, r3, #2
 8006dbe:	617a      	str	r2, [r7, #20]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006dc4:	8a7b      	ldrh	r3, [r7, #18]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d068      	beq.n	8006e9c <ff_wtoupper+0xfc>
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	8a7b      	ldrh	r3, [r7, #18]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d364      	bcc.n	8006e9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	617a      	str	r2, [r7, #20]
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	823b      	strh	r3, [r7, #16]
 8006ddc:	8a3b      	ldrh	r3, [r7, #16]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	81fb      	strh	r3, [r7, #14]
 8006de2:	8a3b      	ldrh	r3, [r7, #16]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	8a79      	ldrh	r1, [r7, #18]
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	440b      	add	r3, r1
 8006df0:	429a      	cmp	r2, r3
 8006df2:	da49      	bge.n	8006e88 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006df4:	89fb      	ldrh	r3, [r7, #14]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d84f      	bhi.n	8006e9a <ff_wtoupper+0xfa>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <ff_wtoupper+0x60>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e37 	.word	0x08006e37
 8006e08:	08006e4d 	.word	0x08006e4d
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e5d 	.word	0x08006e5d
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e7d 	.word	0x08006e7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	8a7b      	ldrh	r3, [r7, #18]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	80fb      	strh	r3, [r7, #6]
 8006e34:	e027      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	8a7b      	ldrh	r3, [r7, #18]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	80fb      	strh	r3, [r7, #6]
 8006e4a:	e01c      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	3b10      	subs	r3, #16
 8006e50:	80fb      	strh	r3, [r7, #6]
 8006e52:	e018      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	3b20      	subs	r3, #32
 8006e58:	80fb      	strh	r3, [r7, #6]
 8006e5a:	e014      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	3b30      	subs	r3, #48	; 0x30
 8006e60:	80fb      	strh	r3, [r7, #6]
 8006e62:	e010      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	3b1a      	subs	r3, #26
 8006e68:	80fb      	strh	r3, [r7, #6]
 8006e6a:	e00c      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	80fb      	strh	r3, [r7, #6]
 8006e72:	e008      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	3b50      	subs	r3, #80	; 0x50
 8006e78:	80fb      	strh	r3, [r7, #6]
 8006e7a:	e004      	b.n	8006e86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006e82:	80fb      	strh	r3, [r7, #6]
 8006e84:	bf00      	nop
			}
			break;
 8006e86:	e008      	b.n	8006e9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006e88:	89fb      	ldrh	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d195      	bne.n	8006dba <ff_wtoupper+0x1a>
 8006e8e:	8a3b      	ldrh	r3, [r7, #16]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4413      	add	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006e98:	e78f      	b.n	8006dba <ff_wtoupper+0x1a>
			break;
 8006e9a:	bf00      	nop
	}

	return chr;
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	08008520 	.word	0x08008520
 8006eb0:	08008714 	.word	0x08008714

08006eb4 <__errno>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <__errno+0x8>)
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000024 	.word	0x20000024

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f001 f9ce 	bl	8008274 <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	08008870 	.word	0x08008870
 8006efc:	08008870 	.word	0x08008870
 8006f00:	08008870 	.word	0x08008870
 8006f04:	08008874 	.word	0x08008874

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <iprintf>:
 8006f34:	b40f      	push	{r0, r1, r2, r3}
 8006f36:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <iprintf+0x2c>)
 8006f38:	b513      	push	{r0, r1, r4, lr}
 8006f3a:	681c      	ldr	r4, [r3, #0]
 8006f3c:	b124      	cbz	r4, 8006f48 <iprintf+0x14>
 8006f3e:	69a3      	ldr	r3, [r4, #24]
 8006f40:	b913      	cbnz	r3, 8006f48 <iprintf+0x14>
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fa8e 	bl	8007464 <__sinit>
 8006f48:	ab05      	add	r3, sp, #20
 8006f4a:	9a04      	ldr	r2, [sp, #16]
 8006f4c:	68a1      	ldr	r1, [r4, #8]
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fdbb 	bl	8007acc <_vfiprintf_r>
 8006f56:	b002      	add	sp, #8
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	b004      	add	sp, #16
 8006f5e:	4770      	bx	lr
 8006f60:	20000024 	.word	0x20000024

08006f64 <_puts_r>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	460e      	mov	r6, r1
 8006f68:	4605      	mov	r5, r0
 8006f6a:	b118      	cbz	r0, 8006f74 <_puts_r+0x10>
 8006f6c:	6983      	ldr	r3, [r0, #24]
 8006f6e:	b90b      	cbnz	r3, 8006f74 <_puts_r+0x10>
 8006f70:	f000 fa78 	bl	8007464 <__sinit>
 8006f74:	69ab      	ldr	r3, [r5, #24]
 8006f76:	68ac      	ldr	r4, [r5, #8]
 8006f78:	b913      	cbnz	r3, 8006f80 <_puts_r+0x1c>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 fa72 	bl	8007464 <__sinit>
 8006f80:	4b2c      	ldr	r3, [pc, #176]	; (8007034 <_puts_r+0xd0>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d120      	bne.n	8006fc8 <_puts_r+0x64>
 8006f86:	686c      	ldr	r4, [r5, #4]
 8006f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8a:	07db      	lsls	r3, r3, #31
 8006f8c:	d405      	bmi.n	8006f9a <_puts_r+0x36>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	0598      	lsls	r0, r3, #22
 8006f92:	d402      	bmi.n	8006f9a <_puts_r+0x36>
 8006f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f96:	f000 fb03 	bl	80075a0 <__retarget_lock_acquire_recursive>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	0719      	lsls	r1, r3, #28
 8006f9e:	d51d      	bpl.n	8006fdc <_puts_r+0x78>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	b1db      	cbz	r3, 8006fdc <_puts_r+0x78>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fac:	3b01      	subs	r3, #1
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	bb39      	cbnz	r1, 8007002 <_puts_r+0x9e>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da38      	bge.n	8007028 <_puts_r+0xc4>
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	210a      	movs	r1, #10
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f878 	bl	80070b0 <__swbuf_r>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d011      	beq.n	8006fe8 <_puts_r+0x84>
 8006fc4:	250a      	movs	r5, #10
 8006fc6:	e011      	b.n	8006fec <_puts_r+0x88>
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <_puts_r+0xd4>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <_puts_r+0x6e>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7da      	b.n	8006f88 <_puts_r+0x24>
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	; (800703c <_puts_r+0xd8>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	68ec      	ldreq	r4, [r5, #12]
 8006fda:	e7d5      	b.n	8006f88 <_puts_r+0x24>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 f8b8 	bl	8007154 <__swsetup_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0dd      	beq.n	8006fa4 <_puts_r+0x40>
 8006fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fee:	07da      	lsls	r2, r3, #31
 8006ff0:	d405      	bmi.n	8006ffe <_puts_r+0x9a>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_puts_r+0x9a>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffa:	f000 fad2 	bl	80075a2 <__retarget_lock_release_recursive>
 8006ffe:	4628      	mov	r0, r5
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	2b00      	cmp	r3, #0
 8007004:	da04      	bge.n	8007010 <_puts_r+0xac>
 8007006:	69a2      	ldr	r2, [r4, #24]
 8007008:	429a      	cmp	r2, r3
 800700a:	dc06      	bgt.n	800701a <_puts_r+0xb6>
 800700c:	290a      	cmp	r1, #10
 800700e:	d004      	beq.n	800701a <_puts_r+0xb6>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	7019      	strb	r1, [r3, #0]
 8007018:	e7c5      	b.n	8006fa6 <_puts_r+0x42>
 800701a:	4622      	mov	r2, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 f847 	bl	80070b0 <__swbuf_r>
 8007022:	3001      	adds	r0, #1
 8007024:	d1bf      	bne.n	8006fa6 <_puts_r+0x42>
 8007026:	e7df      	b.n	8006fe8 <_puts_r+0x84>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	250a      	movs	r5, #10
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	6022      	str	r2, [r4, #0]
 8007030:	701d      	strb	r5, [r3, #0]
 8007032:	e7db      	b.n	8006fec <_puts_r+0x88>
 8007034:	080087f4 	.word	0x080087f4
 8007038:	08008814 	.word	0x08008814
 800703c:	080087d4 	.word	0x080087d4

08007040 <puts>:
 8007040:	4b02      	ldr	r3, [pc, #8]	; (800704c <puts+0xc>)
 8007042:	4601      	mov	r1, r0
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f7ff bf8d 	b.w	8006f64 <_puts_r>
 800704a:	bf00      	nop
 800704c:	20000024 	.word	0x20000024

08007050 <siprintf>:
 8007050:	b40e      	push	{r1, r2, r3}
 8007052:	b500      	push	{lr}
 8007054:	b09c      	sub	sp, #112	; 0x70
 8007056:	ab1d      	add	r3, sp, #116	; 0x74
 8007058:	9002      	str	r0, [sp, #8]
 800705a:	9006      	str	r0, [sp, #24]
 800705c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007060:	4809      	ldr	r0, [pc, #36]	; (8007088 <siprintf+0x38>)
 8007062:	9107      	str	r1, [sp, #28]
 8007064:	9104      	str	r1, [sp, #16]
 8007066:	4909      	ldr	r1, [pc, #36]	; (800708c <siprintf+0x3c>)
 8007068:	f853 2b04 	ldr.w	r2, [r3], #4
 800706c:	9105      	str	r1, [sp, #20]
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	a902      	add	r1, sp, #8
 8007074:	f000 fc00 	bl	8007878 <_svfiprintf_r>
 8007078:	9b02      	ldr	r3, [sp, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	b01c      	add	sp, #112	; 0x70
 8007080:	f85d eb04 	ldr.w	lr, [sp], #4
 8007084:	b003      	add	sp, #12
 8007086:	4770      	bx	lr
 8007088:	20000024 	.word	0x20000024
 800708c:	ffff0208 	.word	0xffff0208

08007090 <strcat>:
 8007090:	b510      	push	{r4, lr}
 8007092:	4602      	mov	r2, r0
 8007094:	7814      	ldrb	r4, [r2, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	3201      	adds	r2, #1
 800709a:	2c00      	cmp	r4, #0
 800709c:	d1fa      	bne.n	8007094 <strcat+0x4>
 800709e:	3b01      	subs	r3, #1
 80070a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	d1f9      	bne.n	80070a0 <strcat+0x10>
 80070ac:	bd10      	pop	{r4, pc}
	...

080070b0 <__swbuf_r>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	460e      	mov	r6, r1
 80070b4:	4614      	mov	r4, r2
 80070b6:	4605      	mov	r5, r0
 80070b8:	b118      	cbz	r0, 80070c2 <__swbuf_r+0x12>
 80070ba:	6983      	ldr	r3, [r0, #24]
 80070bc:	b90b      	cbnz	r3, 80070c2 <__swbuf_r+0x12>
 80070be:	f000 f9d1 	bl	8007464 <__sinit>
 80070c2:	4b21      	ldr	r3, [pc, #132]	; (8007148 <__swbuf_r+0x98>)
 80070c4:	429c      	cmp	r4, r3
 80070c6:	d12b      	bne.n	8007120 <__swbuf_r+0x70>
 80070c8:	686c      	ldr	r4, [r5, #4]
 80070ca:	69a3      	ldr	r3, [r4, #24]
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	071a      	lsls	r2, r3, #28
 80070d2:	d52f      	bpl.n	8007134 <__swbuf_r+0x84>
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	b36b      	cbz	r3, 8007134 <__swbuf_r+0x84>
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	1ac0      	subs	r0, r0, r3
 80070de:	6963      	ldr	r3, [r4, #20]
 80070e0:	b2f6      	uxtb	r6, r6
 80070e2:	4283      	cmp	r3, r0
 80070e4:	4637      	mov	r7, r6
 80070e6:	dc04      	bgt.n	80070f2 <__swbuf_r+0x42>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f926 	bl	800733c <_fflush_r>
 80070f0:	bb30      	cbnz	r0, 8007140 <__swbuf_r+0x90>
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	60a3      	str	r3, [r4, #8]
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	6022      	str	r2, [r4, #0]
 80070fe:	701e      	strb	r6, [r3, #0]
 8007100:	6963      	ldr	r3, [r4, #20]
 8007102:	3001      	adds	r0, #1
 8007104:	4283      	cmp	r3, r0
 8007106:	d004      	beq.n	8007112 <__swbuf_r+0x62>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	07db      	lsls	r3, r3, #31
 800710c:	d506      	bpl.n	800711c <__swbuf_r+0x6c>
 800710e:	2e0a      	cmp	r6, #10
 8007110:	d104      	bne.n	800711c <__swbuf_r+0x6c>
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f911 	bl	800733c <_fflush_r>
 800711a:	b988      	cbnz	r0, 8007140 <__swbuf_r+0x90>
 800711c:	4638      	mov	r0, r7
 800711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <__swbuf_r+0x9c>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <__swbuf_r+0x7a>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7cf      	b.n	80070ca <__swbuf_r+0x1a>
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <__swbuf_r+0xa0>)
 800712c:	429c      	cmp	r4, r3
 800712e:	bf08      	it	eq
 8007130:	68ec      	ldreq	r4, [r5, #12]
 8007132:	e7ca      	b.n	80070ca <__swbuf_r+0x1a>
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f80c 	bl	8007154 <__swsetup_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	d0cb      	beq.n	80070d8 <__swbuf_r+0x28>
 8007140:	f04f 37ff 	mov.w	r7, #4294967295
 8007144:	e7ea      	b.n	800711c <__swbuf_r+0x6c>
 8007146:	bf00      	nop
 8007148:	080087f4 	.word	0x080087f4
 800714c:	08008814 	.word	0x08008814
 8007150:	080087d4 	.word	0x080087d4

08007154 <__swsetup_r>:
 8007154:	4b32      	ldr	r3, [pc, #200]	; (8007220 <__swsetup_r+0xcc>)
 8007156:	b570      	push	{r4, r5, r6, lr}
 8007158:	681d      	ldr	r5, [r3, #0]
 800715a:	4606      	mov	r6, r0
 800715c:	460c      	mov	r4, r1
 800715e:	b125      	cbz	r5, 800716a <__swsetup_r+0x16>
 8007160:	69ab      	ldr	r3, [r5, #24]
 8007162:	b913      	cbnz	r3, 800716a <__swsetup_r+0x16>
 8007164:	4628      	mov	r0, r5
 8007166:	f000 f97d 	bl	8007464 <__sinit>
 800716a:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <__swsetup_r+0xd0>)
 800716c:	429c      	cmp	r4, r3
 800716e:	d10f      	bne.n	8007190 <__swsetup_r+0x3c>
 8007170:	686c      	ldr	r4, [r5, #4]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007178:	0719      	lsls	r1, r3, #28
 800717a:	d42c      	bmi.n	80071d6 <__swsetup_r+0x82>
 800717c:	06dd      	lsls	r5, r3, #27
 800717e:	d411      	bmi.n	80071a4 <__swsetup_r+0x50>
 8007180:	2309      	movs	r3, #9
 8007182:	6033      	str	r3, [r6, #0]
 8007184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	e03e      	b.n	800720e <__swsetup_r+0xba>
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <__swsetup_r+0xd4>)
 8007192:	429c      	cmp	r4, r3
 8007194:	d101      	bne.n	800719a <__swsetup_r+0x46>
 8007196:	68ac      	ldr	r4, [r5, #8]
 8007198:	e7eb      	b.n	8007172 <__swsetup_r+0x1e>
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <__swsetup_r+0xd8>)
 800719c:	429c      	cmp	r4, r3
 800719e:	bf08      	it	eq
 80071a0:	68ec      	ldreq	r4, [r5, #12]
 80071a2:	e7e6      	b.n	8007172 <__swsetup_r+0x1e>
 80071a4:	0758      	lsls	r0, r3, #29
 80071a6:	d512      	bpl.n	80071ce <__swsetup_r+0x7a>
 80071a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071aa:	b141      	cbz	r1, 80071be <__swsetup_r+0x6a>
 80071ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d002      	beq.n	80071ba <__swsetup_r+0x66>
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 fa59 	bl	800766c <_free_r>
 80071ba:	2300      	movs	r3, #0
 80071bc:	6363      	str	r3, [r4, #52]	; 0x34
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	2300      	movs	r3, #0
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f043 0308 	orr.w	r3, r3, #8
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	b94b      	cbnz	r3, 80071ee <__swsetup_r+0x9a>
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e4:	d003      	beq.n	80071ee <__swsetup_r+0x9a>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f9ff 	bl	80075ec <__smakebuf_r>
 80071ee:	89a0      	ldrh	r0, [r4, #12]
 80071f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071f4:	f010 0301 	ands.w	r3, r0, #1
 80071f8:	d00a      	beq.n	8007210 <__swsetup_r+0xbc>
 80071fa:	2300      	movs	r3, #0
 80071fc:	60a3      	str	r3, [r4, #8]
 80071fe:	6963      	ldr	r3, [r4, #20]
 8007200:	425b      	negs	r3, r3
 8007202:	61a3      	str	r3, [r4, #24]
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	b943      	cbnz	r3, 800721a <__swsetup_r+0xc6>
 8007208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800720c:	d1ba      	bne.n	8007184 <__swsetup_r+0x30>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	0781      	lsls	r1, r0, #30
 8007212:	bf58      	it	pl
 8007214:	6963      	ldrpl	r3, [r4, #20]
 8007216:	60a3      	str	r3, [r4, #8]
 8007218:	e7f4      	b.n	8007204 <__swsetup_r+0xb0>
 800721a:	2000      	movs	r0, #0
 800721c:	e7f7      	b.n	800720e <__swsetup_r+0xba>
 800721e:	bf00      	nop
 8007220:	20000024 	.word	0x20000024
 8007224:	080087f4 	.word	0x080087f4
 8007228:	08008814 	.word	0x08008814
 800722c:	080087d4 	.word	0x080087d4

08007230 <__sflush_r>:
 8007230:	898a      	ldrh	r2, [r1, #12]
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	4605      	mov	r5, r0
 8007238:	0710      	lsls	r0, r2, #28
 800723a:	460c      	mov	r4, r1
 800723c:	d458      	bmi.n	80072f0 <__sflush_r+0xc0>
 800723e:	684b      	ldr	r3, [r1, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dc05      	bgt.n	8007250 <__sflush_r+0x20>
 8007244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	dc02      	bgt.n	8007250 <__sflush_r+0x20>
 800724a:	2000      	movs	r0, #0
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007252:	2e00      	cmp	r6, #0
 8007254:	d0f9      	beq.n	800724a <__sflush_r+0x1a>
 8007256:	2300      	movs	r3, #0
 8007258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800725c:	682f      	ldr	r7, [r5, #0]
 800725e:	602b      	str	r3, [r5, #0]
 8007260:	d032      	beq.n	80072c8 <__sflush_r+0x98>
 8007262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	075a      	lsls	r2, r3, #29
 8007268:	d505      	bpl.n	8007276 <__sflush_r+0x46>
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	1ac0      	subs	r0, r0, r3
 800726e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007270:	b10b      	cbz	r3, 8007276 <__sflush_r+0x46>
 8007272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007274:	1ac0      	subs	r0, r0, r3
 8007276:	2300      	movs	r3, #0
 8007278:	4602      	mov	r2, r0
 800727a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800727c:	6a21      	ldr	r1, [r4, #32]
 800727e:	4628      	mov	r0, r5
 8007280:	47b0      	blx	r6
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	d106      	bne.n	8007296 <__sflush_r+0x66>
 8007288:	6829      	ldr	r1, [r5, #0]
 800728a:	291d      	cmp	r1, #29
 800728c:	d82c      	bhi.n	80072e8 <__sflush_r+0xb8>
 800728e:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <__sflush_r+0x108>)
 8007290:	40ca      	lsrs	r2, r1
 8007292:	07d6      	lsls	r6, r2, #31
 8007294:	d528      	bpl.n	80072e8 <__sflush_r+0xb8>
 8007296:	2200      	movs	r2, #0
 8007298:	6062      	str	r2, [r4, #4]
 800729a:	04d9      	lsls	r1, r3, #19
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	6022      	str	r2, [r4, #0]
 80072a0:	d504      	bpl.n	80072ac <__sflush_r+0x7c>
 80072a2:	1c42      	adds	r2, r0, #1
 80072a4:	d101      	bne.n	80072aa <__sflush_r+0x7a>
 80072a6:	682b      	ldr	r3, [r5, #0]
 80072a8:	b903      	cbnz	r3, 80072ac <__sflush_r+0x7c>
 80072aa:	6560      	str	r0, [r4, #84]	; 0x54
 80072ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ae:	602f      	str	r7, [r5, #0]
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d0ca      	beq.n	800724a <__sflush_r+0x1a>
 80072b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072b8:	4299      	cmp	r1, r3
 80072ba:	d002      	beq.n	80072c2 <__sflush_r+0x92>
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 f9d5 	bl	800766c <_free_r>
 80072c2:	2000      	movs	r0, #0
 80072c4:	6360      	str	r0, [r4, #52]	; 0x34
 80072c6:	e7c1      	b.n	800724c <__sflush_r+0x1c>
 80072c8:	6a21      	ldr	r1, [r4, #32]
 80072ca:	2301      	movs	r3, #1
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b0      	blx	r6
 80072d0:	1c41      	adds	r1, r0, #1
 80072d2:	d1c7      	bne.n	8007264 <__sflush_r+0x34>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0c4      	beq.n	8007264 <__sflush_r+0x34>
 80072da:	2b1d      	cmp	r3, #29
 80072dc:	d001      	beq.n	80072e2 <__sflush_r+0xb2>
 80072de:	2b16      	cmp	r3, #22
 80072e0:	d101      	bne.n	80072e6 <__sflush_r+0xb6>
 80072e2:	602f      	str	r7, [r5, #0]
 80072e4:	e7b1      	b.n	800724a <__sflush_r+0x1a>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ec:	81a3      	strh	r3, [r4, #12]
 80072ee:	e7ad      	b.n	800724c <__sflush_r+0x1c>
 80072f0:	690f      	ldr	r7, [r1, #16]
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d0a9      	beq.n	800724a <__sflush_r+0x1a>
 80072f6:	0793      	lsls	r3, r2, #30
 80072f8:	680e      	ldr	r6, [r1, #0]
 80072fa:	bf08      	it	eq
 80072fc:	694b      	ldreq	r3, [r1, #20]
 80072fe:	600f      	str	r7, [r1, #0]
 8007300:	bf18      	it	ne
 8007302:	2300      	movne	r3, #0
 8007304:	eba6 0807 	sub.w	r8, r6, r7
 8007308:	608b      	str	r3, [r1, #8]
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	dd9c      	ble.n	800724a <__sflush_r+0x1a>
 8007310:	6a21      	ldr	r1, [r4, #32]
 8007312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007314:	4643      	mov	r3, r8
 8007316:	463a      	mov	r2, r7
 8007318:	4628      	mov	r0, r5
 800731a:	47b0      	blx	r6
 800731c:	2800      	cmp	r0, #0
 800731e:	dc06      	bgt.n	800732e <__sflush_r+0xfe>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	e78e      	b.n	800724c <__sflush_r+0x1c>
 800732e:	4407      	add	r7, r0
 8007330:	eba8 0800 	sub.w	r8, r8, r0
 8007334:	e7e9      	b.n	800730a <__sflush_r+0xda>
 8007336:	bf00      	nop
 8007338:	20400001 	.word	0x20400001

0800733c <_fflush_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	690b      	ldr	r3, [r1, #16]
 8007340:	4605      	mov	r5, r0
 8007342:	460c      	mov	r4, r1
 8007344:	b913      	cbnz	r3, 800734c <_fflush_r+0x10>
 8007346:	2500      	movs	r5, #0
 8007348:	4628      	mov	r0, r5
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	b118      	cbz	r0, 8007356 <_fflush_r+0x1a>
 800734e:	6983      	ldr	r3, [r0, #24]
 8007350:	b90b      	cbnz	r3, 8007356 <_fflush_r+0x1a>
 8007352:	f000 f887 	bl	8007464 <__sinit>
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <_fflush_r+0x6c>)
 8007358:	429c      	cmp	r4, r3
 800735a:	d11b      	bne.n	8007394 <_fflush_r+0x58>
 800735c:	686c      	ldr	r4, [r5, #4]
 800735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0ef      	beq.n	8007346 <_fflush_r+0xa>
 8007366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007368:	07d0      	lsls	r0, r2, #31
 800736a:	d404      	bmi.n	8007376 <_fflush_r+0x3a>
 800736c:	0599      	lsls	r1, r3, #22
 800736e:	d402      	bmi.n	8007376 <_fflush_r+0x3a>
 8007370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007372:	f000 f915 	bl	80075a0 <__retarget_lock_acquire_recursive>
 8007376:	4628      	mov	r0, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7ff ff59 	bl	8007230 <__sflush_r>
 800737e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007380:	07da      	lsls	r2, r3, #31
 8007382:	4605      	mov	r5, r0
 8007384:	d4e0      	bmi.n	8007348 <_fflush_r+0xc>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	d4dd      	bmi.n	8007348 <_fflush_r+0xc>
 800738c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738e:	f000 f908 	bl	80075a2 <__retarget_lock_release_recursive>
 8007392:	e7d9      	b.n	8007348 <_fflush_r+0xc>
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <_fflush_r+0x70>)
 8007396:	429c      	cmp	r4, r3
 8007398:	d101      	bne.n	800739e <_fflush_r+0x62>
 800739a:	68ac      	ldr	r4, [r5, #8]
 800739c:	e7df      	b.n	800735e <_fflush_r+0x22>
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <_fflush_r+0x74>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	bf08      	it	eq
 80073a4:	68ec      	ldreq	r4, [r5, #12]
 80073a6:	e7da      	b.n	800735e <_fflush_r+0x22>
 80073a8:	080087f4 	.word	0x080087f4
 80073ac:	08008814 	.word	0x08008814
 80073b0:	080087d4 	.word	0x080087d4

080073b4 <std>:
 80073b4:	2300      	movs	r3, #0
 80073b6:	b510      	push	{r4, lr}
 80073b8:	4604      	mov	r4, r0
 80073ba:	e9c0 3300 	strd	r3, r3, [r0]
 80073be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073c2:	6083      	str	r3, [r0, #8]
 80073c4:	8181      	strh	r1, [r0, #12]
 80073c6:	6643      	str	r3, [r0, #100]	; 0x64
 80073c8:	81c2      	strh	r2, [r0, #14]
 80073ca:	6183      	str	r3, [r0, #24]
 80073cc:	4619      	mov	r1, r3
 80073ce:	2208      	movs	r2, #8
 80073d0:	305c      	adds	r0, #92	; 0x5c
 80073d2:	f7ff fda7 	bl	8006f24 <memset>
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <std+0x38>)
 80073d8:	6263      	str	r3, [r4, #36]	; 0x24
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <std+0x3c>)
 80073dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <std+0x40>)
 80073e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <std+0x44>)
 80073e4:	6224      	str	r4, [r4, #32]
 80073e6:	6323      	str	r3, [r4, #48]	; 0x30
 80073e8:	bd10      	pop	{r4, pc}
 80073ea:	bf00      	nop
 80073ec:	08008075 	.word	0x08008075
 80073f0:	08008097 	.word	0x08008097
 80073f4:	080080cf 	.word	0x080080cf
 80073f8:	080080f3 	.word	0x080080f3

080073fc <_cleanup_r>:
 80073fc:	4901      	ldr	r1, [pc, #4]	; (8007404 <_cleanup_r+0x8>)
 80073fe:	f000 b8af 	b.w	8007560 <_fwalk_reent>
 8007402:	bf00      	nop
 8007404:	0800733d 	.word	0x0800733d

08007408 <__sfmoreglue>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	1e4a      	subs	r2, r1, #1
 800740c:	2568      	movs	r5, #104	; 0x68
 800740e:	4355      	muls	r5, r2
 8007410:	460e      	mov	r6, r1
 8007412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007416:	f000 f979 	bl	800770c <_malloc_r>
 800741a:	4604      	mov	r4, r0
 800741c:	b140      	cbz	r0, 8007430 <__sfmoreglue+0x28>
 800741e:	2100      	movs	r1, #0
 8007420:	e9c0 1600 	strd	r1, r6, [r0]
 8007424:	300c      	adds	r0, #12
 8007426:	60a0      	str	r0, [r4, #8]
 8007428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800742c:	f7ff fd7a 	bl	8006f24 <memset>
 8007430:	4620      	mov	r0, r4
 8007432:	bd70      	pop	{r4, r5, r6, pc}

08007434 <__sfp_lock_acquire>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__sfp_lock_acquire+0x8>)
 8007436:	f000 b8b3 	b.w	80075a0 <__retarget_lock_acquire_recursive>
 800743a:	bf00      	nop
 800743c:	20026884 	.word	0x20026884

08007440 <__sfp_lock_release>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__sfp_lock_release+0x8>)
 8007442:	f000 b8ae 	b.w	80075a2 <__retarget_lock_release_recursive>
 8007446:	bf00      	nop
 8007448:	20026884 	.word	0x20026884

0800744c <__sinit_lock_acquire>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__sinit_lock_acquire+0x8>)
 800744e:	f000 b8a7 	b.w	80075a0 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	2002687f 	.word	0x2002687f

08007458 <__sinit_lock_release>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__sinit_lock_release+0x8>)
 800745a:	f000 b8a2 	b.w	80075a2 <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	2002687f 	.word	0x2002687f

08007464 <__sinit>:
 8007464:	b510      	push	{r4, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	f7ff fff0 	bl	800744c <__sinit_lock_acquire>
 800746c:	69a3      	ldr	r3, [r4, #24]
 800746e:	b11b      	cbz	r3, 8007478 <__sinit+0x14>
 8007470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007474:	f7ff bff0 	b.w	8007458 <__sinit_lock_release>
 8007478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800747c:	6523      	str	r3, [r4, #80]	; 0x50
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <__sinit+0x68>)
 8007480:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <__sinit+0x6c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	62a2      	str	r2, [r4, #40]	; 0x28
 8007486:	42a3      	cmp	r3, r4
 8007488:	bf04      	itt	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	61a3      	streq	r3, [r4, #24]
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f820 	bl	80074d4 <__sfp>
 8007494:	6060      	str	r0, [r4, #4]
 8007496:	4620      	mov	r0, r4
 8007498:	f000 f81c 	bl	80074d4 <__sfp>
 800749c:	60a0      	str	r0, [r4, #8]
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 f818 	bl	80074d4 <__sfp>
 80074a4:	2200      	movs	r2, #0
 80074a6:	60e0      	str	r0, [r4, #12]
 80074a8:	2104      	movs	r1, #4
 80074aa:	6860      	ldr	r0, [r4, #4]
 80074ac:	f7ff ff82 	bl	80073b4 <std>
 80074b0:	68a0      	ldr	r0, [r4, #8]
 80074b2:	2201      	movs	r2, #1
 80074b4:	2109      	movs	r1, #9
 80074b6:	f7ff ff7d 	bl	80073b4 <std>
 80074ba:	68e0      	ldr	r0, [r4, #12]
 80074bc:	2202      	movs	r2, #2
 80074be:	2112      	movs	r1, #18
 80074c0:	f7ff ff78 	bl	80073b4 <std>
 80074c4:	2301      	movs	r3, #1
 80074c6:	61a3      	str	r3, [r4, #24]
 80074c8:	e7d2      	b.n	8007470 <__sinit+0xc>
 80074ca:	bf00      	nop
 80074cc:	080087d0 	.word	0x080087d0
 80074d0:	080073fd 	.word	0x080073fd

080074d4 <__sfp>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	4607      	mov	r7, r0
 80074d8:	f7ff ffac 	bl	8007434 <__sfp_lock_acquire>
 80074dc:	4b1e      	ldr	r3, [pc, #120]	; (8007558 <__sfp+0x84>)
 80074de:	681e      	ldr	r6, [r3, #0]
 80074e0:	69b3      	ldr	r3, [r6, #24]
 80074e2:	b913      	cbnz	r3, 80074ea <__sfp+0x16>
 80074e4:	4630      	mov	r0, r6
 80074e6:	f7ff ffbd 	bl	8007464 <__sinit>
 80074ea:	3648      	adds	r6, #72	; 0x48
 80074ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	d503      	bpl.n	80074fc <__sfp+0x28>
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	b30b      	cbz	r3, 800753c <__sfp+0x68>
 80074f8:	6836      	ldr	r6, [r6, #0]
 80074fa:	e7f7      	b.n	80074ec <__sfp+0x18>
 80074fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007500:	b9d5      	cbnz	r5, 8007538 <__sfp+0x64>
 8007502:	4b16      	ldr	r3, [pc, #88]	; (800755c <__sfp+0x88>)
 8007504:	60e3      	str	r3, [r4, #12]
 8007506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800750a:	6665      	str	r5, [r4, #100]	; 0x64
 800750c:	f000 f847 	bl	800759e <__retarget_lock_init_recursive>
 8007510:	f7ff ff96 	bl	8007440 <__sfp_lock_release>
 8007514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800751c:	6025      	str	r5, [r4, #0]
 800751e:	61a5      	str	r5, [r4, #24]
 8007520:	2208      	movs	r2, #8
 8007522:	4629      	mov	r1, r5
 8007524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007528:	f7ff fcfc 	bl	8006f24 <memset>
 800752c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007534:	4620      	mov	r0, r4
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	3468      	adds	r4, #104	; 0x68
 800753a:	e7d9      	b.n	80074f0 <__sfp+0x1c>
 800753c:	2104      	movs	r1, #4
 800753e:	4638      	mov	r0, r7
 8007540:	f7ff ff62 	bl	8007408 <__sfmoreglue>
 8007544:	4604      	mov	r4, r0
 8007546:	6030      	str	r0, [r6, #0]
 8007548:	2800      	cmp	r0, #0
 800754a:	d1d5      	bne.n	80074f8 <__sfp+0x24>
 800754c:	f7ff ff78 	bl	8007440 <__sfp_lock_release>
 8007550:	230c      	movs	r3, #12
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	e7ee      	b.n	8007534 <__sfp+0x60>
 8007556:	bf00      	nop
 8007558:	080087d0 	.word	0x080087d0
 800755c:	ffff0001 	.word	0xffff0001

08007560 <_fwalk_reent>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4606      	mov	r6, r0
 8007566:	4688      	mov	r8, r1
 8007568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800756c:	2700      	movs	r7, #0
 800756e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007572:	f1b9 0901 	subs.w	r9, r9, #1
 8007576:	d505      	bpl.n	8007584 <_fwalk_reent+0x24>
 8007578:	6824      	ldr	r4, [r4, #0]
 800757a:	2c00      	cmp	r4, #0
 800757c:	d1f7      	bne.n	800756e <_fwalk_reent+0xe>
 800757e:	4638      	mov	r0, r7
 8007580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007584:	89ab      	ldrh	r3, [r5, #12]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d907      	bls.n	800759a <_fwalk_reent+0x3a>
 800758a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800758e:	3301      	adds	r3, #1
 8007590:	d003      	beq.n	800759a <_fwalk_reent+0x3a>
 8007592:	4629      	mov	r1, r5
 8007594:	4630      	mov	r0, r6
 8007596:	47c0      	blx	r8
 8007598:	4307      	orrs	r7, r0
 800759a:	3568      	adds	r5, #104	; 0x68
 800759c:	e7e9      	b.n	8007572 <_fwalk_reent+0x12>

0800759e <__retarget_lock_init_recursive>:
 800759e:	4770      	bx	lr

080075a0 <__retarget_lock_acquire_recursive>:
 80075a0:	4770      	bx	lr

080075a2 <__retarget_lock_release_recursive>:
 80075a2:	4770      	bx	lr

080075a4 <__swhatbuf_r>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	460e      	mov	r6, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	2900      	cmp	r1, #0
 80075ae:	b096      	sub	sp, #88	; 0x58
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	da07      	bge.n	80075c6 <__swhatbuf_r+0x22>
 80075b6:	2300      	movs	r3, #0
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	89b3      	ldrh	r3, [r6, #12]
 80075bc:	061a      	lsls	r2, r3, #24
 80075be:	d410      	bmi.n	80075e2 <__swhatbuf_r+0x3e>
 80075c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c4:	e00e      	b.n	80075e4 <__swhatbuf_r+0x40>
 80075c6:	466a      	mov	r2, sp
 80075c8:	f000 fdba 	bl	8008140 <_fstat_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	dbf2      	blt.n	80075b6 <__swhatbuf_r+0x12>
 80075d0:	9a01      	ldr	r2, [sp, #4]
 80075d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075da:	425a      	negs	r2, r3
 80075dc:	415a      	adcs	r2, r3
 80075de:	602a      	str	r2, [r5, #0]
 80075e0:	e7ee      	b.n	80075c0 <__swhatbuf_r+0x1c>
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	2000      	movs	r0, #0
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	b016      	add	sp, #88	; 0x58
 80075ea:	bd70      	pop	{r4, r5, r6, pc}

080075ec <__smakebuf_r>:
 80075ec:	898b      	ldrh	r3, [r1, #12]
 80075ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f0:	079d      	lsls	r5, r3, #30
 80075f2:	4606      	mov	r6, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	d507      	bpl.n	8007608 <__smakebuf_r+0x1c>
 80075f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	2301      	movs	r3, #1
 8007602:	6163      	str	r3, [r4, #20]
 8007604:	b002      	add	sp, #8
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	ab01      	add	r3, sp, #4
 800760a:	466a      	mov	r2, sp
 800760c:	f7ff ffca 	bl	80075a4 <__swhatbuf_r>
 8007610:	9900      	ldr	r1, [sp, #0]
 8007612:	4605      	mov	r5, r0
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f879 	bl	800770c <_malloc_r>
 800761a:	b948      	cbnz	r0, 8007630 <__smakebuf_r+0x44>
 800761c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d4ef      	bmi.n	8007604 <__smakebuf_r+0x18>
 8007624:	f023 0303 	bic.w	r3, r3, #3
 8007628:	f043 0302 	orr.w	r3, r3, #2
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	e7e3      	b.n	80075f8 <__smakebuf_r+0xc>
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <__smakebuf_r+0x7c>)
 8007632:	62b3      	str	r3, [r6, #40]	; 0x28
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	6163      	str	r3, [r4, #20]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	6120      	str	r0, [r4, #16]
 8007646:	b15b      	cbz	r3, 8007660 <__smakebuf_r+0x74>
 8007648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800764c:	4630      	mov	r0, r6
 800764e:	f000 fd89 	bl	8008164 <_isatty_r>
 8007652:	b128      	cbz	r0, 8007660 <__smakebuf_r+0x74>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	89a0      	ldrh	r0, [r4, #12]
 8007662:	4305      	orrs	r5, r0
 8007664:	81a5      	strh	r5, [r4, #12]
 8007666:	e7cd      	b.n	8007604 <__smakebuf_r+0x18>
 8007668:	080073fd 	.word	0x080073fd

0800766c <_free_r>:
 800766c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800766e:	2900      	cmp	r1, #0
 8007670:	d048      	beq.n	8007704 <_free_r+0x98>
 8007672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007676:	9001      	str	r0, [sp, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f1a1 0404 	sub.w	r4, r1, #4
 800767e:	bfb8      	it	lt
 8007680:	18e4      	addlt	r4, r4, r3
 8007682:	f000 fdab 	bl	80081dc <__malloc_lock>
 8007686:	4a20      	ldr	r2, [pc, #128]	; (8007708 <_free_r+0x9c>)
 8007688:	9801      	ldr	r0, [sp, #4]
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	4615      	mov	r5, r2
 800768e:	b933      	cbnz	r3, 800769e <_free_r+0x32>
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	6014      	str	r4, [r2, #0]
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800769a:	f000 bda5 	b.w	80081e8 <__malloc_unlock>
 800769e:	42a3      	cmp	r3, r4
 80076a0:	d90b      	bls.n	80076ba <_free_r+0x4e>
 80076a2:	6821      	ldr	r1, [r4, #0]
 80076a4:	1862      	adds	r2, r4, r1
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bf04      	itt	eq
 80076aa:	681a      	ldreq	r2, [r3, #0]
 80076ac:	685b      	ldreq	r3, [r3, #4]
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	bf04      	itt	eq
 80076b2:	1852      	addeq	r2, r2, r1
 80076b4:	6022      	streq	r2, [r4, #0]
 80076b6:	602c      	str	r4, [r5, #0]
 80076b8:	e7ec      	b.n	8007694 <_free_r+0x28>
 80076ba:	461a      	mov	r2, r3
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	b10b      	cbz	r3, 80076c4 <_free_r+0x58>
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	d9fa      	bls.n	80076ba <_free_r+0x4e>
 80076c4:	6811      	ldr	r1, [r2, #0]
 80076c6:	1855      	adds	r5, r2, r1
 80076c8:	42a5      	cmp	r5, r4
 80076ca:	d10b      	bne.n	80076e4 <_free_r+0x78>
 80076cc:	6824      	ldr	r4, [r4, #0]
 80076ce:	4421      	add	r1, r4
 80076d0:	1854      	adds	r4, r2, r1
 80076d2:	42a3      	cmp	r3, r4
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	d1dd      	bne.n	8007694 <_free_r+0x28>
 80076d8:	681c      	ldr	r4, [r3, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	6053      	str	r3, [r2, #4]
 80076de:	4421      	add	r1, r4
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	e7d7      	b.n	8007694 <_free_r+0x28>
 80076e4:	d902      	bls.n	80076ec <_free_r+0x80>
 80076e6:	230c      	movs	r3, #12
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	e7d3      	b.n	8007694 <_free_r+0x28>
 80076ec:	6825      	ldr	r5, [r4, #0]
 80076ee:	1961      	adds	r1, r4, r5
 80076f0:	428b      	cmp	r3, r1
 80076f2:	bf04      	itt	eq
 80076f4:	6819      	ldreq	r1, [r3, #0]
 80076f6:	685b      	ldreq	r3, [r3, #4]
 80076f8:	6063      	str	r3, [r4, #4]
 80076fa:	bf04      	itt	eq
 80076fc:	1949      	addeq	r1, r1, r5
 80076fe:	6021      	streq	r1, [r4, #0]
 8007700:	6054      	str	r4, [r2, #4]
 8007702:	e7c7      	b.n	8007694 <_free_r+0x28>
 8007704:	b003      	add	sp, #12
 8007706:	bd30      	pop	{r4, r5, pc}
 8007708:	200004e0 	.word	0x200004e0

0800770c <_malloc_r>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	1ccd      	adds	r5, r1, #3
 8007710:	f025 0503 	bic.w	r5, r5, #3
 8007714:	3508      	adds	r5, #8
 8007716:	2d0c      	cmp	r5, #12
 8007718:	bf38      	it	cc
 800771a:	250c      	movcc	r5, #12
 800771c:	2d00      	cmp	r5, #0
 800771e:	4606      	mov	r6, r0
 8007720:	db01      	blt.n	8007726 <_malloc_r+0x1a>
 8007722:	42a9      	cmp	r1, r5
 8007724:	d903      	bls.n	800772e <_malloc_r+0x22>
 8007726:	230c      	movs	r3, #12
 8007728:	6033      	str	r3, [r6, #0]
 800772a:	2000      	movs	r0, #0
 800772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772e:	f000 fd55 	bl	80081dc <__malloc_lock>
 8007732:	4921      	ldr	r1, [pc, #132]	; (80077b8 <_malloc_r+0xac>)
 8007734:	680a      	ldr	r2, [r1, #0]
 8007736:	4614      	mov	r4, r2
 8007738:	b99c      	cbnz	r4, 8007762 <_malloc_r+0x56>
 800773a:	4f20      	ldr	r7, [pc, #128]	; (80077bc <_malloc_r+0xb0>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	b923      	cbnz	r3, 800774a <_malloc_r+0x3e>
 8007740:	4621      	mov	r1, r4
 8007742:	4630      	mov	r0, r6
 8007744:	f000 fc86 	bl	8008054 <_sbrk_r>
 8007748:	6038      	str	r0, [r7, #0]
 800774a:	4629      	mov	r1, r5
 800774c:	4630      	mov	r0, r6
 800774e:	f000 fc81 	bl	8008054 <_sbrk_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d123      	bne.n	800779e <_malloc_r+0x92>
 8007756:	230c      	movs	r3, #12
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	4630      	mov	r0, r6
 800775c:	f000 fd44 	bl	80081e8 <__malloc_unlock>
 8007760:	e7e3      	b.n	800772a <_malloc_r+0x1e>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	1b5b      	subs	r3, r3, r5
 8007766:	d417      	bmi.n	8007798 <_malloc_r+0x8c>
 8007768:	2b0b      	cmp	r3, #11
 800776a:	d903      	bls.n	8007774 <_malloc_r+0x68>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	441c      	add	r4, r3
 8007770:	6025      	str	r5, [r4, #0]
 8007772:	e004      	b.n	800777e <_malloc_r+0x72>
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	42a2      	cmp	r2, r4
 8007778:	bf0c      	ite	eq
 800777a:	600b      	streq	r3, [r1, #0]
 800777c:	6053      	strne	r3, [r2, #4]
 800777e:	4630      	mov	r0, r6
 8007780:	f000 fd32 	bl	80081e8 <__malloc_unlock>
 8007784:	f104 000b 	add.w	r0, r4, #11
 8007788:	1d23      	adds	r3, r4, #4
 800778a:	f020 0007 	bic.w	r0, r0, #7
 800778e:	1ac2      	subs	r2, r0, r3
 8007790:	d0cc      	beq.n	800772c <_malloc_r+0x20>
 8007792:	1a1b      	subs	r3, r3, r0
 8007794:	50a3      	str	r3, [r4, r2]
 8007796:	e7c9      	b.n	800772c <_malloc_r+0x20>
 8007798:	4622      	mov	r2, r4
 800779a:	6864      	ldr	r4, [r4, #4]
 800779c:	e7cc      	b.n	8007738 <_malloc_r+0x2c>
 800779e:	1cc4      	adds	r4, r0, #3
 80077a0:	f024 0403 	bic.w	r4, r4, #3
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d0e3      	beq.n	8007770 <_malloc_r+0x64>
 80077a8:	1a21      	subs	r1, r4, r0
 80077aa:	4630      	mov	r0, r6
 80077ac:	f000 fc52 	bl	8008054 <_sbrk_r>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1dd      	bne.n	8007770 <_malloc_r+0x64>
 80077b4:	e7cf      	b.n	8007756 <_malloc_r+0x4a>
 80077b6:	bf00      	nop
 80077b8:	200004e0 	.word	0x200004e0
 80077bc:	200004e4 	.word	0x200004e4

080077c0 <__ssputs_r>:
 80077c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c4:	688e      	ldr	r6, [r1, #8]
 80077c6:	429e      	cmp	r6, r3
 80077c8:	4682      	mov	sl, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	4690      	mov	r8, r2
 80077ce:	461f      	mov	r7, r3
 80077d0:	d838      	bhi.n	8007844 <__ssputs_r+0x84>
 80077d2:	898a      	ldrh	r2, [r1, #12]
 80077d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077d8:	d032      	beq.n	8007840 <__ssputs_r+0x80>
 80077da:	6825      	ldr	r5, [r4, #0]
 80077dc:	6909      	ldr	r1, [r1, #16]
 80077de:	eba5 0901 	sub.w	r9, r5, r1
 80077e2:	6965      	ldr	r5, [r4, #20]
 80077e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077ec:	3301      	adds	r3, #1
 80077ee:	444b      	add	r3, r9
 80077f0:	106d      	asrs	r5, r5, #1
 80077f2:	429d      	cmp	r5, r3
 80077f4:	bf38      	it	cc
 80077f6:	461d      	movcc	r5, r3
 80077f8:	0553      	lsls	r3, r2, #21
 80077fa:	d531      	bpl.n	8007860 <__ssputs_r+0xa0>
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7ff ff85 	bl	800770c <_malloc_r>
 8007802:	4606      	mov	r6, r0
 8007804:	b950      	cbnz	r0, 800781c <__ssputs_r+0x5c>
 8007806:	230c      	movs	r3, #12
 8007808:	f8ca 3000 	str.w	r3, [sl]
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781c:	6921      	ldr	r1, [r4, #16]
 800781e:	464a      	mov	r2, r9
 8007820:	f7ff fb72 	bl	8006f08 <memcpy>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800782a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	6126      	str	r6, [r4, #16]
 8007832:	6165      	str	r5, [r4, #20]
 8007834:	444e      	add	r6, r9
 8007836:	eba5 0509 	sub.w	r5, r5, r9
 800783a:	6026      	str	r6, [r4, #0]
 800783c:	60a5      	str	r5, [r4, #8]
 800783e:	463e      	mov	r6, r7
 8007840:	42be      	cmp	r6, r7
 8007842:	d900      	bls.n	8007846 <__ssputs_r+0x86>
 8007844:	463e      	mov	r6, r7
 8007846:	4632      	mov	r2, r6
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	4641      	mov	r1, r8
 800784c:	f000 fcac 	bl	80081a8 <memmove>
 8007850:	68a3      	ldr	r3, [r4, #8]
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	1b9b      	subs	r3, r3, r6
 8007856:	4432      	add	r2, r6
 8007858:	60a3      	str	r3, [r4, #8]
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	2000      	movs	r0, #0
 800785e:	e7db      	b.n	8007818 <__ssputs_r+0x58>
 8007860:	462a      	mov	r2, r5
 8007862:	f000 fcc7 	bl	80081f4 <_realloc_r>
 8007866:	4606      	mov	r6, r0
 8007868:	2800      	cmp	r0, #0
 800786a:	d1e1      	bne.n	8007830 <__ssputs_r+0x70>
 800786c:	6921      	ldr	r1, [r4, #16]
 800786e:	4650      	mov	r0, sl
 8007870:	f7ff fefc 	bl	800766c <_free_r>
 8007874:	e7c7      	b.n	8007806 <__ssputs_r+0x46>
	...

08007878 <_svfiprintf_r>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	4698      	mov	r8, r3
 800787e:	898b      	ldrh	r3, [r1, #12]
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	b09d      	sub	sp, #116	; 0x74
 8007884:	4607      	mov	r7, r0
 8007886:	460d      	mov	r5, r1
 8007888:	4614      	mov	r4, r2
 800788a:	d50e      	bpl.n	80078aa <_svfiprintf_r+0x32>
 800788c:	690b      	ldr	r3, [r1, #16]
 800788e:	b963      	cbnz	r3, 80078aa <_svfiprintf_r+0x32>
 8007890:	2140      	movs	r1, #64	; 0x40
 8007892:	f7ff ff3b 	bl	800770c <_malloc_r>
 8007896:	6028      	str	r0, [r5, #0]
 8007898:	6128      	str	r0, [r5, #16]
 800789a:	b920      	cbnz	r0, 80078a6 <_svfiprintf_r+0x2e>
 800789c:	230c      	movs	r3, #12
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	e0d1      	b.n	8007a4a <_svfiprintf_r+0x1d2>
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	616b      	str	r3, [r5, #20]
 80078aa:	2300      	movs	r3, #0
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
 80078ae:	2320      	movs	r3, #32
 80078b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b8:	2330      	movs	r3, #48	; 0x30
 80078ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a64 <_svfiprintf_r+0x1ec>
 80078be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078c2:	f04f 0901 	mov.w	r9, #1
 80078c6:	4623      	mov	r3, r4
 80078c8:	469a      	mov	sl, r3
 80078ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ce:	b10a      	cbz	r2, 80078d4 <_svfiprintf_r+0x5c>
 80078d0:	2a25      	cmp	r2, #37	; 0x25
 80078d2:	d1f9      	bne.n	80078c8 <_svfiprintf_r+0x50>
 80078d4:	ebba 0b04 	subs.w	fp, sl, r4
 80078d8:	d00b      	beq.n	80078f2 <_svfiprintf_r+0x7a>
 80078da:	465b      	mov	r3, fp
 80078dc:	4622      	mov	r2, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff ff6d 	bl	80077c0 <__ssputs_r>
 80078e6:	3001      	adds	r0, #1
 80078e8:	f000 80aa 	beq.w	8007a40 <_svfiprintf_r+0x1c8>
 80078ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ee:	445a      	add	r2, fp
 80078f0:	9209      	str	r2, [sp, #36]	; 0x24
 80078f2:	f89a 3000 	ldrb.w	r3, [sl]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80a2 	beq.w	8007a40 <_svfiprintf_r+0x1c8>
 80078fc:	2300      	movs	r3, #0
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007906:	f10a 0a01 	add.w	sl, sl, #1
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	9307      	str	r3, [sp, #28]
 800790e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007912:	931a      	str	r3, [sp, #104]	; 0x68
 8007914:	4654      	mov	r4, sl
 8007916:	2205      	movs	r2, #5
 8007918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791c:	4851      	ldr	r0, [pc, #324]	; (8007a64 <_svfiprintf_r+0x1ec>)
 800791e:	f7f8 fc6f 	bl	8000200 <memchr>
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	b9d8      	cbnz	r0, 800795e <_svfiprintf_r+0xe6>
 8007926:	06d0      	lsls	r0, r2, #27
 8007928:	bf44      	itt	mi
 800792a:	2320      	movmi	r3, #32
 800792c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007930:	0711      	lsls	r1, r2, #28
 8007932:	bf44      	itt	mi
 8007934:	232b      	movmi	r3, #43	; 0x2b
 8007936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800793a:	f89a 3000 	ldrb.w	r3, [sl]
 800793e:	2b2a      	cmp	r3, #42	; 0x2a
 8007940:	d015      	beq.n	800796e <_svfiprintf_r+0xf6>
 8007942:	9a07      	ldr	r2, [sp, #28]
 8007944:	4654      	mov	r4, sl
 8007946:	2000      	movs	r0, #0
 8007948:	f04f 0c0a 	mov.w	ip, #10
 800794c:	4621      	mov	r1, r4
 800794e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007952:	3b30      	subs	r3, #48	; 0x30
 8007954:	2b09      	cmp	r3, #9
 8007956:	d94e      	bls.n	80079f6 <_svfiprintf_r+0x17e>
 8007958:	b1b0      	cbz	r0, 8007988 <_svfiprintf_r+0x110>
 800795a:	9207      	str	r2, [sp, #28]
 800795c:	e014      	b.n	8007988 <_svfiprintf_r+0x110>
 800795e:	eba0 0308 	sub.w	r3, r0, r8
 8007962:	fa09 f303 	lsl.w	r3, r9, r3
 8007966:	4313      	orrs	r3, r2
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	46a2      	mov	sl, r4
 800796c:	e7d2      	b.n	8007914 <_svfiprintf_r+0x9c>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	1d19      	adds	r1, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	9103      	str	r1, [sp, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfbb      	ittet	lt
 800797a:	425b      	neglt	r3, r3
 800797c:	f042 0202 	orrlt.w	r2, r2, #2
 8007980:	9307      	strge	r3, [sp, #28]
 8007982:	9307      	strlt	r3, [sp, #28]
 8007984:	bfb8      	it	lt
 8007986:	9204      	strlt	r2, [sp, #16]
 8007988:	7823      	ldrb	r3, [r4, #0]
 800798a:	2b2e      	cmp	r3, #46	; 0x2e
 800798c:	d10c      	bne.n	80079a8 <_svfiprintf_r+0x130>
 800798e:	7863      	ldrb	r3, [r4, #1]
 8007990:	2b2a      	cmp	r3, #42	; 0x2a
 8007992:	d135      	bne.n	8007a00 <_svfiprintf_r+0x188>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	9203      	str	r2, [sp, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfb8      	it	lt
 80079a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80079a4:	3402      	adds	r4, #2
 80079a6:	9305      	str	r3, [sp, #20]
 80079a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a74 <_svfiprintf_r+0x1fc>
 80079ac:	7821      	ldrb	r1, [r4, #0]
 80079ae:	2203      	movs	r2, #3
 80079b0:	4650      	mov	r0, sl
 80079b2:	f7f8 fc25 	bl	8000200 <memchr>
 80079b6:	b140      	cbz	r0, 80079ca <_svfiprintf_r+0x152>
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	eba0 000a 	sub.w	r0, r0, sl
 80079be:	fa03 f000 	lsl.w	r0, r3, r0
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	4303      	orrs	r3, r0
 80079c6:	3401      	adds	r4, #1
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ce:	4826      	ldr	r0, [pc, #152]	; (8007a68 <_svfiprintf_r+0x1f0>)
 80079d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079d4:	2206      	movs	r2, #6
 80079d6:	f7f8 fc13 	bl	8000200 <memchr>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d038      	beq.n	8007a50 <_svfiprintf_r+0x1d8>
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <_svfiprintf_r+0x1f4>)
 80079e0:	bb1b      	cbnz	r3, 8007a2a <_svfiprintf_r+0x1b2>
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	3307      	adds	r3, #7
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	3308      	adds	r3, #8
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f0:	4433      	add	r3, r6
 80079f2:	9309      	str	r3, [sp, #36]	; 0x24
 80079f4:	e767      	b.n	80078c6 <_svfiprintf_r+0x4e>
 80079f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80079fa:	460c      	mov	r4, r1
 80079fc:	2001      	movs	r0, #1
 80079fe:	e7a5      	b.n	800794c <_svfiprintf_r+0xd4>
 8007a00:	2300      	movs	r3, #0
 8007a02:	3401      	adds	r4, #1
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	4619      	mov	r1, r3
 8007a08:	f04f 0c0a 	mov.w	ip, #10
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a12:	3a30      	subs	r2, #48	; 0x30
 8007a14:	2a09      	cmp	r2, #9
 8007a16:	d903      	bls.n	8007a20 <_svfiprintf_r+0x1a8>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0c5      	beq.n	80079a8 <_svfiprintf_r+0x130>
 8007a1c:	9105      	str	r1, [sp, #20]
 8007a1e:	e7c3      	b.n	80079a8 <_svfiprintf_r+0x130>
 8007a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a24:	4604      	mov	r4, r0
 8007a26:	2301      	movs	r3, #1
 8007a28:	e7f0      	b.n	8007a0c <_svfiprintf_r+0x194>
 8007a2a:	ab03      	add	r3, sp, #12
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <_svfiprintf_r+0x1f8>)
 8007a32:	a904      	add	r1, sp, #16
 8007a34:	4638      	mov	r0, r7
 8007a36:	f3af 8000 	nop.w
 8007a3a:	1c42      	adds	r2, r0, #1
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	d1d6      	bne.n	80079ee <_svfiprintf_r+0x176>
 8007a40:	89ab      	ldrh	r3, [r5, #12]
 8007a42:	065b      	lsls	r3, r3, #25
 8007a44:	f53f af2c 	bmi.w	80078a0 <_svfiprintf_r+0x28>
 8007a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a4a:	b01d      	add	sp, #116	; 0x74
 8007a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <_svfiprintf_r+0x1f8>)
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f000 f9d4 	bl	8007e08 <_printf_i>
 8007a60:	e7eb      	b.n	8007a3a <_svfiprintf_r+0x1c2>
 8007a62:	bf00      	nop
 8007a64:	08008834 	.word	0x08008834
 8007a68:	0800883e 	.word	0x0800883e
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	080077c1 	.word	0x080077c1
 8007a74:	0800883a 	.word	0x0800883a

08007a78 <__sfputc_r>:
 8007a78:	6893      	ldr	r3, [r2, #8]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	b410      	push	{r4}
 8007a80:	6093      	str	r3, [r2, #8]
 8007a82:	da08      	bge.n	8007a96 <__sfputc_r+0x1e>
 8007a84:	6994      	ldr	r4, [r2, #24]
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	db01      	blt.n	8007a8e <__sfputc_r+0x16>
 8007a8a:	290a      	cmp	r1, #10
 8007a8c:	d103      	bne.n	8007a96 <__sfputc_r+0x1e>
 8007a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a92:	f7ff bb0d 	b.w	80070b0 <__swbuf_r>
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	1c58      	adds	r0, r3, #1
 8007a9a:	6010      	str	r0, [r2, #0]
 8007a9c:	7019      	strb	r1, [r3, #0]
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <__sfputs_r>:
 8007aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	18d5      	adds	r5, r2, r3
 8007ab0:	42ac      	cmp	r4, r5
 8007ab2:	d101      	bne.n	8007ab8 <__sfputs_r+0x12>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e007      	b.n	8007ac8 <__sfputs_r+0x22>
 8007ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abc:	463a      	mov	r2, r7
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f7ff ffda 	bl	8007a78 <__sfputc_r>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d1f3      	bne.n	8007ab0 <__sfputs_r+0xa>
 8007ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007acc <_vfiprintf_r>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	b09d      	sub	sp, #116	; 0x74
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	4698      	mov	r8, r3
 8007ad8:	4606      	mov	r6, r0
 8007ada:	b118      	cbz	r0, 8007ae4 <_vfiprintf_r+0x18>
 8007adc:	6983      	ldr	r3, [r0, #24]
 8007ade:	b90b      	cbnz	r3, 8007ae4 <_vfiprintf_r+0x18>
 8007ae0:	f7ff fcc0 	bl	8007464 <__sinit>
 8007ae4:	4b89      	ldr	r3, [pc, #548]	; (8007d0c <_vfiprintf_r+0x240>)
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	d11b      	bne.n	8007b22 <_vfiprintf_r+0x56>
 8007aea:	6875      	ldr	r5, [r6, #4]
 8007aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d405      	bmi.n	8007afe <_vfiprintf_r+0x32>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	059a      	lsls	r2, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_vfiprintf_r+0x32>
 8007af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afa:	f7ff fd51 	bl	80075a0 <__retarget_lock_acquire_recursive>
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	071b      	lsls	r3, r3, #28
 8007b02:	d501      	bpl.n	8007b08 <_vfiprintf_r+0x3c>
 8007b04:	692b      	ldr	r3, [r5, #16]
 8007b06:	b9eb      	cbnz	r3, 8007b44 <_vfiprintf_r+0x78>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff fb22 	bl	8007154 <__swsetup_r>
 8007b10:	b1c0      	cbz	r0, 8007b44 <_vfiprintf_r+0x78>
 8007b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b14:	07dc      	lsls	r4, r3, #31
 8007b16:	d50e      	bpl.n	8007b36 <_vfiprintf_r+0x6a>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	b01d      	add	sp, #116	; 0x74
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	4b7b      	ldr	r3, [pc, #492]	; (8007d10 <_vfiprintf_r+0x244>)
 8007b24:	429d      	cmp	r5, r3
 8007b26:	d101      	bne.n	8007b2c <_vfiprintf_r+0x60>
 8007b28:	68b5      	ldr	r5, [r6, #8]
 8007b2a:	e7df      	b.n	8007aec <_vfiprintf_r+0x20>
 8007b2c:	4b79      	ldr	r3, [pc, #484]	; (8007d14 <_vfiprintf_r+0x248>)
 8007b2e:	429d      	cmp	r5, r3
 8007b30:	bf08      	it	eq
 8007b32:	68f5      	ldreq	r5, [r6, #12]
 8007b34:	e7da      	b.n	8007aec <_vfiprintf_r+0x20>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	0598      	lsls	r0, r3, #22
 8007b3a:	d4ed      	bmi.n	8007b18 <_vfiprintf_r+0x4c>
 8007b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3e:	f7ff fd30 	bl	80075a2 <__retarget_lock_release_recursive>
 8007b42:	e7e9      	b.n	8007b18 <_vfiprintf_r+0x4c>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b52:	2330      	movs	r3, #48	; 0x30
 8007b54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d18 <_vfiprintf_r+0x24c>
 8007b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5c:	f04f 0901 	mov.w	r9, #1
 8007b60:	4623      	mov	r3, r4
 8007b62:	469a      	mov	sl, r3
 8007b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b68:	b10a      	cbz	r2, 8007b6e <_vfiprintf_r+0xa2>
 8007b6a:	2a25      	cmp	r2, #37	; 0x25
 8007b6c:	d1f9      	bne.n	8007b62 <_vfiprintf_r+0x96>
 8007b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b72:	d00b      	beq.n	8007b8c <_vfiprintf_r+0xc0>
 8007b74:	465b      	mov	r3, fp
 8007b76:	4622      	mov	r2, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff93 	bl	8007aa6 <__sfputs_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	f000 80aa 	beq.w	8007cda <_vfiprintf_r+0x20e>
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	445a      	add	r2, fp
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80a2 	beq.w	8007cda <_vfiprintf_r+0x20e>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba0:	f10a 0a01 	add.w	sl, sl, #1
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bac:	931a      	str	r3, [sp, #104]	; 0x68
 8007bae:	4654      	mov	r4, sl
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4858      	ldr	r0, [pc, #352]	; (8007d18 <_vfiprintf_r+0x24c>)
 8007bb8:	f7f8 fb22 	bl	8000200 <memchr>
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	b9d8      	cbnz	r0, 8007bf8 <_vfiprintf_r+0x12c>
 8007bc0:	06d1      	lsls	r1, r2, #27
 8007bc2:	bf44      	itt	mi
 8007bc4:	2320      	movmi	r3, #32
 8007bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bca:	0713      	lsls	r3, r2, #28
 8007bcc:	bf44      	itt	mi
 8007bce:	232b      	movmi	r3, #43	; 0x2b
 8007bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bda:	d015      	beq.n	8007c08 <_vfiprintf_r+0x13c>
 8007bdc:	9a07      	ldr	r2, [sp, #28]
 8007bde:	4654      	mov	r4, sl
 8007be0:	2000      	movs	r0, #0
 8007be2:	f04f 0c0a 	mov.w	ip, #10
 8007be6:	4621      	mov	r1, r4
 8007be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bec:	3b30      	subs	r3, #48	; 0x30
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d94e      	bls.n	8007c90 <_vfiprintf_r+0x1c4>
 8007bf2:	b1b0      	cbz	r0, 8007c22 <_vfiprintf_r+0x156>
 8007bf4:	9207      	str	r2, [sp, #28]
 8007bf6:	e014      	b.n	8007c22 <_vfiprintf_r+0x156>
 8007bf8:	eba0 0308 	sub.w	r3, r0, r8
 8007bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	46a2      	mov	sl, r4
 8007c06:	e7d2      	b.n	8007bae <_vfiprintf_r+0xe2>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	1d19      	adds	r1, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	9103      	str	r1, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bfbb      	ittet	lt
 8007c14:	425b      	neglt	r3, r3
 8007c16:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1a:	9307      	strge	r3, [sp, #28]
 8007c1c:	9307      	strlt	r3, [sp, #28]
 8007c1e:	bfb8      	it	lt
 8007c20:	9204      	strlt	r2, [sp, #16]
 8007c22:	7823      	ldrb	r3, [r4, #0]
 8007c24:	2b2e      	cmp	r3, #46	; 0x2e
 8007c26:	d10c      	bne.n	8007c42 <_vfiprintf_r+0x176>
 8007c28:	7863      	ldrb	r3, [r4, #1]
 8007c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2c:	d135      	bne.n	8007c9a <_vfiprintf_r+0x1ce>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfb8      	it	lt
 8007c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3e:	3402      	adds	r4, #2
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d28 <_vfiprintf_r+0x25c>
 8007c46:	7821      	ldrb	r1, [r4, #0]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7f8 fad8 	bl	8000200 <memchr>
 8007c50:	b140      	cbz	r0, 8007c64 <_vfiprintf_r+0x198>
 8007c52:	2340      	movs	r3, #64	; 0x40
 8007c54:	eba0 000a 	sub.w	r0, r0, sl
 8007c58:	fa03 f000 	lsl.w	r0, r3, r0
 8007c5c:	9b04      	ldr	r3, [sp, #16]
 8007c5e:	4303      	orrs	r3, r0
 8007c60:	3401      	adds	r4, #1
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c68:	482c      	ldr	r0, [pc, #176]	; (8007d1c <_vfiprintf_r+0x250>)
 8007c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6e:	2206      	movs	r2, #6
 8007c70:	f7f8 fac6 	bl	8000200 <memchr>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d03f      	beq.n	8007cf8 <_vfiprintf_r+0x22c>
 8007c78:	4b29      	ldr	r3, [pc, #164]	; (8007d20 <_vfiprintf_r+0x254>)
 8007c7a:	bb1b      	cbnz	r3, 8007cc4 <_vfiprintf_r+0x1f8>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	3307      	adds	r3, #7
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	3308      	adds	r3, #8
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	443b      	add	r3, r7
 8007c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8e:	e767      	b.n	8007b60 <_vfiprintf_r+0x94>
 8007c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c94:	460c      	mov	r4, r1
 8007c96:	2001      	movs	r0, #1
 8007c98:	e7a5      	b.n	8007be6 <_vfiprintf_r+0x11a>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	3401      	adds	r4, #1
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f04f 0c0a 	mov.w	ip, #10
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cac:	3a30      	subs	r2, #48	; 0x30
 8007cae:	2a09      	cmp	r2, #9
 8007cb0:	d903      	bls.n	8007cba <_vfiprintf_r+0x1ee>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0c5      	beq.n	8007c42 <_vfiprintf_r+0x176>
 8007cb6:	9105      	str	r1, [sp, #20]
 8007cb8:	e7c3      	b.n	8007c42 <_vfiprintf_r+0x176>
 8007cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7f0      	b.n	8007ca6 <_vfiprintf_r+0x1da>
 8007cc4:	ab03      	add	r3, sp, #12
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <_vfiprintf_r+0x258>)
 8007ccc:	a904      	add	r1, sp, #16
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f3af 8000 	nop.w
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	1c78      	adds	r0, r7, #1
 8007cd8:	d1d6      	bne.n	8007c88 <_vfiprintf_r+0x1bc>
 8007cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cdc:	07d9      	lsls	r1, r3, #31
 8007cde:	d405      	bmi.n	8007cec <_vfiprintf_r+0x220>
 8007ce0:	89ab      	ldrh	r3, [r5, #12]
 8007ce2:	059a      	lsls	r2, r3, #22
 8007ce4:	d402      	bmi.n	8007cec <_vfiprintf_r+0x220>
 8007ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ce8:	f7ff fc5b 	bl	80075a2 <__retarget_lock_release_recursive>
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	065b      	lsls	r3, r3, #25
 8007cf0:	f53f af12 	bmi.w	8007b18 <_vfiprintf_r+0x4c>
 8007cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf6:	e711      	b.n	8007b1c <_vfiprintf_r+0x50>
 8007cf8:	ab03      	add	r3, sp, #12
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <_vfiprintf_r+0x258>)
 8007d00:	a904      	add	r1, sp, #16
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f880 	bl	8007e08 <_printf_i>
 8007d08:	e7e4      	b.n	8007cd4 <_vfiprintf_r+0x208>
 8007d0a:	bf00      	nop
 8007d0c:	080087f4 	.word	0x080087f4
 8007d10:	08008814 	.word	0x08008814
 8007d14:	080087d4 	.word	0x080087d4
 8007d18:	08008834 	.word	0x08008834
 8007d1c:	0800883e 	.word	0x0800883e
 8007d20:	00000000 	.word	0x00000000
 8007d24:	08007aa7 	.word	0x08007aa7
 8007d28:	0800883a 	.word	0x0800883a

08007d2c <_printf_common>:
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	4616      	mov	r6, r2
 8007d32:	4699      	mov	r9, r3
 8007d34:	688a      	ldr	r2, [r1, #8]
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bfb8      	it	lt
 8007d40:	4613      	movlt	r3, r2
 8007d42:	6033      	str	r3, [r6, #0]
 8007d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b10a      	cbz	r2, 8007d52 <_printf_common+0x26>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	6033      	str	r3, [r6, #0]
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	0699      	lsls	r1, r3, #26
 8007d56:	bf42      	ittt	mi
 8007d58:	6833      	ldrmi	r3, [r6, #0]
 8007d5a:	3302      	addmi	r3, #2
 8007d5c:	6033      	strmi	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	f015 0506 	ands.w	r5, r5, #6
 8007d64:	d106      	bne.n	8007d74 <_printf_common+0x48>
 8007d66:	f104 0a19 	add.w	sl, r4, #25
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	6832      	ldr	r2, [r6, #0]
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dc26      	bgt.n	8007dc2 <_printf_common+0x96>
 8007d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d78:	1e13      	subs	r3, r2, #0
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	0692      	lsls	r2, r2, #26
 8007d82:	d42b      	bmi.n	8007ddc <_printf_common+0xb0>
 8007d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c0      	blx	r8
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d01e      	beq.n	8007dd0 <_printf_common+0xa4>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	68e5      	ldr	r5, [r4, #12]
 8007d96:	6832      	ldr	r2, [r6, #0]
 8007d98:	f003 0306 	and.w	r3, r3, #6
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	bf08      	it	eq
 8007da0:	1aad      	subeq	r5, r5, r2
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	2600      	movs	r6, #0
 8007db8:	341a      	adds	r4, #26
 8007dba:	42b5      	cmp	r5, r6
 8007dbc:	d11a      	bne.n	8007df4 <_printf_common+0xc8>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e008      	b.n	8007dd4 <_printf_common+0xa8>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4638      	mov	r0, r7
 8007dca:	47c0      	blx	r8
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d103      	bne.n	8007dd8 <_printf_common+0xac>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7c6      	b.n	8007d6a <_printf_common+0x3e>
 8007ddc:	18e1      	adds	r1, r4, r3
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	2030      	movs	r0, #48	; 0x30
 8007de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de6:	4422      	add	r2, r4
 8007de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7c7      	b.n	8007d84 <_printf_common+0x58>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4622      	mov	r2, r4
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d0e6      	beq.n	8007dd0 <_printf_common+0xa4>
 8007e02:	3601      	adds	r6, #1
 8007e04:	e7d9      	b.n	8007dba <_printf_common+0x8e>
	...

08007e08 <_printf_i>:
 8007e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	4691      	mov	r9, r2
 8007e10:	7e27      	ldrb	r7, [r4, #24]
 8007e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e14:	2f78      	cmp	r7, #120	; 0x78
 8007e16:	4680      	mov	r8, r0
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e1e:	d807      	bhi.n	8007e30 <_printf_i+0x28>
 8007e20:	2f62      	cmp	r7, #98	; 0x62
 8007e22:	d80a      	bhi.n	8007e3a <_printf_i+0x32>
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	f000 80d8 	beq.w	8007fda <_printf_i+0x1d2>
 8007e2a:	2f58      	cmp	r7, #88	; 0x58
 8007e2c:	f000 80a3 	beq.w	8007f76 <_printf_i+0x16e>
 8007e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e38:	e03a      	b.n	8007eb0 <_printf_i+0xa8>
 8007e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e3e:	2b15      	cmp	r3, #21
 8007e40:	d8f6      	bhi.n	8007e30 <_printf_i+0x28>
 8007e42:	a001      	add	r0, pc, #4	; (adr r0, 8007e48 <_printf_i+0x40>)
 8007e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007e31 	.word	0x08007e31
 8007e54:	08007e31 	.word	0x08007e31
 8007e58:	08007e31 	.word	0x08007e31
 8007e5c:	08007e31 	.word	0x08007e31
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007e31 	.word	0x08007e31
 8007e68:	08007e31 	.word	0x08007e31
 8007e6c:	08007e31 	.word	0x08007e31
 8007e70:	08007e31 	.word	0x08007e31
 8007e74:	08007fc1 	.word	0x08007fc1
 8007e78:	08007ee5 	.word	0x08007ee5
 8007e7c:	08007fa3 	.word	0x08007fa3
 8007e80:	08007e31 	.word	0x08007e31
 8007e84:	08007e31 	.word	0x08007e31
 8007e88:	08007fe3 	.word	0x08007fe3
 8007e8c:	08007e31 	.word	0x08007e31
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007e31 	.word	0x08007e31
 8007e98:	08007e31 	.word	0x08007e31
 8007e9c:	08007fab 	.word	0x08007fab
 8007ea0:	680b      	ldr	r3, [r1, #0]
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	600a      	str	r2, [r1, #0]
 8007ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0a3      	b.n	8007ffc <_printf_i+0x1f4>
 8007eb4:	6825      	ldr	r5, [r4, #0]
 8007eb6:	6808      	ldr	r0, [r1, #0]
 8007eb8:	062e      	lsls	r6, r5, #24
 8007eba:	f100 0304 	add.w	r3, r0, #4
 8007ebe:	d50a      	bpl.n	8007ed6 <_printf_i+0xce>
 8007ec0:	6805      	ldr	r5, [r0, #0]
 8007ec2:	600b      	str	r3, [r1, #0]
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	da03      	bge.n	8007ed0 <_printf_i+0xc8>
 8007ec8:	232d      	movs	r3, #45	; 0x2d
 8007eca:	426d      	negs	r5, r5
 8007ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed0:	485e      	ldr	r0, [pc, #376]	; (800804c <_printf_i+0x244>)
 8007ed2:	230a      	movs	r3, #10
 8007ed4:	e019      	b.n	8007f0a <_printf_i+0x102>
 8007ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007eda:	6805      	ldr	r5, [r0, #0]
 8007edc:	600b      	str	r3, [r1, #0]
 8007ede:	bf18      	it	ne
 8007ee0:	b22d      	sxthne	r5, r5
 8007ee2:	e7ef      	b.n	8007ec4 <_printf_i+0xbc>
 8007ee4:	680b      	ldr	r3, [r1, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	1d18      	adds	r0, r3, #4
 8007eea:	6008      	str	r0, [r1, #0]
 8007eec:	0628      	lsls	r0, r5, #24
 8007eee:	d501      	bpl.n	8007ef4 <_printf_i+0xec>
 8007ef0:	681d      	ldr	r5, [r3, #0]
 8007ef2:	e002      	b.n	8007efa <_printf_i+0xf2>
 8007ef4:	0669      	lsls	r1, r5, #25
 8007ef6:	d5fb      	bpl.n	8007ef0 <_printf_i+0xe8>
 8007ef8:	881d      	ldrh	r5, [r3, #0]
 8007efa:	4854      	ldr	r0, [pc, #336]	; (800804c <_printf_i+0x244>)
 8007efc:	2f6f      	cmp	r7, #111	; 0x6f
 8007efe:	bf0c      	ite	eq
 8007f00:	2308      	moveq	r3, #8
 8007f02:	230a      	movne	r3, #10
 8007f04:	2100      	movs	r1, #0
 8007f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f0a:	6866      	ldr	r6, [r4, #4]
 8007f0c:	60a6      	str	r6, [r4, #8]
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	bfa2      	ittt	ge
 8007f12:	6821      	ldrge	r1, [r4, #0]
 8007f14:	f021 0104 	bicge.w	r1, r1, #4
 8007f18:	6021      	strge	r1, [r4, #0]
 8007f1a:	b90d      	cbnz	r5, 8007f20 <_printf_i+0x118>
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	d04d      	beq.n	8007fbc <_printf_i+0x1b4>
 8007f20:	4616      	mov	r6, r2
 8007f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f26:	fb03 5711 	mls	r7, r3, r1, r5
 8007f2a:	5dc7      	ldrb	r7, [r0, r7]
 8007f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f30:	462f      	mov	r7, r5
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	460d      	mov	r5, r1
 8007f36:	d9f4      	bls.n	8007f22 <_printf_i+0x11a>
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d10b      	bne.n	8007f54 <_printf_i+0x14c>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	07df      	lsls	r7, r3, #31
 8007f40:	d508      	bpl.n	8007f54 <_printf_i+0x14c>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4299      	cmp	r1, r3
 8007f48:	bfde      	ittt	le
 8007f4a:	2330      	movle	r3, #48	; 0x30
 8007f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f54:	1b92      	subs	r2, r2, r6
 8007f56:	6122      	str	r2, [r4, #16]
 8007f58:	f8cd a000 	str.w	sl, [sp]
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	aa03      	add	r2, sp, #12
 8007f60:	4621      	mov	r1, r4
 8007f62:	4640      	mov	r0, r8
 8007f64:	f7ff fee2 	bl	8007d2c <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d14c      	bne.n	8008006 <_printf_i+0x1fe>
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	b004      	add	sp, #16
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	4835      	ldr	r0, [pc, #212]	; (800804c <_printf_i+0x244>)
 8007f78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	680e      	ldr	r6, [r1, #0]
 8007f80:	061f      	lsls	r7, r3, #24
 8007f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f86:	600e      	str	r6, [r1, #0]
 8007f88:	d514      	bpl.n	8007fb4 <_printf_i+0x1ac>
 8007f8a:	07d9      	lsls	r1, r3, #31
 8007f8c:	bf44      	itt	mi
 8007f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f92:	6023      	strmi	r3, [r4, #0]
 8007f94:	b91d      	cbnz	r5, 8007f9e <_printf_i+0x196>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f023 0320 	bic.w	r3, r3, #32
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	e7b0      	b.n	8007f04 <_printf_i+0xfc>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f043 0320 	orr.w	r3, r3, #32
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	2378      	movs	r3, #120	; 0x78
 8007fac:	4828      	ldr	r0, [pc, #160]	; (8008050 <_printf_i+0x248>)
 8007fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fb2:	e7e3      	b.n	8007f7c <_printf_i+0x174>
 8007fb4:	065e      	lsls	r6, r3, #25
 8007fb6:	bf48      	it	mi
 8007fb8:	b2ad      	uxthmi	r5, r5
 8007fba:	e7e6      	b.n	8007f8a <_printf_i+0x182>
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	e7bb      	b.n	8007f38 <_printf_i+0x130>
 8007fc0:	680b      	ldr	r3, [r1, #0]
 8007fc2:	6826      	ldr	r6, [r4, #0]
 8007fc4:	6960      	ldr	r0, [r4, #20]
 8007fc6:	1d1d      	adds	r5, r3, #4
 8007fc8:	600d      	str	r5, [r1, #0]
 8007fca:	0635      	lsls	r5, r6, #24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	d501      	bpl.n	8007fd4 <_printf_i+0x1cc>
 8007fd0:	6018      	str	r0, [r3, #0]
 8007fd2:	e002      	b.n	8007fda <_printf_i+0x1d2>
 8007fd4:	0671      	lsls	r1, r6, #25
 8007fd6:	d5fb      	bpl.n	8007fd0 <_printf_i+0x1c8>
 8007fd8:	8018      	strh	r0, [r3, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	4616      	mov	r6, r2
 8007fe0:	e7ba      	b.n	8007f58 <_printf_i+0x150>
 8007fe2:	680b      	ldr	r3, [r1, #0]
 8007fe4:	1d1a      	adds	r2, r3, #4
 8007fe6:	600a      	str	r2, [r1, #0]
 8007fe8:	681e      	ldr	r6, [r3, #0]
 8007fea:	6862      	ldr	r2, [r4, #4]
 8007fec:	2100      	movs	r1, #0
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7f8 f906 	bl	8000200 <memchr>
 8007ff4:	b108      	cbz	r0, 8007ffa <_printf_i+0x1f2>
 8007ff6:	1b80      	subs	r0, r0, r6
 8007ff8:	6060      	str	r0, [r4, #4]
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	2300      	movs	r3, #0
 8008000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008004:	e7a8      	b.n	8007f58 <_printf_i+0x150>
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	4632      	mov	r2, r6
 800800a:	4649      	mov	r1, r9
 800800c:	4640      	mov	r0, r8
 800800e:	47d0      	blx	sl
 8008010:	3001      	adds	r0, #1
 8008012:	d0ab      	beq.n	8007f6c <_printf_i+0x164>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	079b      	lsls	r3, r3, #30
 8008018:	d413      	bmi.n	8008042 <_printf_i+0x23a>
 800801a:	68e0      	ldr	r0, [r4, #12]
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	4298      	cmp	r0, r3
 8008020:	bfb8      	it	lt
 8008022:	4618      	movlt	r0, r3
 8008024:	e7a4      	b.n	8007f70 <_printf_i+0x168>
 8008026:	2301      	movs	r3, #1
 8008028:	4632      	mov	r2, r6
 800802a:	4649      	mov	r1, r9
 800802c:	4640      	mov	r0, r8
 800802e:	47d0      	blx	sl
 8008030:	3001      	adds	r0, #1
 8008032:	d09b      	beq.n	8007f6c <_printf_i+0x164>
 8008034:	3501      	adds	r5, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	9903      	ldr	r1, [sp, #12]
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	42ab      	cmp	r3, r5
 800803e:	dcf2      	bgt.n	8008026 <_printf_i+0x21e>
 8008040:	e7eb      	b.n	800801a <_printf_i+0x212>
 8008042:	2500      	movs	r5, #0
 8008044:	f104 0619 	add.w	r6, r4, #25
 8008048:	e7f5      	b.n	8008036 <_printf_i+0x22e>
 800804a:	bf00      	nop
 800804c:	08008845 	.word	0x08008845
 8008050:	08008856 	.word	0x08008856

08008054 <_sbrk_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d06      	ldr	r5, [pc, #24]	; (8008070 <_sbrk_r+0x1c>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	f7fa f880 	bl	8002164 <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_sbrk_r+0x1a>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_sbrk_r+0x1a>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20026888 	.word	0x20026888

08008074 <__sread>:
 8008074:	b510      	push	{r4, lr}
 8008076:	460c      	mov	r4, r1
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	f000 f8e0 	bl	8008240 <_read_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	bfab      	itete	ge
 8008084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008086:	89a3      	ldrhlt	r3, [r4, #12]
 8008088:	181b      	addge	r3, r3, r0
 800808a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800808e:	bfac      	ite	ge
 8008090:	6563      	strge	r3, [r4, #84]	; 0x54
 8008092:	81a3      	strhlt	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__swrite>:
 8008096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	461f      	mov	r7, r3
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	05db      	lsls	r3, r3, #23
 80080a0:	4605      	mov	r5, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4616      	mov	r6, r2
 80080a6:	d505      	bpl.n	80080b4 <__swrite+0x1e>
 80080a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ac:	2302      	movs	r3, #2
 80080ae:	2200      	movs	r2, #0
 80080b0:	f000 f868 	bl	8008184 <_lseek_r>
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	4628      	mov	r0, r5
 80080c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ca:	f000 b817 	b.w	80080fc <_write_r>

080080ce <__sseek>:
 80080ce:	b510      	push	{r4, lr}
 80080d0:	460c      	mov	r4, r1
 80080d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d6:	f000 f855 	bl	8008184 <_lseek_r>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	bf15      	itete	ne
 80080e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ea:	81a3      	strheq	r3, [r4, #12]
 80080ec:	bf18      	it	ne
 80080ee:	81a3      	strhne	r3, [r4, #12]
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <__sclose>:
 80080f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f6:	f000 b813 	b.w	8008120 <_close_r>
	...

080080fc <_write_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d07      	ldr	r5, [pc, #28]	; (800811c <_write_r+0x20>)
 8008100:	4604      	mov	r4, r0
 8008102:	4608      	mov	r0, r1
 8008104:	4611      	mov	r1, r2
 8008106:	2200      	movs	r2, #0
 8008108:	602a      	str	r2, [r5, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	f7f9 fa3f 	bl	800158e <_write>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_write_r+0x1e>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_write_r+0x1e>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20026888 	.word	0x20026888

08008120 <_close_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d06      	ldr	r5, [pc, #24]	; (800813c <_close_r+0x1c>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	f7f9 ffe5 	bl	80020fa <_close>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_close_r+0x1a>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_close_r+0x1a>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	20026888 	.word	0x20026888

08008140 <_fstat_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	; (8008160 <_fstat_r+0x20>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	f7f9 ffe0 	bl	8002112 <_fstat>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d102      	bne.n	800815c <_fstat_r+0x1c>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	b103      	cbz	r3, 800815c <_fstat_r+0x1c>
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20026888 	.word	0x20026888

08008164 <_isatty_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_isatty_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 ffdf 	bl	8002132 <_isatty>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_isatty_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_isatty_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	20026888 	.word	0x20026888

08008184 <_lseek_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_lseek_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7f9 ffd8 	bl	8002148 <_lseek>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_lseek_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_lseek_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20026888 	.word	0x20026888

080081a8 <memmove>:
 80081a8:	4288      	cmp	r0, r1
 80081aa:	b510      	push	{r4, lr}
 80081ac:	eb01 0402 	add.w	r4, r1, r2
 80081b0:	d902      	bls.n	80081b8 <memmove+0x10>
 80081b2:	4284      	cmp	r4, r0
 80081b4:	4623      	mov	r3, r4
 80081b6:	d807      	bhi.n	80081c8 <memmove+0x20>
 80081b8:	1e43      	subs	r3, r0, #1
 80081ba:	42a1      	cmp	r1, r4
 80081bc:	d008      	beq.n	80081d0 <memmove+0x28>
 80081be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c6:	e7f8      	b.n	80081ba <memmove+0x12>
 80081c8:	4402      	add	r2, r0
 80081ca:	4601      	mov	r1, r0
 80081cc:	428a      	cmp	r2, r1
 80081ce:	d100      	bne.n	80081d2 <memmove+0x2a>
 80081d0:	bd10      	pop	{r4, pc}
 80081d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081da:	e7f7      	b.n	80081cc <memmove+0x24>

080081dc <__malloc_lock>:
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <__malloc_lock+0x8>)
 80081de:	f7ff b9df 	b.w	80075a0 <__retarget_lock_acquire_recursive>
 80081e2:	bf00      	nop
 80081e4:	20026880 	.word	0x20026880

080081e8 <__malloc_unlock>:
 80081e8:	4801      	ldr	r0, [pc, #4]	; (80081f0 <__malloc_unlock+0x8>)
 80081ea:	f7ff b9da 	b.w	80075a2 <__retarget_lock_release_recursive>
 80081ee:	bf00      	nop
 80081f0:	20026880 	.word	0x20026880

080081f4 <_realloc_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	4607      	mov	r7, r0
 80081f8:	4614      	mov	r4, r2
 80081fa:	460e      	mov	r6, r1
 80081fc:	b921      	cbnz	r1, 8008208 <_realloc_r+0x14>
 80081fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008202:	4611      	mov	r1, r2
 8008204:	f7ff ba82 	b.w	800770c <_malloc_r>
 8008208:	b922      	cbnz	r2, 8008214 <_realloc_r+0x20>
 800820a:	f7ff fa2f 	bl	800766c <_free_r>
 800820e:	4625      	mov	r5, r4
 8008210:	4628      	mov	r0, r5
 8008212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008214:	f000 f826 	bl	8008264 <_malloc_usable_size_r>
 8008218:	42a0      	cmp	r0, r4
 800821a:	d20f      	bcs.n	800823c <_realloc_r+0x48>
 800821c:	4621      	mov	r1, r4
 800821e:	4638      	mov	r0, r7
 8008220:	f7ff fa74 	bl	800770c <_malloc_r>
 8008224:	4605      	mov	r5, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d0f2      	beq.n	8008210 <_realloc_r+0x1c>
 800822a:	4631      	mov	r1, r6
 800822c:	4622      	mov	r2, r4
 800822e:	f7fe fe6b 	bl	8006f08 <memcpy>
 8008232:	4631      	mov	r1, r6
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff fa19 	bl	800766c <_free_r>
 800823a:	e7e9      	b.n	8008210 <_realloc_r+0x1c>
 800823c:	4635      	mov	r5, r6
 800823e:	e7e7      	b.n	8008210 <_realloc_r+0x1c>

08008240 <_read_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	; (8008260 <_read_r+0x20>)
 8008244:	4604      	mov	r4, r0
 8008246:	4608      	mov	r0, r1
 8008248:	4611      	mov	r1, r2
 800824a:	2200      	movs	r2, #0
 800824c:	602a      	str	r2, [r5, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	f7f9 ff36 	bl	80020c0 <_read>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_read_r+0x1e>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_read_r+0x1e>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	20026888 	.word	0x20026888

08008264 <_malloc_usable_size_r>:
 8008264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008268:	1f18      	subs	r0, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfbc      	itt	lt
 800826e:	580b      	ldrlt	r3, [r1, r0]
 8008270:	18c0      	addlt	r0, r0, r3
 8008272:	4770      	bx	lr

08008274 <_init>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr

08008280 <_fini>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	bf00      	nop
 8008284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008286:	bc08      	pop	{r3}
 8008288:	469e      	mov	lr, r3
 800828a:	4770      	bx	lr
